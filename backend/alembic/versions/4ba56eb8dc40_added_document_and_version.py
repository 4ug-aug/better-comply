"""Added document and version

Revision ID: 4ba56eb8dc40
Revises: 2c62e6f0cdcf
Create Date: 2025-10-17 20:13:36.739078

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4ba56eb8dc40'
down_revision: Union[str, Sequence[str], None] = '2c62e6f0cdcf'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('document_versions', sa.Column('parsed_uri', sa.String(), nullable=False))
    op.add_column('document_versions', sa.Column('content_hash', sa.String(), nullable=False))
    op.alter_column('document_versions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_document_versions_artifact_id'), table_name='document_versions')
    op.drop_index(op.f('ix_document_versions_text_hash'), table_name='document_versions')
    op.create_index('idx_document_version_content_hash', 'document_versions', ['content_hash'], unique=False)
    op.create_index('idx_document_version_document_id', 'document_versions', ['document_id'], unique=False)
    op.create_index(op.f('ix_document_versions_content_hash'), 'document_versions', ['content_hash'], unique=False)
    op.drop_constraint(op.f('document_versions_prev_version_id_fkey'), 'document_versions', type_='foreignkey')
    op.drop_constraint(op.f('document_versions_artifact_id_fkey'), 'document_versions', type_='foreignkey')
    op.drop_column('document_versions', 'prev_version_id')
    op.drop_column('document_versions', 'text_hash')
    op.drop_column('document_versions', 'text_uri')
    op.drop_column('document_versions', 'artifact_id')
    op.add_column('documents', sa.Column('source_url', sa.String(), nullable=False))
    op.add_column('documents', sa.Column('published_date', sa.String(), nullable=True))
    op.add_column('documents', sa.Column('language', sa.String(), nullable=False))
    op.alter_column('documents', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('documents', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('ix_documents_jurisdiction'), table_name='documents')
    op.drop_index(op.f('ix_documents_logical_key'), table_name='documents')
    op.create_index('idx_document_source_id', 'documents', ['source_id'], unique=False)
    op.create_index('idx_document_source_url', 'documents', ['source_url'], unique=False)
    op.create_index(op.f('ix_documents_source_url'), 'documents', ['source_url'], unique=True)
    op.drop_constraint(op.f('fk_documents_latest_version_id'), 'documents', type_='foreignkey')
    op.drop_column('documents', 'jurisdiction')
    op.drop_column('documents', 'latest_version_id')
    op.drop_column('documents', 'tags')
    op.drop_column('documents', 'logical_key')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('documents', sa.Column('logical_key', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('documents', sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('documents', sa.Column('latest_version_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('documents', sa.Column('jurisdiction', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.create_foreign_key(op.f('fk_documents_latest_version_id'), 'documents', 'document_versions', ['latest_version_id'], ['id'])
    op.drop_index(op.f('ix_documents_source_url'), table_name='documents')
    op.drop_index('idx_document_source_url', table_name='documents')
    op.drop_index('idx_document_source_id', table_name='documents')
    op.create_index(op.f('ix_documents_logical_key'), 'documents', ['logical_key'], unique=True)
    op.create_index(op.f('ix_documents_jurisdiction'), 'documents', ['jurisdiction'], unique=False)
    op.alter_column('documents', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('documents', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('documents', 'language')
    op.drop_column('documents', 'published_date')
    op.drop_column('documents', 'source_url')
    op.add_column('document_versions', sa.Column('artifact_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('document_versions', sa.Column('text_uri', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('document_versions', sa.Column('text_hash', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('document_versions', sa.Column('prev_version_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('document_versions_artifact_id_fkey'), 'document_versions', 'artifacts', ['artifact_id'], ['id'])
    op.create_foreign_key(op.f('document_versions_prev_version_id_fkey'), 'document_versions', 'document_versions', ['prev_version_id'], ['id'])
    op.drop_index(op.f('ix_document_versions_content_hash'), table_name='document_versions')
    op.drop_index('idx_document_version_document_id', table_name='document_versions')
    op.drop_index('idx_document_version_content_hash', table_name='document_versions')
    op.create_index(op.f('ix_document_versions_text_hash'), 'document_versions', ['text_hash'], unique=False)
    op.create_index(op.f('ix_document_versions_artifact_id'), 'document_versions', ['artifact_id'], unique=False)
    op.alter_column('document_versions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('document_versions', 'content_hash')
    op.drop_column('document_versions', 'parsed_uri')
