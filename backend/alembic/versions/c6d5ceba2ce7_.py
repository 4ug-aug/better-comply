"""empty message

Revision ID: c6d5ceba2ce7
Revises: 8a0ee6f29e1e
Create Date: 2025-10-15 20:06:37.361441

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c6d5ceba2ce7'
down_revision: Union[str, Sequence[str], None] = '8a0ee6f29e1e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('actor', sa.Enum('SYSTEM', 'USER', name='actortype'), nullable=False),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('subject_kind', sa.String(), nullable=False),
    sa.Column('subject_id', sa.Integer(), nullable=False),
    sa.Column('at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('meta', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.create_index(op.f('ix_audit_logs_at'), 'audit_logs', ['at'], unique=False)
    op.create_index(op.f('ix_audit_logs_id'), 'audit_logs', ['id'], unique=False)
    op.create_index(op.f('ix_audit_logs_subject_id'), 'audit_logs', ['subject_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_subject_kind'), 'audit_logs', ['subject_kind'], unique=False)
    op.create_table('sources',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('kind', sa.Enum('HTML', 'API', 'PDF', name='sourcekind'), nullable=False),
    sa.Column('base_url', sa.String(), nullable=False),
    sa.Column('auth_ref', sa.String(), nullable=True),
    sa.Column('robots_mode', sa.Enum('ALLOW', 'DISALLOW', 'CUSTOM', name='robotsmode'), nullable=True),
    sa.Column('rate_limit', sa.Integer(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sources_id'), 'sources', ['id'], unique=False)
    op.create_index(op.f('ix_sources_name'), 'sources', ['name'], unique=False)
    op.create_table('subscriptions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('source_id', sa.Integer(), nullable=False),
    sa.Column('jurisdiction', sa.String(), nullable=False),
    sa.Column('selectors', sa.JSON(), nullable=False),
    sa.Column('schedule', sa.String(), nullable=False),
    sa.Column('last_run_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('next_run_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'PAUSED', 'DISABLED', 'ERROR', name='subscriptionstatus'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_subscriptions_id'), 'subscriptions', ['id'], unique=False)
    op.create_index(op.f('ix_subscriptions_jurisdiction'), 'subscriptions', ['jurisdiction'], unique=False)
    op.create_index(op.f('ix_subscriptions_source_id'), 'subscriptions', ['source_id'], unique=False)
    op.create_table('runs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('subscription_id', sa.Integer(), nullable=False),
    sa.Column('run_kind', sa.Enum('CRAWL', 'PARSE', 'NORMALIZE', 'SCHEDULE', name='runkind'), nullable=False),
    sa.Column('started_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='runstatus'), nullable=True),
    sa.Column('error', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['subscription_id'], ['subscriptions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_runs_id'), 'runs', ['id'], unique=False)
    op.create_index(op.f('ix_runs_subscription_id'), 'runs', ['subscription_id'], unique=False)
    op.create_table('artifacts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('source_url', sa.String(), nullable=False),
    sa.Column('content_type', sa.String(), nullable=False),
    sa.Column('blob_uri', sa.String(), nullable=False),
    sa.Column('fetch_hash', sa.String(), nullable=False),
    sa.Column('fetched_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('run_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['run_id'], ['runs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_artifacts_fetch_hash'), 'artifacts', ['fetch_hash'], unique=False)
    op.create_index(op.f('ix_artifacts_id'), 'artifacts', ['id'], unique=False)
    op.create_index(op.f('ix_artifacts_run_id'), 'artifacts', ['run_id'], unique=False)
    op.create_index(op.f('ix_artifacts_source_url'), 'artifacts', ['source_url'], unique=False)
    op.create_table('documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('logical_key', sa.String(), nullable=False),
    sa.Column('latest_version_id', sa.Integer(), nullable=True),
    sa.Column('source_id', sa.Integer(), nullable=False),
    sa.Column('jurisdiction', sa.String(), nullable=False),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_documents_id'), 'documents', ['id'], unique=False)
    op.create_index(op.f('ix_documents_jurisdiction'), 'documents', ['jurisdiction'], unique=False)
    op.create_index(op.f('ix_documents_logical_key'), 'documents', ['logical_key'], unique=True)
    op.create_index(op.f('ix_documents_source_id'), 'documents', ['source_id'], unique=False)
    op.create_table('document_versions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('artifact_id', sa.Integer(), nullable=False),
    sa.Column('text_hash', sa.String(), nullable=False),
    sa.Column('text_uri', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('prev_version_id', sa.Integer(), nullable=True),
    sa.Column('diff_uri', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['artifact_id'], ['artifacts.id'], ),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ),
    sa.ForeignKeyConstraint(['prev_version_id'], ['document_versions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_document_versions_artifact_id'), 'document_versions', ['artifact_id'], unique=False)
    op.create_index(op.f('ix_document_versions_document_id'), 'document_versions', ['document_id'], unique=False)
    op.create_index(op.f('ix_document_versions_id'), 'document_versions', ['id'], unique=False)
    op.create_index(op.f('ix_document_versions_text_hash'), 'document_versions', ['text_hash'], unique=False)
    # Add the foreign key constraint from documents to document_versions after both tables exist
    op.create_foreign_key('fk_documents_latest_version_id', 'documents', 'document_versions', ['latest_version_id'], ['id'])
    op.create_table('provenance_edges',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('from_id', sa.Integer(), nullable=False),
    sa.Column('to_id', sa.Integer(), nullable=False),
    sa.Column('kind', sa.Enum('FETCH', 'PARSE', 'NORMALIZE', 'DEDUPE', name='provenancekind'), nullable=False),
    sa.Column('at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('prov_metadata', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_provenance_edges_from_id'), 'provenance_edges', ['from_id'], unique=False)
    op.create_index(op.f('ix_provenance_edges_id'), 'provenance_edges', ['id'], unique=False)
    op.create_index(op.f('ix_provenance_edges_to_id'), 'provenance_edges', ['to_id'], unique=False)
    op.create_table('delivery_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('subscriber_id', sa.String(), nullable=False),
    sa.Column('attempt', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'SENT', 'DELIVERED', 'FAILED', 'RETRYING', name='deliverystatus'), nullable=True),
    sa.Column('response_meta', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ),
    sa.ForeignKeyConstraint(['version_id'], ['document_versions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_delivery_events_document_id'), 'delivery_events', ['document_id'], unique=False)
    op.create_index(op.f('ix_delivery_events_id'), 'delivery_events', ['id'], unique=False)
    op.create_index(op.f('ix_delivery_events_subscriber_id'), 'delivery_events', ['subscriber_id'], unique=False)
    op.create_index(op.f('ix_delivery_events_version_id'), 'delivery_events', ['version_id'], unique=False)
    op.drop_table('celery_taskmeta')
    op.drop_table('celery_tasksetmeta')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('celery_tasksetmeta',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('taskset_id', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('date_done', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_tasksetmeta_pkey')),
    sa.UniqueConstraint('taskset_id', name=op.f('celery_tasksetmeta_taskset_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('celery_taskmeta',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('date_done', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('traceback', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.Column('args', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('kwargs', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('worker', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.Column('retries', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('queue', sa.VARCHAR(length=155), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('celery_taskmeta_pkey')),
    sa.UniqueConstraint('task_id', name=op.f('celery_taskmeta_task_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_index(op.f('ix_delivery_events_version_id'), table_name='delivery_events')
    op.drop_index(op.f('ix_delivery_events_subscriber_id'), table_name='delivery_events')
    op.drop_index(op.f('ix_delivery_events_id'), table_name='delivery_events')
    op.drop_index(op.f('ix_delivery_events_document_id'), table_name='delivery_events')
    op.drop_table('delivery_events')
    op.drop_index(op.f('ix_artifacts_source_url'), table_name='artifacts')
    op.drop_index(op.f('ix_artifacts_run_id'), table_name='artifacts')
    op.drop_index(op.f('ix_artifacts_id'), table_name='artifacts')
    op.drop_index(op.f('ix_artifacts_fetch_hash'), table_name='artifacts')
    op.drop_table('artifacts')
    op.drop_index(op.f('ix_runs_subscription_id'), table_name='runs')
    op.drop_index(op.f('ix_runs_id'), table_name='runs')
    op.drop_table('runs')
    op.drop_index(op.f('ix_subscriptions_source_id'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_jurisdiction'), table_name='subscriptions')
    op.drop_index(op.f('ix_subscriptions_id'), table_name='subscriptions')
    op.drop_table('subscriptions')
    op.drop_index(op.f('ix_sources_name'), table_name='sources')
    op.drop_index(op.f('ix_sources_id'), table_name='sources')
    op.drop_table('sources')
    op.drop_index(op.f('ix_provenance_edges_to_id'), table_name='provenance_edges')
    op.drop_index(op.f('ix_provenance_edges_id'), table_name='provenance_edges')
    op.drop_index(op.f('ix_provenance_edges_from_id'), table_name='provenance_edges')
    op.drop_table('provenance_edges')
    op.drop_constraint('fk_documents_latest_version_id', 'documents', type_='foreignkey')
    op.drop_index(op.f('ix_documents_source_id'), table_name='documents')
    op.drop_index(op.f('ix_documents_logical_key'), table_name='documents')
    op.drop_index(op.f('ix_documents_jurisdiction'), table_name='documents')
    op.drop_index(op.f('ix_documents_id'), table_name='documents')
    op.drop_table('documents')
    op.drop_index(op.f('ix_document_versions_text_hash'), table_name='document_versions')
    op.drop_index(op.f('ix_document_versions_id'), table_name='document_versions')
    op.drop_index(op.f('ix_document_versions_document_id'), table_name='document_versions')
    op.drop_index(op.f('ix_document_versions_artifact_id'), table_name='document_versions')
    op.drop_table('document_versions')
    op.drop_index(op.f('ix_audit_logs_subject_kind'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_subject_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_at'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_action'), table_name='audit_logs')
    op.drop_table('audit_logs')
    # ### end Alembic commands ###
