services:
  nginx:
    build: ./nginx
    ports:
      - "80:80"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend

  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost/api
      - WATCHPACK_POLLING=true
    depends_on:
      - backend

  backend:
    build: ./backend
    volumes:
      - ./backend:/app
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=testdb
      - POSTGRES_USER=testuser
      - POSTGRES_PASSWORD=testpassword
      - WATCHPACK_POLLING=true
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - KEK_CURRENT=${KEK_CURRENT}
      - KEK_v1=${KEK_v1}
    depends_on:
      - postgres
      - redis
      - kafka

  job-handler:
    build: ./backend
    command: ["python", "-m", "jobs_engine.events_handler_worker"]
    volumes:
      - ./backend:/app
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=testdb
      - POSTGRES_USER=testuser
      - POSTGRES_PASSWORD=testpassword
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_ENDPOINT=minio:9000
      - MINIO_SECURE=false
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9093
      - KEK_CURRENT=${KEK_CURRENT}
      - KEK_v1=${KEK_v1}
    depends_on:
      - backend
      - postgres
      - redis
      - kafka

  celery-worker:
    build: ./backend
    command: celery -A celery_app:app worker -l INFO -Q control,celery -n worker@%h
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=testdb
      - POSTGRES_USER=testuser
      - POSTGRES_PASSWORD=testpassword
    depends_on:
      - postgres
      - redis
      - kafka

  celery-beat:
    build: ./backend
    command: celery -A celery_app:app beat -l INFO
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=testdb
      - POSTGRES_USER=testuser
      - POSTGRES_PASSWORD=testpassword
    depends_on:
      - redis

  redis:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    volumes:
      - redis_data:/data

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kafka:
    image: apache/kafka-native
    ports:
      - "9092:9092"
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    restart: unless-stopped
    volumes:
      - kafka_data:/var/lib/kafka/data

  kafka-ui:
    image: kafbat/kafka-ui:main
    ports:
      - "8080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: redcrawl-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    depends_on:
      - kafka
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: unless-stopped
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_ACCESS_KEY: minioadmin
      MINIO_NOTIFY_KAFKA_ENABLE_PRIMARY: "on"
      MINIO_NOTIFY_KAFKA_BROKERS_PRIMARY: "kafka:9093"
      MINIO_NOTIFY_KAFKA_TOPIC_PRIMARY: "minio.object.created"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 40s
    command: server /data --console-address ":9001"

  mc-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...' &&
      until mc alias set local http://minio:9000 minioadmin minioadmin; do
        echo 'MinIO not ready, retrying in 5 seconds...' &&
        sleep 5
      done &&
      echo 'MinIO is ready, setting up Kafka notifications...' &&
      mc mb -p local/osint-sink || true &&
      mc admin config set local notify_kafka:kafka1 brokers='kafka:9093' topic='minio.object.created' sasl='off' tls='off' &&
      echo 'Kafka configuration applied. Restarting MinIO service...' &&
      mc admin service restart local --json || echo 'Restart command completed (may show TTY warning but should work)' &&
      sleep 10 &&
      echo 'Setting up event notifications...' &&
      mc event add local/osint-sink arn:minio:sqs::kafka1:kafka --event put &&
      echo 'Kafka notifications configured successfully!'
      "

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  minio_data: