// This file is auto-generated by @hey-api/openapi-ts

import { type InfiniteData, infiniteQueryOptions, queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { AxiosError } from 'axios';

import { client } from '../client.gen';
import { adminEndpointAdminGet, computeNextSchedulingComputeNextPost, createSourceSourcesPost, createSubscriptionSchedulingSubscriptionsPost, deleteSourceSourcesSourceIdDelete, deleteSubscriptionSchedulingSubscriptionsSubIdDelete, disableSubscriptionSchedulingSubscriptionsSubIdDisablePost, dispatchOutboxSchedulingOutboxDispatchPost, enableSubscriptionSchedulingSubscriptionsSubIdEnablePost, getDocumentByUrlDocumentsByUrlSourceUrlGet, getDocumentDocumentsDocIdGet, getDocumentWithVersionsDocumentsDocIdVersionsGet, getParsedDocumentDocumentsDocIdVersionsVersionIdParsedGet, getSourceSourcesSourceIdGet, listDocumentsDocumentsGet, listDocumentsWithVersionsDocumentsWithVersionsGet, listOutboxSchedulingOutboxGet, listRunsSchedulingRunsGet, listSourcesSourcesGet, listSubscriptionsSchedulingSubscriptionsGet, loginForAccessTokenAuthTokenPost, type Options, protectedEndpointProtectedGet, readSubscriptionSchedulingSubscriptionsSubIdGet, readUsersMeAuthMeGet, refreshAccessTokenAuthRefreshPost, registerUserAuthRegisterPost, rootGet, runSubscriptionNowSchedulingSubscriptionsSubIdRunPost, streamObservabilityObservabilityStreamGet, tickSchedulingTickPost, updateSourceSourcesSourceIdPut, updateSubscriptionSchedulingSubscriptionsSubIdPut, verifyEmailAuthVerifyEmailGet } from '../sdk.gen';
import type { AdminEndpointAdminGetData, ComputeNextSchedulingComputeNextPostData, ComputeNextSchedulingComputeNextPostError, ComputeNextSchedulingComputeNextPostResponse, CreateSourceSourcesPostData, CreateSourceSourcesPostError, CreateSourceSourcesPostResponse, CreateSubscriptionSchedulingSubscriptionsPostData, CreateSubscriptionSchedulingSubscriptionsPostError, CreateSubscriptionSchedulingSubscriptionsPostResponse, DeleteSourceSourcesSourceIdDeleteData, DeleteSourceSourcesSourceIdDeleteError, DeleteSourceSourcesSourceIdDeleteResponse, DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteData, DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteError, DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteResponse, DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostData, DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostError, DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostResponse, DispatchOutboxSchedulingOutboxDispatchPostData, DispatchOutboxSchedulingOutboxDispatchPostError, DispatchOutboxSchedulingOutboxDispatchPostResponse, EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostData, EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostError, EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostResponse, GetDocumentByUrlDocumentsByUrlSourceUrlGetData, GetDocumentDocumentsDocIdGetData, GetDocumentWithVersionsDocumentsDocIdVersionsGetData, GetParsedDocumentDocumentsDocIdVersionsVersionIdParsedGetData, GetSourceSourcesSourceIdGetData, ListDocumentsDocumentsGetData, ListDocumentsWithVersionsDocumentsWithVersionsGetData, ListOutboxSchedulingOutboxGetData, ListOutboxSchedulingOutboxGetError, ListOutboxSchedulingOutboxGetResponse, ListRunsSchedulingRunsGetData, ListRunsSchedulingRunsGetError, ListRunsSchedulingRunsGetResponse, ListSourcesSourcesGetData, ListSourcesSourcesGetError, ListSourcesSourcesGetResponse, ListSubscriptionsSchedulingSubscriptionsGetData, ListSubscriptionsSchedulingSubscriptionsGetError, ListSubscriptionsSchedulingSubscriptionsGetResponse, LoginForAccessTokenAuthTokenPostData, LoginForAccessTokenAuthTokenPostError, LoginForAccessTokenAuthTokenPostResponse, ProtectedEndpointProtectedGetData, ReadSubscriptionSchedulingSubscriptionsSubIdGetData, ReadUsersMeAuthMeGetData, RefreshAccessTokenAuthRefreshPostData, RefreshAccessTokenAuthRefreshPostError, RefreshAccessTokenAuthRefreshPostResponse, RegisterUserAuthRegisterPostData, RegisterUserAuthRegisterPostError, RootGetData, RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostData, RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostError, RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostResponse, StreamObservabilityObservabilityStreamGetData, TickSchedulingTickPostData, TickSchedulingTickPostError, TickSchedulingTickPostResponse, UpdateSourceSourcesSourceIdPutData, UpdateSourceSourcesSourceIdPutError, UpdateSourceSourcesSourceIdPutResponse, UpdateSubscriptionSchedulingSubscriptionsSubIdPutData, UpdateSubscriptionSchedulingSubscriptionsSubIdPutError, UpdateSubscriptionSchedulingSubscriptionsSubIdPutResponse, VerifyEmailAuthVerifyEmailGetData } from '../types.gen';

/**
 * Register User
 */
export const registerUserAuthRegisterPostMutation = (options?: Partial<Options<RegisterUserAuthRegisterPostData>>): UseMutationOptions<unknown, AxiosError<RegisterUserAuthRegisterPostError>, Options<RegisterUserAuthRegisterPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<RegisterUserAuthRegisterPostError>, Options<RegisterUserAuthRegisterPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await registerUserAuthRegisterPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Login For Access Token
 */
export const loginForAccessTokenAuthTokenPostMutation = (options?: Partial<Options<LoginForAccessTokenAuthTokenPostData>>): UseMutationOptions<LoginForAccessTokenAuthTokenPostResponse, AxiosError<LoginForAccessTokenAuthTokenPostError>, Options<LoginForAccessTokenAuthTokenPostData>> => {
    const mutationOptions: UseMutationOptions<LoginForAccessTokenAuthTokenPostResponse, AxiosError<LoginForAccessTokenAuthTokenPostError>, Options<LoginForAccessTokenAuthTokenPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await loginForAccessTokenAuthTokenPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Refresh Access Token
 */
export const refreshAccessTokenAuthRefreshPostMutation = (options?: Partial<Options<RefreshAccessTokenAuthRefreshPostData>>): UseMutationOptions<RefreshAccessTokenAuthRefreshPostResponse, AxiosError<RefreshAccessTokenAuthRefreshPostError>, Options<RefreshAccessTokenAuthRefreshPostData>> => {
    const mutationOptions: UseMutationOptions<RefreshAccessTokenAuthRefreshPostResponse, AxiosError<RefreshAccessTokenAuthRefreshPostError>, Options<RefreshAccessTokenAuthRefreshPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await refreshAccessTokenAuthRefreshPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const verifyEmailAuthVerifyEmailGetQueryKey = (options: Options<VerifyEmailAuthVerifyEmailGetData>) => createQueryKey('verifyEmailAuthVerifyEmailGet', options);

/**
 * Verify Email
 */
export const verifyEmailAuthVerifyEmailGetOptions = (options: Options<VerifyEmailAuthVerifyEmailGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await verifyEmailAuthVerifyEmailGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: verifyEmailAuthVerifyEmailGetQueryKey(options)
    });
};

export const readUsersMeAuthMeGetQueryKey = (options?: Options<ReadUsersMeAuthMeGetData>) => createQueryKey('readUsersMeAuthMeGet', options);

/**
 * Read Users Me
 */
export const readUsersMeAuthMeGetOptions = (options?: Options<ReadUsersMeAuthMeGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readUsersMeAuthMeGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readUsersMeAuthMeGetQueryKey(options)
    });
};

/**
 * Tick
 */
export const tickSchedulingTickPostMutation = (options?: Partial<Options<TickSchedulingTickPostData>>): UseMutationOptions<TickSchedulingTickPostResponse, AxiosError<TickSchedulingTickPostError>, Options<TickSchedulingTickPostData>> => {
    const mutationOptions: UseMutationOptions<TickSchedulingTickPostResponse, AxiosError<TickSchedulingTickPostError>, Options<TickSchedulingTickPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await tickSchedulingTickPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Compute Next
 */
export const computeNextSchedulingComputeNextPostMutation = (options?: Partial<Options<ComputeNextSchedulingComputeNextPostData>>): UseMutationOptions<ComputeNextSchedulingComputeNextPostResponse, AxiosError<ComputeNextSchedulingComputeNextPostError>, Options<ComputeNextSchedulingComputeNextPostData>> => {
    const mutationOptions: UseMutationOptions<ComputeNextSchedulingComputeNextPostResponse, AxiosError<ComputeNextSchedulingComputeNextPostError>, Options<ComputeNextSchedulingComputeNextPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await computeNextSchedulingComputeNextPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Dispatch Outbox
 */
export const dispatchOutboxSchedulingOutboxDispatchPostMutation = (options?: Partial<Options<DispatchOutboxSchedulingOutboxDispatchPostData>>): UseMutationOptions<DispatchOutboxSchedulingOutboxDispatchPostResponse, AxiosError<DispatchOutboxSchedulingOutboxDispatchPostError>, Options<DispatchOutboxSchedulingOutboxDispatchPostData>> => {
    const mutationOptions: UseMutationOptions<DispatchOutboxSchedulingOutboxDispatchPostResponse, AxiosError<DispatchOutboxSchedulingOutboxDispatchPostError>, Options<DispatchOutboxSchedulingOutboxDispatchPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await dispatchOutboxSchedulingOutboxDispatchPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listSubscriptionsSchedulingSubscriptionsGetQueryKey = (options?: Options<ListSubscriptionsSchedulingSubscriptionsGetData>) => createQueryKey('listSubscriptionsSchedulingSubscriptionsGet', options);

/**
 * List Subscriptions
 */
export const listSubscriptionsSchedulingSubscriptionsGetOptions = (options?: Options<ListSubscriptionsSchedulingSubscriptionsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSubscriptionsSchedulingSubscriptionsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSubscriptionsSchedulingSubscriptionsGetQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const listSubscriptionsSchedulingSubscriptionsGetInfiniteQueryKey = (options?: Options<ListSubscriptionsSchedulingSubscriptionsGetData>): QueryKey<Options<ListSubscriptionsSchedulingSubscriptionsGetData>> => createQueryKey('listSubscriptionsSchedulingSubscriptionsGet', options, true);

/**
 * List Subscriptions
 */
export const listSubscriptionsSchedulingSubscriptionsGetInfiniteOptions = (options?: Options<ListSubscriptionsSchedulingSubscriptionsGetData>) => {
    return infiniteQueryOptions<ListSubscriptionsSchedulingSubscriptionsGetResponse, AxiosError<ListSubscriptionsSchedulingSubscriptionsGetError>, InfiniteData<ListSubscriptionsSchedulingSubscriptionsGetResponse>, QueryKey<Options<ListSubscriptionsSchedulingSubscriptionsGetData>>, number | Pick<QueryKey<Options<ListSubscriptionsSchedulingSubscriptionsGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListSubscriptionsSchedulingSubscriptionsGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listSubscriptionsSchedulingSubscriptionsGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSubscriptionsSchedulingSubscriptionsGetInfiniteQueryKey(options)
    });
};

/**
 * Create Subscription
 */
export const createSubscriptionSchedulingSubscriptionsPostMutation = (options?: Partial<Options<CreateSubscriptionSchedulingSubscriptionsPostData>>): UseMutationOptions<CreateSubscriptionSchedulingSubscriptionsPostResponse, AxiosError<CreateSubscriptionSchedulingSubscriptionsPostError>, Options<CreateSubscriptionSchedulingSubscriptionsPostData>> => {
    const mutationOptions: UseMutationOptions<CreateSubscriptionSchedulingSubscriptionsPostResponse, AxiosError<CreateSubscriptionSchedulingSubscriptionsPostError>, Options<CreateSubscriptionSchedulingSubscriptionsPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSubscriptionSchedulingSubscriptionsPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listRunsSchedulingRunsGetQueryKey = (options?: Options<ListRunsSchedulingRunsGetData>) => createQueryKey('listRunsSchedulingRunsGet', options);

/**
 * List Runs
 */
export const listRunsSchedulingRunsGetOptions = (options?: Options<ListRunsSchedulingRunsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listRunsSchedulingRunsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listRunsSchedulingRunsGetQueryKey(options)
    });
};

export const listRunsSchedulingRunsGetInfiniteQueryKey = (options?: Options<ListRunsSchedulingRunsGetData>): QueryKey<Options<ListRunsSchedulingRunsGetData>> => createQueryKey('listRunsSchedulingRunsGet', options, true);

/**
 * List Runs
 */
export const listRunsSchedulingRunsGetInfiniteOptions = (options?: Options<ListRunsSchedulingRunsGetData>) => {
    return infiniteQueryOptions<ListRunsSchedulingRunsGetResponse, AxiosError<ListRunsSchedulingRunsGetError>, InfiniteData<ListRunsSchedulingRunsGetResponse>, QueryKey<Options<ListRunsSchedulingRunsGetData>>, number | Pick<QueryKey<Options<ListRunsSchedulingRunsGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListRunsSchedulingRunsGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listRunsSchedulingRunsGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listRunsSchedulingRunsGetInfiniteQueryKey(options)
    });
};

export const listOutboxSchedulingOutboxGetQueryKey = (options?: Options<ListOutboxSchedulingOutboxGetData>) => createQueryKey('listOutboxSchedulingOutboxGet', options);

/**
 * List Outbox
 */
export const listOutboxSchedulingOutboxGetOptions = (options?: Options<ListOutboxSchedulingOutboxGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listOutboxSchedulingOutboxGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listOutboxSchedulingOutboxGetQueryKey(options)
    });
};

export const listOutboxSchedulingOutboxGetInfiniteQueryKey = (options?: Options<ListOutboxSchedulingOutboxGetData>): QueryKey<Options<ListOutboxSchedulingOutboxGetData>> => createQueryKey('listOutboxSchedulingOutboxGet', options, true);

/**
 * List Outbox
 */
export const listOutboxSchedulingOutboxGetInfiniteOptions = (options?: Options<ListOutboxSchedulingOutboxGetData>) => {
    return infiniteQueryOptions<ListOutboxSchedulingOutboxGetResponse, AxiosError<ListOutboxSchedulingOutboxGetError>, InfiniteData<ListOutboxSchedulingOutboxGetResponse>, QueryKey<Options<ListOutboxSchedulingOutboxGetData>>, number | Pick<QueryKey<Options<ListOutboxSchedulingOutboxGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListOutboxSchedulingOutboxGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listOutboxSchedulingOutboxGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listOutboxSchedulingOutboxGetInfiniteQueryKey(options)
    });
};

/**
 * Delete Subscription
 */
export const deleteSubscriptionSchedulingSubscriptionsSubIdDeleteMutation = (options?: Partial<Options<DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteData>>): UseMutationOptions<DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteResponse, AxiosError<DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteError>, Options<DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteResponse, AxiosError<DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteError>, Options<DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteSubscriptionSchedulingSubscriptionsSubIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const readSubscriptionSchedulingSubscriptionsSubIdGetQueryKey = (options: Options<ReadSubscriptionSchedulingSubscriptionsSubIdGetData>) => createQueryKey('readSubscriptionSchedulingSubscriptionsSubIdGet', options);

/**
 * Read Subscription
 */
export const readSubscriptionSchedulingSubscriptionsSubIdGetOptions = (options: Options<ReadSubscriptionSchedulingSubscriptionsSubIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readSubscriptionSchedulingSubscriptionsSubIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readSubscriptionSchedulingSubscriptionsSubIdGetQueryKey(options)
    });
};

/**
 * Update Subscription
 */
export const updateSubscriptionSchedulingSubscriptionsSubIdPutMutation = (options?: Partial<Options<UpdateSubscriptionSchedulingSubscriptionsSubIdPutData>>): UseMutationOptions<UpdateSubscriptionSchedulingSubscriptionsSubIdPutResponse, AxiosError<UpdateSubscriptionSchedulingSubscriptionsSubIdPutError>, Options<UpdateSubscriptionSchedulingSubscriptionsSubIdPutData>> => {
    const mutationOptions: UseMutationOptions<UpdateSubscriptionSchedulingSubscriptionsSubIdPutResponse, AxiosError<UpdateSubscriptionSchedulingSubscriptionsSubIdPutError>, Options<UpdateSubscriptionSchedulingSubscriptionsSubIdPutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateSubscriptionSchedulingSubscriptionsSubIdPut({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Enable Subscription
 */
export const enableSubscriptionSchedulingSubscriptionsSubIdEnablePostMutation = (options?: Partial<Options<EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostData>>): UseMutationOptions<EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostResponse, AxiosError<EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostError>, Options<EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostData>> => {
    const mutationOptions: UseMutationOptions<EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostResponse, AxiosError<EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostError>, Options<EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await enableSubscriptionSchedulingSubscriptionsSubIdEnablePost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Disable Subscription
 */
export const disableSubscriptionSchedulingSubscriptionsSubIdDisablePostMutation = (options?: Partial<Options<DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostData>>): UseMutationOptions<DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostResponse, AxiosError<DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostError>, Options<DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostData>> => {
    const mutationOptions: UseMutationOptions<DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostResponse, AxiosError<DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostError>, Options<DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await disableSubscriptionSchedulingSubscriptionsSubIdDisablePost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Run Subscription Now
 */
export const runSubscriptionNowSchedulingSubscriptionsSubIdRunPostMutation = (options?: Partial<Options<RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostData>>): UseMutationOptions<RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostResponse, AxiosError<RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostError>, Options<RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostData>> => {
    const mutationOptions: UseMutationOptions<RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostResponse, AxiosError<RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostError>, Options<RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await runSubscriptionNowSchedulingSubscriptionsSubIdRunPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listSourcesSourcesGetQueryKey = (options?: Options<ListSourcesSourcesGetData>) => createQueryKey('listSourcesSourcesGet', options);

/**
 * List Sources
 *
 * List all sources with pagination.
 */
export const listSourcesSourcesGetOptions = (options?: Options<ListSourcesSourcesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSourcesSourcesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSourcesSourcesGetQueryKey(options)
    });
};

export const listSourcesSourcesGetInfiniteQueryKey = (options?: Options<ListSourcesSourcesGetData>): QueryKey<Options<ListSourcesSourcesGetData>> => createQueryKey('listSourcesSourcesGet', options, true);

/**
 * List Sources
 *
 * List all sources with pagination.
 */
export const listSourcesSourcesGetInfiniteOptions = (options?: Options<ListSourcesSourcesGetData>) => {
    return infiniteQueryOptions<ListSourcesSourcesGetResponse, AxiosError<ListSourcesSourcesGetError>, InfiniteData<ListSourcesSourcesGetResponse>, QueryKey<Options<ListSourcesSourcesGetData>>, number | Pick<QueryKey<Options<ListSourcesSourcesGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListSourcesSourcesGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listSourcesSourcesGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSourcesSourcesGetInfiniteQueryKey(options)
    });
};

/**
 * Create Source
 *
 * Create a new source.
 */
export const createSourceSourcesPostMutation = (options?: Partial<Options<CreateSourceSourcesPostData>>): UseMutationOptions<CreateSourceSourcesPostResponse, AxiosError<CreateSourceSourcesPostError>, Options<CreateSourceSourcesPostData>> => {
    const mutationOptions: UseMutationOptions<CreateSourceSourcesPostResponse, AxiosError<CreateSourceSourcesPostError>, Options<CreateSourceSourcesPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSourceSourcesPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Source
 *
 * Delete a source.
 */
export const deleteSourceSourcesSourceIdDeleteMutation = (options?: Partial<Options<DeleteSourceSourcesSourceIdDeleteData>>): UseMutationOptions<DeleteSourceSourcesSourceIdDeleteResponse, AxiosError<DeleteSourceSourcesSourceIdDeleteError>, Options<DeleteSourceSourcesSourceIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<DeleteSourceSourcesSourceIdDeleteResponse, AxiosError<DeleteSourceSourcesSourceIdDeleteError>, Options<DeleteSourceSourcesSourceIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteSourceSourcesSourceIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSourceSourcesSourceIdGetQueryKey = (options: Options<GetSourceSourcesSourceIdGetData>) => createQueryKey('getSourceSourcesSourceIdGet', options);

/**
 * Get Source
 *
 * Get a specific source by ID.
 */
export const getSourceSourcesSourceIdGetOptions = (options: Options<GetSourceSourcesSourceIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSourceSourcesSourceIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSourceSourcesSourceIdGetQueryKey(options)
    });
};

/**
 * Update Source
 *
 * Update an existing source.
 */
export const updateSourceSourcesSourceIdPutMutation = (options?: Partial<Options<UpdateSourceSourcesSourceIdPutData>>): UseMutationOptions<UpdateSourceSourcesSourceIdPutResponse, AxiosError<UpdateSourceSourcesSourceIdPutError>, Options<UpdateSourceSourcesSourceIdPutData>> => {
    const mutationOptions: UseMutationOptions<UpdateSourceSourcesSourceIdPutResponse, AxiosError<UpdateSourceSourcesSourceIdPutError>, Options<UpdateSourceSourcesSourceIdPutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateSourceSourcesSourceIdPut({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listDocumentsDocumentsGetQueryKey = (options?: Options<ListDocumentsDocumentsGetData>) => createQueryKey('listDocumentsDocumentsGet', options);

/**
 * List Documents
 *
 * List all documents with optional filtering.
 *
 * Args:
 * skip: Number of documents to skip
 * limit: Maximum documents to return
 * source_id: Filter by source ID
 * language: Filter by language code
 *
 * Returns:
 * DocumentListResponse with paginated documents
 */
export const listDocumentsDocumentsGetOptions = (options?: Options<ListDocumentsDocumentsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listDocumentsDocumentsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDocumentsDocumentsGetQueryKey(options)
    });
};

export const listDocumentsWithVersionsDocumentsWithVersionsGetQueryKey = (options?: Options<ListDocumentsWithVersionsDocumentsWithVersionsGetData>) => createQueryKey('listDocumentsWithVersionsDocumentsWithVersionsGet', options);

/**
 * List Documents With Versions
 *
 * List all documents with their versions.
 *
 * Args:
 * skip: Number of documents to skip
 * limit: Maximum documents to return
 *
 * Returns:
 * DocumentDetailListResponse with paginated documents and versions
 */
export const listDocumentsWithVersionsDocumentsWithVersionsGetOptions = (options?: Options<ListDocumentsWithVersionsDocumentsWithVersionsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listDocumentsWithVersionsDocumentsWithVersionsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listDocumentsWithVersionsDocumentsWithVersionsGetQueryKey(options)
    });
};

export const getDocumentDocumentsDocIdGetQueryKey = (options: Options<GetDocumentDocumentsDocIdGetData>) => createQueryKey('getDocumentDocumentsDocIdGet', options);

/**
 * Get Document
 *
 * Get a single document by ID.
 *
 * Args:
 * doc_id: Document ID
 *
 * Returns:
 * DocumentOut response
 *
 * Raises:
 * HTTPException: 404 if document not found
 */
export const getDocumentDocumentsDocIdGetOptions = (options: Options<GetDocumentDocumentsDocIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDocumentDocumentsDocIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDocumentDocumentsDocIdGetQueryKey(options)
    });
};

export const getDocumentWithVersionsDocumentsDocIdVersionsGetQueryKey = (options: Options<GetDocumentWithVersionsDocumentsDocIdVersionsGetData>) => createQueryKey('getDocumentWithVersionsDocumentsDocIdVersionsGet', options);

/**
 * Get Document With Versions
 *
 * Get a document with all its versions.
 *
 * Args:
 * doc_id: Document ID
 *
 * Returns:
 * DocumentDetailOut response with all versions
 *
 * Raises:
 * HTTPException: 404 if document not found
 */
export const getDocumentWithVersionsDocumentsDocIdVersionsGetOptions = (options: Options<GetDocumentWithVersionsDocumentsDocIdVersionsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDocumentWithVersionsDocumentsDocIdVersionsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDocumentWithVersionsDocumentsDocIdVersionsGetQueryKey(options)
    });
};

export const getDocumentByUrlDocumentsByUrlSourceUrlGetQueryKey = (options: Options<GetDocumentByUrlDocumentsByUrlSourceUrlGetData>) => createQueryKey('getDocumentByUrlDocumentsByUrlSourceUrlGet', options);

/**
 * Get Document By Url
 *
 * Get a document by source URL.
 *
 * Args:
 * source_url: Source URL to search
 *
 * Returns:
 * DocumentOut response
 *
 * Raises:
 * HTTPException: 404 if document not found
 */
export const getDocumentByUrlDocumentsByUrlSourceUrlGetOptions = (options: Options<GetDocumentByUrlDocumentsByUrlSourceUrlGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getDocumentByUrlDocumentsByUrlSourceUrlGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getDocumentByUrlDocumentsByUrlSourceUrlGetQueryKey(options)
    });
};

export const getParsedDocumentDocumentsDocIdVersionsVersionIdParsedGetQueryKey = (options: Options<GetParsedDocumentDocumentsDocIdVersionsVersionIdParsedGetData>) => createQueryKey('getParsedDocumentDocumentsDocIdVersionsVersionIdParsedGet', options);

/**
 * Get Parsed Document
 *
 * Get parsed document content from MinIO by version ID.
 *
 * Args:
 * doc_id: Document ID (for route validation)
 * version_id: Document version ID
 *
 * Returns:
 * ParsedDocumentOut with full parsed content
 *
 * Raises:
 * HTTPException: 404 if document version not found
 * HTTPException: 500 if MinIO fetch fails
 */
export const getParsedDocumentDocumentsDocIdVersionsVersionIdParsedGetOptions = (options: Options<GetParsedDocumentDocumentsDocIdVersionsVersionIdParsedGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getParsedDocumentDocumentsDocIdVersionsVersionIdParsedGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getParsedDocumentDocumentsDocIdVersionsVersionIdParsedGetQueryKey(options)
    });
};

export const streamObservabilityObservabilityStreamGetQueryKey = (options: Options<StreamObservabilityObservabilityStreamGetData>) => createQueryKey('streamObservabilityObservabilityStreamGet', options);

/**
 * Stream Observability
 *
 * Stream observability data (outbox and runs) via Server-Sent Events.
 *
 * Sends initial snapshot, then periodic updates every 3 seconds.
 * Requires authentication token as query parameter since EventSource doesn't support custom headers.
 */
export const streamObservabilityObservabilityStreamGetOptions = (options: Options<StreamObservabilityObservabilityStreamGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await streamObservabilityObservabilityStreamGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: streamObservabilityObservabilityStreamGetQueryKey(options)
    });
};

export const rootGetQueryKey = (options?: Options<RootGetData>) => createQueryKey('rootGet', options);

/**
 * Root
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rootGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootGetQueryKey(options)
    });
};

export const protectedEndpointProtectedGetQueryKey = (options?: Options<ProtectedEndpointProtectedGetData>) => createQueryKey('protectedEndpointProtectedGet', options);

/**
 * Protected Endpoint
 */
export const protectedEndpointProtectedGetOptions = (options?: Options<ProtectedEndpointProtectedGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await protectedEndpointProtectedGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: protectedEndpointProtectedGetQueryKey(options)
    });
};

export const adminEndpointAdminGetQueryKey = (options?: Options<AdminEndpointAdminGetData>) => createQueryKey('adminEndpointAdminGet', options);

/**
 * Admin Endpoint
 */
export const adminEndpointAdminGetOptions = (options?: Options<AdminEndpointAdminGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await adminEndpointAdminGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: adminEndpointAdminGetQueryKey(options)
    });
};
