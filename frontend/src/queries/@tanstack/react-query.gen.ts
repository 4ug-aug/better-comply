// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, type InfiniteData, infiniteQueryOptions, queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { AxiosError } from 'axios';

import { client } from '../client.gen';
import { assignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPost, bulkUpdateSettingsSettingsBulkUpdatePost, checkIntegrityIntegrationsAccountsAccountIdIntegrityGet, createIdentifierIdentifiersPost, createObservationObservationsPost, createOrgUnitOrgUnitsPost, createScenarioScenariosPost, createSettingSettingsPost, createTargetTargetsPost, createTemplateSpearTemplatesPost, deleteAccountIntegrationsAccountsAccountIdDelete, deleteIdentifierIdentifiersIdentifierIdDelete, deleteObservationObservationsObservationIdDelete, deleteOrgUnitOrgUnitsOrgUnitIdDelete, deleteScenarioScenariosScenarioIdDelete, deleteSettingByKeySettingsKeyKeyDelete, deleteSettingSettingsSettingIdDelete, deleteTargetTargetsTargetIdDelete, deleteTemplateSpearTemplatesTemplateIdDelete, enqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPost, enqueueHunterioEmailTestEnqueueHunterioEmailPost, generateTextLlmGeneratePost, getAccountIntegrationsAccountsAccountIdGet, getAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGet, getAuditIntegrationsAccountsAccountIdAuditGet, getGroupMicrosoftGraphGroupsGroupIdGet, getIdentifiersByTargetIdentifiersTargetsTargetIdGet, getMetricsMicrosoftGraphMetricsGet, getMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGet, getMicrosoftGraphStatisticsMicrosoftGraphStatisticsGet, getObservationsByTargetObservationsTargetsTargetIdGet, getOrganizationMicrosoftGraphOrganizationGet, getOrgUnitByIdOrgUnitsOrgUnitIdGet, getOrgUnitsOrgUnitsGet, getProviderIntegrationsProvidersProviderKeyGet, getScenarioByIdScenariosScenarioIdGet, getScenariosScenariosGet, getSecretIntegrationsAccountsAccountIdSecretGet, getSettingByKeySettingsKeyKeyGet, getSettingsByCategorySettingsCategoryCategoryGet, getSettingSettingsSettingIdGet, getSettingValueSettingsValueKeyGet, getTargetByEmailTargetsEmailEmailGet, getTargetsByCompanyTargetsCompanyCompanyGet, getTargetsTargetsGet, getTargetTargetsTargetIdGet, getTaskByIdJobsTasksTaskIdGet, getTemplateSpearTemplatesTemplateIdGet, getUserHierarchyMicrosoftGraphUsersUserIdHierarchyGet, getUserMicrosoftGraphUsersUserIdGet, hasSecretIntegrationsAccountsAccountIdHasSecretGet, healthCheckHealthGet, healthCheckMicrosoftGraphHealthGet, listAccountsIntegrationsAccountsGet, listAuditAuditGet, listEntityAuditAuditEntityTypeEntityIdGet, listGroupsMicrosoftGraphGroupsGet, listProvidersIntegrationsProvidersGet, listSettingsSettingsGet, listTasksJobsTasksGet, listTemplatesForScenarioSpearTemplatesScenarioScenarioIdGet, listTemplatesSpearTemplatesGet, listUsersMicrosoftGraphUsersGet, type Options, putSecretIntegrationsAccountsAccountIdSecretPost, requestJobJobRequestPost, resetMetricsMicrosoftGraphMetricsResetPost, rootGet, searchGroupsMicrosoftGraphGroupsSearchPost, searchTargetsByNameTargetsSearchNameGet, searchUsersMicrosoftGraphUsersSearchPost, setupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPost, testMicrosoftGraphConnectionMicrosoftGraphTestConnectionGet, unassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPost, updateOrgUnitOrgUnitsOrgUnitIdPut, updateScenarioScenariosScenarioIdPut, updateSettingByKeySettingsKeyKeyPut, updateSettingSettingsSettingIdPut, updateTargetTargetsTargetIdPut, updateTemplateSpearTemplatesTemplateIdPut, upsertAccountIntegrationsProviderKeyAccountsPost } from '../sdk.gen';
import type { AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostData, AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostError, BulkUpdateSettingsSettingsBulkUpdatePostData, BulkUpdateSettingsSettingsBulkUpdatePostError, CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetData, CreateIdentifierIdentifiersPostData, CreateIdentifierIdentifiersPostError, CreateIdentifierIdentifiersPostResponse, CreateObservationObservationsPostData, CreateObservationObservationsPostError, CreateObservationObservationsPostResponse, CreateOrgUnitOrgUnitsPostData, CreateOrgUnitOrgUnitsPostError, CreateOrgUnitOrgUnitsPostResponse, CreateScenarioScenariosPostData, CreateScenarioScenariosPostError, CreateScenarioScenariosPostResponse, CreateSettingSettingsPostData, CreateSettingSettingsPostError, CreateSettingSettingsPostResponse, CreateTargetTargetsPostData, CreateTargetTargetsPostError, CreateTargetTargetsPostResponse, CreateTemplateSpearTemplatesPostData, CreateTemplateSpearTemplatesPostError, CreateTemplateSpearTemplatesPostResponse, DeleteAccountIntegrationsAccountsAccountIdDeleteData, DeleteAccountIntegrationsAccountsAccountIdDeleteError, DeleteIdentifierIdentifiersIdentifierIdDeleteData, DeleteIdentifierIdentifiersIdentifierIdDeleteError, DeleteObservationObservationsObservationIdDeleteData, DeleteObservationObservationsObservationIdDeleteError, DeleteOrgUnitOrgUnitsOrgUnitIdDeleteData, DeleteOrgUnitOrgUnitsOrgUnitIdDeleteError, DeleteScenarioScenariosScenarioIdDeleteData, DeleteScenarioScenariosScenarioIdDeleteError, DeleteSettingByKeySettingsKeyKeyDeleteData, DeleteSettingByKeySettingsKeyKeyDeleteError, DeleteSettingSettingsSettingIdDeleteData, DeleteSettingSettingsSettingIdDeleteError, DeleteTargetTargetsTargetIdDeleteData, DeleteTargetTargetsTargetIdDeleteError, DeleteTemplateSpearTemplatesTemplateIdDeleteData, DeleteTemplateSpearTemplatesTemplateIdDeleteError, EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostData, EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostError, EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostResponse, EnqueueHunterioEmailTestEnqueueHunterioEmailPostData, EnqueueHunterioEmailTestEnqueueHunterioEmailPostError, EnqueueHunterioEmailTestEnqueueHunterioEmailPostResponse, GenerateTextLlmGeneratePostData, GenerateTextLlmGeneratePostError, GenerateTextLlmGeneratePostResponse, GetAccountIntegrationsAccountsAccountIdGetData, GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetData, GetAuditIntegrationsAccountsAccountIdAuditGetData, GetGroupMicrosoftGraphGroupsGroupIdGetData, GetIdentifiersByTargetIdentifiersTargetsTargetIdGetData, GetMetricsMicrosoftGraphMetricsGetData, GetMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetData, GetMicrosoftGraphStatisticsMicrosoftGraphStatisticsGetData, GetObservationsByTargetObservationsTargetsTargetIdGetData, GetOrganizationMicrosoftGraphOrganizationGetData, GetOrgUnitByIdOrgUnitsOrgUnitIdGetData, GetOrgUnitsOrgUnitsGetData, GetProviderIntegrationsProvidersProviderKeyGetData, GetScenarioByIdScenariosScenarioIdGetData, GetScenariosScenariosGetData, GetSecretIntegrationsAccountsAccountIdSecretGetData, GetSettingByKeySettingsKeyKeyGetData, GetSettingsByCategorySettingsCategoryCategoryGetData, GetSettingSettingsSettingIdGetData, GetSettingValueSettingsValueKeyGetData, GetTargetByEmailTargetsEmailEmailGetData, GetTargetsByCompanyTargetsCompanyCompanyGetData, GetTargetsTargetsGetData, GetTargetTargetsTargetIdGetData, GetTaskByIdJobsTasksTaskIdGetData, GetTemplateSpearTemplatesTemplateIdGetData, GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetData, GetUserMicrosoftGraphUsersUserIdGetData, HasSecretIntegrationsAccountsAccountIdHasSecretGetData, HealthCheckHealthGetData, HealthCheckMicrosoftGraphHealthGetData, ListAccountsIntegrationsAccountsGetData, ListAuditAuditGetData, ListAuditAuditGetError, ListEntityAuditAuditEntityTypeEntityIdGetData, ListGroupsMicrosoftGraphGroupsGetData, ListProvidersIntegrationsProvidersGetData, ListSettingsSettingsGetData, ListTasksJobsTasksGetData, ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetData, ListTemplatesSpearTemplatesGetData, ListUsersMicrosoftGraphUsersGetData, PutSecretIntegrationsAccountsAccountIdSecretPostData, PutSecretIntegrationsAccountsAccountIdSecretPostError, RequestJobJobRequestPostData, RequestJobJobRequestPostError, RequestJobJobRequestPostResponse, ResetMetricsMicrosoftGraphMetricsResetPostData, RootGetData, SearchGroupsMicrosoftGraphGroupsSearchPostData, SearchGroupsMicrosoftGraphGroupsSearchPostError, SearchGroupsMicrosoftGraphGroupsSearchPostResponse, SearchTargetsByNameTargetsSearchNameGetData, SearchUsersMicrosoftGraphUsersSearchPostData, SearchUsersMicrosoftGraphUsersSearchPostError, SearchUsersMicrosoftGraphUsersSearchPostResponse, SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostData, SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostError, TestMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetData, UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostData, UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostError, UpdateOrgUnitOrgUnitsOrgUnitIdPutData, UpdateOrgUnitOrgUnitsOrgUnitIdPutError, UpdateOrgUnitOrgUnitsOrgUnitIdPutResponse, UpdateScenarioScenariosScenarioIdPutData, UpdateScenarioScenariosScenarioIdPutError, UpdateScenarioScenariosScenarioIdPutResponse, UpdateSettingByKeySettingsKeyKeyPutData, UpdateSettingByKeySettingsKeyKeyPutError, UpdateSettingByKeySettingsKeyKeyPutResponse, UpdateSettingSettingsSettingIdPutData, UpdateSettingSettingsSettingIdPutError, UpdateSettingSettingsSettingIdPutResponse, UpdateTargetTargetsTargetIdPutData, UpdateTargetTargetsTargetIdPutError, UpdateTargetTargetsTargetIdPutResponse, UpdateTemplateSpearTemplatesTemplateIdPutData, UpdateTemplateSpearTemplatesTemplateIdPutError, UpdateTemplateSpearTemplatesTemplateIdPutResponse, UpsertAccountIntegrationsProviderKeyAccountsPostData, UpsertAccountIntegrationsProviderKeyAccountsPostError } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getTargetsTargetsGetQueryKey = (options?: Options<GetTargetsTargetsGetData>) => createQueryKey('getTargetsTargetsGet', options);

/**
 * Get Targets
 *
 * Get all targets with pagination.
 */
export const getTargetsTargetsGetOptions = (options?: Options<GetTargetsTargetsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTargetsTargetsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTargetsTargetsGetQueryKey(options)
    });
};

/**
 * Create Target
 *
 * Create a new target.
 */
export const createTargetTargetsPostMutation = (options?: Partial<Options<CreateTargetTargetsPostData>>): UseMutationOptions<CreateTargetTargetsPostResponse, AxiosError<CreateTargetTargetsPostError>, Options<CreateTargetTargetsPostData>> => {
    const mutationOptions: UseMutationOptions<CreateTargetTargetsPostResponse, AxiosError<CreateTargetTargetsPostError>, Options<CreateTargetTargetsPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createTargetTargetsPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Target
 *
 * Delete a target by ID.
 */
export const deleteTargetTargetsTargetIdDeleteMutation = (options?: Partial<Options<DeleteTargetTargetsTargetIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteTargetTargetsTargetIdDeleteError>, Options<DeleteTargetTargetsTargetIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteTargetTargetsTargetIdDeleteError>, Options<DeleteTargetTargetsTargetIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteTargetTargetsTargetIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTargetTargetsTargetIdGetQueryKey = (options: Options<GetTargetTargetsTargetIdGetData>) => createQueryKey('getTargetTargetsTargetIdGet', options);

/**
 * Get Target
 *
 * Get a specific target by ID.
 */
export const getTargetTargetsTargetIdGetOptions = (options: Options<GetTargetTargetsTargetIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTargetTargetsTargetIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTargetTargetsTargetIdGetQueryKey(options)
    });
};

/**
 * Update Target
 *
 * Update a target by ID.
 */
export const updateTargetTargetsTargetIdPutMutation = (options?: Partial<Options<UpdateTargetTargetsTargetIdPutData>>): UseMutationOptions<UpdateTargetTargetsTargetIdPutResponse, AxiosError<UpdateTargetTargetsTargetIdPutError>, Options<UpdateTargetTargetsTargetIdPutData>> => {
    const mutationOptions: UseMutationOptions<UpdateTargetTargetsTargetIdPutResponse, AxiosError<UpdateTargetTargetsTargetIdPutError>, Options<UpdateTargetTargetsTargetIdPutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateTargetTargetsTargetIdPut({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTargetByEmailTargetsEmailEmailGetQueryKey = (options: Options<GetTargetByEmailTargetsEmailEmailGetData>) => createQueryKey('getTargetByEmailTargetsEmailEmailGet', options);

/**
 * Get Target By Email
 *
 * Get a target by email address.
 */
export const getTargetByEmailTargetsEmailEmailGetOptions = (options: Options<GetTargetByEmailTargetsEmailEmailGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTargetByEmailTargetsEmailEmailGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTargetByEmailTargetsEmailEmailGetQueryKey(options)
    });
};

export const getTargetsByCompanyTargetsCompanyCompanyGetQueryKey = (options: Options<GetTargetsByCompanyTargetsCompanyCompanyGetData>) => createQueryKey('getTargetsByCompanyTargetsCompanyCompanyGet', options);

/**
 * Get Targets By Company
 *
 * Get targets by company.
 */
export const getTargetsByCompanyTargetsCompanyCompanyGetOptions = (options: Options<GetTargetsByCompanyTargetsCompanyCompanyGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTargetsByCompanyTargetsCompanyCompanyGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTargetsByCompanyTargetsCompanyCompanyGetQueryKey(options)
    });
};

export const searchTargetsByNameTargetsSearchNameGetQueryKey = (options: Options<SearchTargetsByNameTargetsSearchNameGetData>) => createQueryKey('searchTargetsByNameTargetsSearchNameGet', options);

/**
 * Search Targets By Name
 *
 * Search targets by name (partial match).
 */
export const searchTargetsByNameTargetsSearchNameGetOptions = (options: Options<SearchTargetsByNameTargetsSearchNameGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await searchTargetsByNameTargetsSearchNameGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: searchTargetsByNameTargetsSearchNameGetQueryKey(options)
    });
};

export const getScenariosScenariosGetQueryKey = (options?: Options<GetScenariosScenariosGetData>) => createQueryKey('getScenariosScenariosGet', options);

/**
 * Get Scenarios
 */
export const getScenariosScenariosGetOptions = (options?: Options<GetScenariosScenariosGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getScenariosScenariosGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getScenariosScenariosGetQueryKey(options)
    });
};

/**
 * Create Scenario
 */
export const createScenarioScenariosPostMutation = (options?: Partial<Options<CreateScenarioScenariosPostData>>): UseMutationOptions<CreateScenarioScenariosPostResponse, AxiosError<CreateScenarioScenariosPostError>, Options<CreateScenarioScenariosPostData>> => {
    const mutationOptions: UseMutationOptions<CreateScenarioScenariosPostResponse, AxiosError<CreateScenarioScenariosPostError>, Options<CreateScenarioScenariosPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createScenarioScenariosPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Scenario
 */
export const deleteScenarioScenariosScenarioIdDeleteMutation = (options?: Partial<Options<DeleteScenarioScenariosScenarioIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteScenarioScenariosScenarioIdDeleteError>, Options<DeleteScenarioScenariosScenarioIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteScenarioScenariosScenarioIdDeleteError>, Options<DeleteScenarioScenariosScenarioIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteScenarioScenariosScenarioIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getScenarioByIdScenariosScenarioIdGetQueryKey = (options: Options<GetScenarioByIdScenariosScenarioIdGetData>) => createQueryKey('getScenarioByIdScenariosScenarioIdGet', options);

/**
 * Get Scenario By Id
 */
export const getScenarioByIdScenariosScenarioIdGetOptions = (options: Options<GetScenarioByIdScenariosScenarioIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getScenarioByIdScenariosScenarioIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getScenarioByIdScenariosScenarioIdGetQueryKey(options)
    });
};

/**
 * Update Scenario
 */
export const updateScenarioScenariosScenarioIdPutMutation = (options?: Partial<Options<UpdateScenarioScenariosScenarioIdPutData>>): UseMutationOptions<UpdateScenarioScenariosScenarioIdPutResponse, AxiosError<UpdateScenarioScenariosScenarioIdPutError>, Options<UpdateScenarioScenariosScenarioIdPutData>> => {
    const mutationOptions: UseMutationOptions<UpdateScenarioScenariosScenarioIdPutResponse, AxiosError<UpdateScenarioScenariosScenarioIdPutError>, Options<UpdateScenarioScenariosScenarioIdPutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateScenarioScenariosScenarioIdPut({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listTemplatesSpearTemplatesGetQueryKey = (options?: Options<ListTemplatesSpearTemplatesGetData>) => createQueryKey('listTemplatesSpearTemplatesGet', options);

/**
 * List Templates
 */
export const listTemplatesSpearTemplatesGetOptions = (options?: Options<ListTemplatesSpearTemplatesGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTemplatesSpearTemplatesGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTemplatesSpearTemplatesGetQueryKey(options)
    });
};

/**
 * Create Template
 */
export const createTemplateSpearTemplatesPostMutation = (options?: Partial<Options<CreateTemplateSpearTemplatesPostData>>): UseMutationOptions<CreateTemplateSpearTemplatesPostResponse, AxiosError<CreateTemplateSpearTemplatesPostError>, Options<CreateTemplateSpearTemplatesPostData>> => {
    const mutationOptions: UseMutationOptions<CreateTemplateSpearTemplatesPostResponse, AxiosError<CreateTemplateSpearTemplatesPostError>, Options<CreateTemplateSpearTemplatesPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createTemplateSpearTemplatesPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetQueryKey = (options: Options<ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetData>) => createQueryKey('listTemplatesForScenarioSpearTemplatesScenarioScenarioIdGet', options);

/**
 * List Templates For Scenario
 */
export const listTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetOptions = (options: Options<ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTemplatesForScenarioSpearTemplatesScenarioScenarioIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetQueryKey(options)
    });
};

/**
 * Delete Template
 */
export const deleteTemplateSpearTemplatesTemplateIdDeleteMutation = (options?: Partial<Options<DeleteTemplateSpearTemplatesTemplateIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteTemplateSpearTemplatesTemplateIdDeleteError>, Options<DeleteTemplateSpearTemplatesTemplateIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteTemplateSpearTemplatesTemplateIdDeleteError>, Options<DeleteTemplateSpearTemplatesTemplateIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteTemplateSpearTemplatesTemplateIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTemplateSpearTemplatesTemplateIdGetQueryKey = (options: Options<GetTemplateSpearTemplatesTemplateIdGetData>) => createQueryKey('getTemplateSpearTemplatesTemplateIdGet', options);

/**
 * Get Template
 */
export const getTemplateSpearTemplatesTemplateIdGetOptions = (options: Options<GetTemplateSpearTemplatesTemplateIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTemplateSpearTemplatesTemplateIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTemplateSpearTemplatesTemplateIdGetQueryKey(options)
    });
};

/**
 * Update Template
 */
export const updateTemplateSpearTemplatesTemplateIdPutMutation = (options?: Partial<Options<UpdateTemplateSpearTemplatesTemplateIdPutData>>): UseMutationOptions<UpdateTemplateSpearTemplatesTemplateIdPutResponse, AxiosError<UpdateTemplateSpearTemplatesTemplateIdPutError>, Options<UpdateTemplateSpearTemplatesTemplateIdPutData>> => {
    const mutationOptions: UseMutationOptions<UpdateTemplateSpearTemplatesTemplateIdPutResponse, AxiosError<UpdateTemplateSpearTemplatesTemplateIdPutError>, Options<UpdateTemplateSpearTemplatesTemplateIdPutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateTemplateSpearTemplatesTemplateIdPut({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Request a job
 *
 * Create a job request and emit an event to the 'job' Kafka topic.
 *
 * Returns a server-generated `job_id` immediately and publishes a
 * `job.requested` event with the job metadata.
 */
export const requestJobJobRequestPostMutation = (options?: Partial<Options<RequestJobJobRequestPostData>>): UseMutationOptions<RequestJobJobRequestPostResponse, AxiosError<RequestJobJobRequestPostError>, Options<RequestJobJobRequestPostData>> => {
    const mutationOptions: UseMutationOptions<RequestJobJobRequestPostResponse, AxiosError<RequestJobJobRequestPostError>, Options<RequestJobJobRequestPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await requestJobJobRequestPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Enqueue Hunterio Email
 *
 * Trigger a HunterIO email enrichment task.
 */
export const enqueueHunterioEmailTestEnqueueHunterioEmailPostMutation = (options?: Partial<Options<EnqueueHunterioEmailTestEnqueueHunterioEmailPostData>>): UseMutationOptions<EnqueueHunterioEmailTestEnqueueHunterioEmailPostResponse, AxiosError<EnqueueHunterioEmailTestEnqueueHunterioEmailPostError>, Options<EnqueueHunterioEmailTestEnqueueHunterioEmailPostData>> => {
    const mutationOptions: UseMutationOptions<EnqueueHunterioEmailTestEnqueueHunterioEmailPostResponse, AxiosError<EnqueueHunterioEmailTestEnqueueHunterioEmailPostError>, Options<EnqueueHunterioEmailTestEnqueueHunterioEmailPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await enqueueHunterioEmailTestEnqueueHunterioEmailPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Enqueue Hunterio Email Finder
 *
 * Trigger a HunterIO email finder task.
 */
export const enqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostMutation = (options?: Partial<Options<EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostData>>): UseMutationOptions<EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostResponse, AxiosError<EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostError>, Options<EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostData>> => {
    const mutationOptions: UseMutationOptions<EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostResponse, AxiosError<EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostError>, Options<EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await enqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listTasksJobsTasksGetQueryKey = (options?: Options<ListTasksJobsTasksGetData>) => createQueryKey('listTasksJobsTasksGet', options);

/**
 * List Tasks
 *
 * List Celery tasks with optional filtering.
 *
 * Returns tasks with decoded args, kwargs, and results for job visibility.
 */
export const listTasksJobsTasksGetOptions = (options?: Options<ListTasksJobsTasksGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listTasksJobsTasksGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listTasksJobsTasksGetQueryKey(options)
    });
};

export const getTaskByIdJobsTasksTaskIdGetQueryKey = (options: Options<GetTaskByIdJobsTasksTaskIdGetData>) => createQueryKey('getTaskByIdJobsTasksTaskIdGet', options);

/**
 * Get Task By Id
 *
 * Get a specific Celery task by its task_id.
 *
 * Returns task details with decoded args, kwargs, and result.
 */
export const getTaskByIdJobsTasksTaskIdGetOptions = (options: Options<GetTaskByIdJobsTasksTaskIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTaskByIdJobsTasksTaskIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTaskByIdJobsTasksTaskIdGetQueryKey(options)
    });
};

export const getIdentifiersByTargetIdentifiersTargetsTargetIdGetQueryKey = (options: Options<GetIdentifiersByTargetIdentifiersTargetsTargetIdGetData>) => createQueryKey('getIdentifiersByTargetIdentifiersTargetsTargetIdGet', options);

/**
 * Get Identifiers By Target
 */
export const getIdentifiersByTargetIdentifiersTargetsTargetIdGetOptions = (options: Options<GetIdentifiersByTargetIdentifiersTargetsTargetIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getIdentifiersByTargetIdentifiersTargetsTargetIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getIdentifiersByTargetIdentifiersTargetsTargetIdGetQueryKey(options)
    });
};

/**
 * Create Identifier
 */
export const createIdentifierIdentifiersPostMutation = (options?: Partial<Options<CreateIdentifierIdentifiersPostData>>): UseMutationOptions<CreateIdentifierIdentifiersPostResponse, AxiosError<CreateIdentifierIdentifiersPostError>, Options<CreateIdentifierIdentifiersPostData>> => {
    const mutationOptions: UseMutationOptions<CreateIdentifierIdentifiersPostResponse, AxiosError<CreateIdentifierIdentifiersPostError>, Options<CreateIdentifierIdentifiersPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createIdentifierIdentifiersPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Identifier
 */
export const deleteIdentifierIdentifiersIdentifierIdDeleteMutation = (options?: Partial<Options<DeleteIdentifierIdentifiersIdentifierIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteIdentifierIdentifiersIdentifierIdDeleteError>, Options<DeleteIdentifierIdentifiersIdentifierIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteIdentifierIdentifiersIdentifierIdDeleteError>, Options<DeleteIdentifierIdentifiersIdentifierIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteIdentifierIdentifiersIdentifierIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getObservationsByTargetObservationsTargetsTargetIdGetQueryKey = (options: Options<GetObservationsByTargetObservationsTargetsTargetIdGetData>) => createQueryKey('getObservationsByTargetObservationsTargetsTargetIdGet', options);

/**
 * Get Observations By Target
 */
export const getObservationsByTargetObservationsTargetsTargetIdGetOptions = (options: Options<GetObservationsByTargetObservationsTargetsTargetIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getObservationsByTargetObservationsTargetsTargetIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getObservationsByTargetObservationsTargetsTargetIdGetQueryKey(options)
    });
};

/**
 * Create Observation
 */
export const createObservationObservationsPostMutation = (options?: Partial<Options<CreateObservationObservationsPostData>>): UseMutationOptions<CreateObservationObservationsPostResponse, AxiosError<CreateObservationObservationsPostError>, Options<CreateObservationObservationsPostData>> => {
    const mutationOptions: UseMutationOptions<CreateObservationObservationsPostResponse, AxiosError<CreateObservationObservationsPostError>, Options<CreateObservationObservationsPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createObservationObservationsPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Observation
 */
export const deleteObservationObservationsObservationIdDeleteMutation = (options?: Partial<Options<DeleteObservationObservationsObservationIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteObservationObservationsObservationIdDeleteError>, Options<DeleteObservationObservationsObservationIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteObservationObservationsObservationIdDeleteError>, Options<DeleteObservationObservationsObservationIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteObservationObservationsObservationIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Generate Text
 */
export const generateTextLlmGeneratePostMutation = (options?: Partial<Options<GenerateTextLlmGeneratePostData>>): UseMutationOptions<GenerateTextLlmGeneratePostResponse, AxiosError<GenerateTextLlmGeneratePostError>, Options<GenerateTextLlmGeneratePostData>> => {
    const mutationOptions: UseMutationOptions<GenerateTextLlmGeneratePostResponse, AxiosError<GenerateTextLlmGeneratePostError>, Options<GenerateTextLlmGeneratePostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await generateTextLlmGeneratePost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrgUnitsOrgUnitsGetQueryKey = (options?: Options<GetOrgUnitsOrgUnitsGetData>) => createQueryKey('getOrgUnitsOrgUnitsGet', options);

/**
 * Get Org Units
 */
export const getOrgUnitsOrgUnitsGetOptions = (options?: Options<GetOrgUnitsOrgUnitsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrgUnitsOrgUnitsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrgUnitsOrgUnitsGetQueryKey(options)
    });
};

/**
 * Create Org Unit
 */
export const createOrgUnitOrgUnitsPostMutation = (options?: Partial<Options<CreateOrgUnitOrgUnitsPostData>>): UseMutationOptions<CreateOrgUnitOrgUnitsPostResponse, AxiosError<CreateOrgUnitOrgUnitsPostError>, Options<CreateOrgUnitOrgUnitsPostData>> => {
    const mutationOptions: UseMutationOptions<CreateOrgUnitOrgUnitsPostResponse, AxiosError<CreateOrgUnitOrgUnitsPostError>, Options<CreateOrgUnitOrgUnitsPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createOrgUnitOrgUnitsPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Org Unit
 */
export const deleteOrgUnitOrgUnitsOrgUnitIdDeleteMutation = (options?: Partial<Options<DeleteOrgUnitOrgUnitsOrgUnitIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteOrgUnitOrgUnitsOrgUnitIdDeleteError>, Options<DeleteOrgUnitOrgUnitsOrgUnitIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteOrgUnitOrgUnitsOrgUnitIdDeleteError>, Options<DeleteOrgUnitOrgUnitsOrgUnitIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteOrgUnitOrgUnitsOrgUnitIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrgUnitByIdOrgUnitsOrgUnitIdGetQueryKey = (options: Options<GetOrgUnitByIdOrgUnitsOrgUnitIdGetData>) => createQueryKey('getOrgUnitByIdOrgUnitsOrgUnitIdGet', options);

/**
 * Get Org Unit By Id
 */
export const getOrgUnitByIdOrgUnitsOrgUnitIdGetOptions = (options: Options<GetOrgUnitByIdOrgUnitsOrgUnitIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrgUnitByIdOrgUnitsOrgUnitIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrgUnitByIdOrgUnitsOrgUnitIdGetQueryKey(options)
    });
};

/**
 * Update Org Unit
 */
export const updateOrgUnitOrgUnitsOrgUnitIdPutMutation = (options?: Partial<Options<UpdateOrgUnitOrgUnitsOrgUnitIdPutData>>): UseMutationOptions<UpdateOrgUnitOrgUnitsOrgUnitIdPutResponse, AxiosError<UpdateOrgUnitOrgUnitsOrgUnitIdPutError>, Options<UpdateOrgUnitOrgUnitsOrgUnitIdPutData>> => {
    const mutationOptions: UseMutationOptions<UpdateOrgUnitOrgUnitsOrgUnitIdPutResponse, AxiosError<UpdateOrgUnitOrgUnitsOrgUnitIdPutError>, Options<UpdateOrgUnitOrgUnitsOrgUnitIdPutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateOrgUnitOrgUnitsOrgUnitIdPut({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Assign Target To Org Unit
 */
export const assignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostMutation = (options?: Partial<Options<AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostData>>): UseMutationOptions<unknown, AxiosError<AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostError>, Options<AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostError>, Options<AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await assignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Unassign Target From Org Unit
 */
export const unassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostMutation = (options?: Partial<Options<UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostData>>): UseMutationOptions<unknown, AxiosError<UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostError>, Options<UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostError>, Options<UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await unassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listSettingsSettingsGetQueryKey = (options?: Options<ListSettingsSettingsGetData>) => createQueryKey('listSettingsSettingsGet', options);

/**
 * List Settings
 *
 * Get all settings with pagination and optional filtering.
 */
export const listSettingsSettingsGetOptions = (options?: Options<ListSettingsSettingsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSettingsSettingsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSettingsSettingsGetQueryKey(options)
    });
};

/**
 * Create Setting
 *
 * Create a new setting.
 */
export const createSettingSettingsPostMutation = (options?: Partial<Options<CreateSettingSettingsPostData>>): UseMutationOptions<CreateSettingSettingsPostResponse, AxiosError<CreateSettingSettingsPostError>, Options<CreateSettingSettingsPostData>> => {
    const mutationOptions: UseMutationOptions<CreateSettingSettingsPostResponse, AxiosError<CreateSettingSettingsPostError>, Options<CreateSettingSettingsPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await createSettingSettingsPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Setting
 *
 * Delete a setting by ID.
 */
export const deleteSettingSettingsSettingIdDeleteMutation = (options?: Partial<Options<DeleteSettingSettingsSettingIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteSettingSettingsSettingIdDeleteError>, Options<DeleteSettingSettingsSettingIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteSettingSettingsSettingIdDeleteError>, Options<DeleteSettingSettingsSettingIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteSettingSettingsSettingIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSettingSettingsSettingIdGetQueryKey = (options: Options<GetSettingSettingsSettingIdGetData>) => createQueryKey('getSettingSettingsSettingIdGet', options);

/**
 * Get Setting
 *
 * Get a specific setting by ID.
 */
export const getSettingSettingsSettingIdGetOptions = (options: Options<GetSettingSettingsSettingIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSettingSettingsSettingIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSettingSettingsSettingIdGetQueryKey(options)
    });
};

/**
 * Update Setting
 *
 * Update a setting by ID.
 */
export const updateSettingSettingsSettingIdPutMutation = (options?: Partial<Options<UpdateSettingSettingsSettingIdPutData>>): UseMutationOptions<UpdateSettingSettingsSettingIdPutResponse, AxiosError<UpdateSettingSettingsSettingIdPutError>, Options<UpdateSettingSettingsSettingIdPutData>> => {
    const mutationOptions: UseMutationOptions<UpdateSettingSettingsSettingIdPutResponse, AxiosError<UpdateSettingSettingsSettingIdPutError>, Options<UpdateSettingSettingsSettingIdPutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateSettingSettingsSettingIdPut({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Delete Setting By Key
 *
 * Delete a setting by key.
 */
export const deleteSettingByKeySettingsKeyKeyDeleteMutation = (options?: Partial<Options<DeleteSettingByKeySettingsKeyKeyDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteSettingByKeySettingsKeyKeyDeleteError>, Options<DeleteSettingByKeySettingsKeyKeyDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteSettingByKeySettingsKeyKeyDeleteError>, Options<DeleteSettingByKeySettingsKeyKeyDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteSettingByKeySettingsKeyKeyDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSettingByKeySettingsKeyKeyGetQueryKey = (options: Options<GetSettingByKeySettingsKeyKeyGetData>) => createQueryKey('getSettingByKeySettingsKeyKeyGet', options);

/**
 * Get Setting By Key
 *
 * Get a specific setting by key identifier.
 */
export const getSettingByKeySettingsKeyKeyGetOptions = (options: Options<GetSettingByKeySettingsKeyKeyGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSettingByKeySettingsKeyKeyGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSettingByKeySettingsKeyKeyGetQueryKey(options)
    });
};

/**
 * Update Setting By Key
 *
 * Update a setting by key.
 */
export const updateSettingByKeySettingsKeyKeyPutMutation = (options?: Partial<Options<UpdateSettingByKeySettingsKeyKeyPutData>>): UseMutationOptions<UpdateSettingByKeySettingsKeyKeyPutResponse, AxiosError<UpdateSettingByKeySettingsKeyKeyPutError>, Options<UpdateSettingByKeySettingsKeyKeyPutData>> => {
    const mutationOptions: UseMutationOptions<UpdateSettingByKeySettingsKeyKeyPutResponse, AxiosError<UpdateSettingByKeySettingsKeyKeyPutError>, Options<UpdateSettingByKeySettingsKeyKeyPutData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await updateSettingByKeySettingsKeyKeyPut({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSettingsByCategorySettingsCategoryCategoryGetQueryKey = (options: Options<GetSettingsByCategorySettingsCategoryCategoryGetData>) => createQueryKey('getSettingsByCategorySettingsCategoryCategoryGet', options);

/**
 * Get Settings By Category
 *
 * Get settings by category.
 */
export const getSettingsByCategorySettingsCategoryCategoryGetOptions = (options: Options<GetSettingsByCategorySettingsCategoryCategoryGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSettingsByCategorySettingsCategoryCategoryGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSettingsByCategorySettingsCategoryCategoryGetQueryKey(options)
    });
};

/**
 * Bulk Update Settings
 *
 * Bulk update multiple settings.
 */
export const bulkUpdateSettingsSettingsBulkUpdatePostMutation = (options?: Partial<Options<BulkUpdateSettingsSettingsBulkUpdatePostData>>): UseMutationOptions<unknown, AxiosError<BulkUpdateSettingsSettingsBulkUpdatePostError>, Options<BulkUpdateSettingsSettingsBulkUpdatePostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<BulkUpdateSettingsSettingsBulkUpdatePostError>, Options<BulkUpdateSettingsSettingsBulkUpdatePostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await bulkUpdateSettingsSettingsBulkUpdatePost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetQueryKey = (options?: Options<GetMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetData>) => createQueryKey('getMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGet', options);

/**
 * Get Microsoft Graph Credentials
 *
 * Get Microsoft Graph credentials.
 */
export const getMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetOptions = (options?: Options<GetMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetQueryKey(options)
    });
};

/**
 * Setup Microsoft Graph
 *
 * Setup Microsoft Graph integration.
 */
export const setupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostMutation = (options?: Partial<Options<SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostData>>): UseMutationOptions<unknown, AxiosError<SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostError>, Options<SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostError>, Options<SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await setupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSettingValueSettingsValueKeyGetQueryKey = (options: Options<GetSettingValueSettingsValueKeyGetData>) => createQueryKey('getSettingValueSettingsValueKeyGet', options);

/**
 * Get Setting Value
 *
 * Get a setting value by key (for internal use).
 */
export const getSettingValueSettingsValueKeyGetOptions = (options: Options<GetSettingValueSettingsValueKeyGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSettingValueSettingsValueKeyGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSettingValueSettingsValueKeyGetQueryKey(options)
    });
};

export const testMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetQueryKey = (options?: Options<TestMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetData>) => createQueryKey('testMicrosoftGraphConnectionMicrosoftGraphTestConnectionGet', options);

/**
 * Test Microsoft Graph Connection
 *
 * Test Microsoft Graph connection and permissions.
 */
export const testMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetOptions = (options?: Options<TestMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await testMicrosoftGraphConnectionMicrosoftGraphTestConnectionGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: testMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetQueryKey(options)
    });
};

export const getMicrosoftGraphStatisticsMicrosoftGraphStatisticsGetQueryKey = (options?: Options<GetMicrosoftGraphStatisticsMicrosoftGraphStatisticsGetData>) => createQueryKey('getMicrosoftGraphStatisticsMicrosoftGraphStatisticsGet', options);

/**
 * Get Microsoft Graph Statistics
 *
 * Get Microsoft Graph statistics and overview.
 */
export const getMicrosoftGraphStatisticsMicrosoftGraphStatisticsGetOptions = (options?: Options<GetMicrosoftGraphStatisticsMicrosoftGraphStatisticsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMicrosoftGraphStatisticsMicrosoftGraphStatisticsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMicrosoftGraphStatisticsMicrosoftGraphStatisticsGetQueryKey(options)
    });
};

export const listUsersMicrosoftGraphUsersGetQueryKey = (options?: Options<ListUsersMicrosoftGraphUsersGetData>) => createQueryKey('listUsersMicrosoftGraphUsersGet', options);

/**
 * List Users
 *
 * List users from Microsoft Graph with pagination and search.
 */
export const listUsersMicrosoftGraphUsersGetOptions = (options?: Options<ListUsersMicrosoftGraphUsersGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listUsersMicrosoftGraphUsersGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listUsersMicrosoftGraphUsersGetQueryKey(options)
    });
};

export const getUserMicrosoftGraphUsersUserIdGetQueryKey = (options: Options<GetUserMicrosoftGraphUsersUserIdGetData>) => createQueryKey('getUserMicrosoftGraphUsersUserIdGet', options);

/**
 * Get User
 *
 * Get detailed user information by ID or userPrincipalName.
 */
export const getUserMicrosoftGraphUsersUserIdGetOptions = (options: Options<GetUserMicrosoftGraphUsersUserIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserMicrosoftGraphUsersUserIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserMicrosoftGraphUsersUserIdGetQueryKey(options)
    });
};

export const getUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetQueryKey = (options: Options<GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetData>) => createQueryKey('getUserHierarchyMicrosoftGraphUsersUserIdHierarchyGet', options);

/**
 * Get User Hierarchy
 *
 * Get user's organizational hierarchy.
 */
export const getUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetOptions = (options: Options<GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getUserHierarchyMicrosoftGraphUsersUserIdHierarchyGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetQueryKey(options)
    });
};

/**
 * Search Users
 *
 * Advanced user search with filters.
 */
export const searchUsersMicrosoftGraphUsersSearchPostMutation = (options?: Partial<Options<SearchUsersMicrosoftGraphUsersSearchPostData>>): UseMutationOptions<SearchUsersMicrosoftGraphUsersSearchPostResponse, AxiosError<SearchUsersMicrosoftGraphUsersSearchPostError>, Options<SearchUsersMicrosoftGraphUsersSearchPostData>> => {
    const mutationOptions: UseMutationOptions<SearchUsersMicrosoftGraphUsersSearchPostResponse, AxiosError<SearchUsersMicrosoftGraphUsersSearchPostError>, Options<SearchUsersMicrosoftGraphUsersSearchPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await searchUsersMicrosoftGraphUsersSearchPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listGroupsMicrosoftGraphGroupsGetQueryKey = (options?: Options<ListGroupsMicrosoftGraphGroupsGetData>) => createQueryKey('listGroupsMicrosoftGraphGroupsGet', options);

/**
 * List Groups
 *
 * List groups from Microsoft Graph with pagination and search.
 */
export const listGroupsMicrosoftGraphGroupsGetOptions = (options?: Options<ListGroupsMicrosoftGraphGroupsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listGroupsMicrosoftGraphGroupsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listGroupsMicrosoftGraphGroupsGetQueryKey(options)
    });
};

export const getGroupMicrosoftGraphGroupsGroupIdGetQueryKey = (options: Options<GetGroupMicrosoftGraphGroupsGroupIdGetData>) => createQueryKey('getGroupMicrosoftGraphGroupsGroupIdGet', options);

/**
 * Get Group
 *
 * Get detailed group information by ID.
 */
export const getGroupMicrosoftGraphGroupsGroupIdGetOptions = (options: Options<GetGroupMicrosoftGraphGroupsGroupIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getGroupMicrosoftGraphGroupsGroupIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getGroupMicrosoftGraphGroupsGroupIdGetQueryKey(options)
    });
};

/**
 * Search Groups
 *
 * Advanced group search with filters.
 */
export const searchGroupsMicrosoftGraphGroupsSearchPostMutation = (options?: Partial<Options<SearchGroupsMicrosoftGraphGroupsSearchPostData>>): UseMutationOptions<SearchGroupsMicrosoftGraphGroupsSearchPostResponse, AxiosError<SearchGroupsMicrosoftGraphGroupsSearchPostError>, Options<SearchGroupsMicrosoftGraphGroupsSearchPostData>> => {
    const mutationOptions: UseMutationOptions<SearchGroupsMicrosoftGraphGroupsSearchPostResponse, AxiosError<SearchGroupsMicrosoftGraphGroupsSearchPostError>, Options<SearchGroupsMicrosoftGraphGroupsSearchPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await searchGroupsMicrosoftGraphGroupsSearchPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getOrganizationMicrosoftGraphOrganizationGetQueryKey = (options?: Options<GetOrganizationMicrosoftGraphOrganizationGetData>) => createQueryKey('getOrganizationMicrosoftGraphOrganizationGet', options);

/**
 * Get Organization
 *
 * Get organization information and domains.
 */
export const getOrganizationMicrosoftGraphOrganizationGetOptions = (options?: Options<GetOrganizationMicrosoftGraphOrganizationGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getOrganizationMicrosoftGraphOrganizationGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getOrganizationMicrosoftGraphOrganizationGetQueryKey(options)
    });
};

export const getMetricsMicrosoftGraphMetricsGetQueryKey = (options?: Options<GetMetricsMicrosoftGraphMetricsGetData>) => createQueryKey('getMetricsMicrosoftGraphMetricsGet', options);

/**
 * Get Metrics
 *
 * Get Microsoft Graph API usage metrics.
 */
export const getMetricsMicrosoftGraphMetricsGetOptions = (options?: Options<GetMetricsMicrosoftGraphMetricsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getMetricsMicrosoftGraphMetricsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getMetricsMicrosoftGraphMetricsGetQueryKey(options)
    });
};

/**
 * Reset Metrics
 *
 * Reset Microsoft Graph API usage metrics.
 */
export const resetMetricsMicrosoftGraphMetricsResetPostMutation = (options?: Partial<Options<ResetMetricsMicrosoftGraphMetricsResetPostData>>): UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ResetMetricsMicrosoftGraphMetricsResetPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DefaultError>, Options<ResetMetricsMicrosoftGraphMetricsResetPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await resetMetricsMicrosoftGraphMetricsResetPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const healthCheckMicrosoftGraphHealthGetQueryKey = (options?: Options<HealthCheckMicrosoftGraphHealthGetData>) => createQueryKey('healthCheckMicrosoftGraphHealthGet', options);

/**
 * Health Check
 *
 * Health check endpoint for Microsoft Graph router.
 */
export const healthCheckMicrosoftGraphHealthGetOptions = (options?: Options<HealthCheckMicrosoftGraphHealthGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthCheckMicrosoftGraphHealthGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthCheckMicrosoftGraphHealthGetQueryKey(options)
    });
};

export const listProvidersIntegrationsProvidersGetQueryKey = (options?: Options<ListProvidersIntegrationsProvidersGetData>) => createQueryKey('listProvidersIntegrationsProvidersGet', options);

/**
 * List Providers
 *
 * List all available integration providers.
 */
export const listProvidersIntegrationsProvidersGetOptions = (options?: Options<ListProvidersIntegrationsProvidersGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listProvidersIntegrationsProvidersGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listProvidersIntegrationsProvidersGetQueryKey(options)
    });
};

export const getProviderIntegrationsProvidersProviderKeyGetQueryKey = (options: Options<GetProviderIntegrationsProvidersProviderKeyGetData>) => createQueryKey('getProviderIntegrationsProvidersProviderKeyGet', options);

/**
 * Get Provider
 *
 * Get a specific integration provider.
 */
export const getProviderIntegrationsProvidersProviderKeyGetOptions = (options: Options<GetProviderIntegrationsProvidersProviderKeyGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getProviderIntegrationsProvidersProviderKeyGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getProviderIntegrationsProvidersProviderKeyGetQueryKey(options)
    });
};

export const listAccountsIntegrationsAccountsGetQueryKey = (options?: Options<ListAccountsIntegrationsAccountsGetData>) => createQueryKey('listAccountsIntegrationsAccountsGet', options);

/**
 * List Accounts
 *
 * List all integration accounts.
 */
export const listAccountsIntegrationsAccountsGetOptions = (options?: Options<ListAccountsIntegrationsAccountsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listAccountsIntegrationsAccountsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAccountsIntegrationsAccountsGetQueryKey(options)
    });
};

export const getAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetQueryKey = (options: Options<GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetData>) => createQueryKey('getAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGet', options);

/**
 * Get Accounts By Provider Key
 *
 * Get all integration accounts by provider key.
 */
export const getAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetOptions = (options: Options<GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetQueryKey(options)
    });
};

/**
 * Delete Account
 *
 * Delete an integration account and all its secrets.
 */
export const deleteAccountIntegrationsAccountsAccountIdDeleteMutation = (options?: Partial<Options<DeleteAccountIntegrationsAccountsAccountIdDeleteData>>): UseMutationOptions<unknown, AxiosError<DeleteAccountIntegrationsAccountsAccountIdDeleteError>, Options<DeleteAccountIntegrationsAccountsAccountIdDeleteData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<DeleteAccountIntegrationsAccountsAccountIdDeleteError>, Options<DeleteAccountIntegrationsAccountsAccountIdDeleteData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteAccountIntegrationsAccountsAccountIdDelete({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAccountIntegrationsAccountsAccountIdGetQueryKey = (options: Options<GetAccountIntegrationsAccountsAccountIdGetData>) => createQueryKey('getAccountIntegrationsAccountsAccountIdGet', options);

/**
 * Get Account
 *
 * Get a specific integration account.
 */
export const getAccountIntegrationsAccountsAccountIdGetOptions = (options: Options<GetAccountIntegrationsAccountsAccountIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAccountIntegrationsAccountsAccountIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAccountIntegrationsAccountsAccountIdGetQueryKey(options)
    });
};

/**
 * Upsert Account
 *
 * Create or update an integration account.
 */
export const upsertAccountIntegrationsProviderKeyAccountsPostMutation = (options?: Partial<Options<UpsertAccountIntegrationsProviderKeyAccountsPostData>>): UseMutationOptions<unknown, AxiosError<UpsertAccountIntegrationsProviderKeyAccountsPostError>, Options<UpsertAccountIntegrationsProviderKeyAccountsPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<UpsertAccountIntegrationsProviderKeyAccountsPostError>, Options<UpsertAccountIntegrationsProviderKeyAccountsPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await upsertAccountIntegrationsProviderKeyAccountsPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getSecretIntegrationsAccountsAccountIdSecretGetQueryKey = (options: Options<GetSecretIntegrationsAccountsAccountIdSecretGetData>) => createQueryKey('getSecretIntegrationsAccountsAccountIdSecretGet', options);

/**
 * Get Secret
 *
 * Get the active secret for an integration account (should be restricted in production).
 */
export const getSecretIntegrationsAccountsAccountIdSecretGetOptions = (options: Options<GetSecretIntegrationsAccountsAccountIdSecretGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getSecretIntegrationsAccountsAccountIdSecretGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getSecretIntegrationsAccountsAccountIdSecretGetQueryKey(options)
    });
};

/**
 * Put Secret
 *
 * Store or update a secret for an integration account.
 */
export const putSecretIntegrationsAccountsAccountIdSecretPostMutation = (options?: Partial<Options<PutSecretIntegrationsAccountsAccountIdSecretPostData>>): UseMutationOptions<unknown, AxiosError<PutSecretIntegrationsAccountsAccountIdSecretPostError>, Options<PutSecretIntegrationsAccountsAccountIdSecretPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<PutSecretIntegrationsAccountsAccountIdSecretPostError>, Options<PutSecretIntegrationsAccountsAccountIdSecretPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await putSecretIntegrationsAccountsAccountIdSecretPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const hasSecretIntegrationsAccountsAccountIdHasSecretGetQueryKey = (options: Options<HasSecretIntegrationsAccountsAccountIdHasSecretGetData>) => createQueryKey('hasSecretIntegrationsAccountsAccountIdHasSecretGet', options);

/**
 * Has Secret
 *
 * Check if an account has an active secret (without exposing the secret).
 */
export const hasSecretIntegrationsAccountsAccountIdHasSecretGetOptions = (options: Options<HasSecretIntegrationsAccountsAccountIdHasSecretGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await hasSecretIntegrationsAccountsAccountIdHasSecretGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: hasSecretIntegrationsAccountsAccountIdHasSecretGetQueryKey(options)
    });
};

export const getAuditIntegrationsAccountsAccountIdAuditGetQueryKey = (options: Options<GetAuditIntegrationsAccountsAccountIdAuditGetData>) => createQueryKey('getAuditIntegrationsAccountsAccountIdAuditGet', options);

/**
 * Get Audit
 *
 * Get the audit history for an integration account.
 */
export const getAuditIntegrationsAccountsAccountIdAuditGetOptions = (options: Options<GetAuditIntegrationsAccountsAccountIdAuditGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAuditIntegrationsAccountsAccountIdAuditGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAuditIntegrationsAccountsAccountIdAuditGetQueryKey(options)
    });
};

export const checkIntegrityIntegrationsAccountsAccountIdIntegrityGetQueryKey = (options: Options<CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetData>) => createQueryKey('checkIntegrityIntegrationsAccountsAccountIdIntegrityGet', options);

/**
 * Check Integrity
 *
 * Check the integrity of all secret versions for an account (debugging endpoint).
 */
export const checkIntegrityIntegrationsAccountsAccountIdIntegrityGetOptions = (options: Options<CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await checkIntegrityIntegrationsAccountsAccountIdIntegrityGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: checkIntegrityIntegrationsAccountsAccountIdIntegrityGetQueryKey(options)
    });
};

export const listAuditAuditGetQueryKey = (options?: Options<ListAuditAuditGetData>) => createQueryKey('listAuditAuditGet', options);

/**
 * List Audit
 */
export const listAuditAuditGetOptions = (options?: Options<ListAuditAuditGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listAuditAuditGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAuditAuditGetQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const listAuditAuditGetInfiniteQueryKey = (options?: Options<ListAuditAuditGetData>): QueryKey<Options<ListAuditAuditGetData>> => createQueryKey('listAuditAuditGet', options, true);

/**
 * List Audit
 */
export const listAuditAuditGetInfiniteOptions = (options?: Options<ListAuditAuditGetData>) => {
    return infiniteQueryOptions<unknown, AxiosError<ListAuditAuditGetError>, InfiniteData<unknown>, QueryKey<Options<ListAuditAuditGetData>>, Date | null | Pick<QueryKey<Options<ListAuditAuditGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListAuditAuditGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    before: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listAuditAuditGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listAuditAuditGetInfiniteQueryKey(options)
    });
};

export const listEntityAuditAuditEntityTypeEntityIdGetQueryKey = (options: Options<ListEntityAuditAuditEntityTypeEntityIdGetData>) => createQueryKey('listEntityAuditAuditEntityTypeEntityIdGet', options);

/**
 * List Entity Audit
 */
export const listEntityAuditAuditEntityTypeEntityIdGetOptions = (options: Options<ListEntityAuditAuditEntityTypeEntityIdGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listEntityAuditAuditEntityTypeEntityIdGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listEntityAuditAuditEntityTypeEntityIdGetQueryKey(options)
    });
};

export const rootGetQueryKey = (options?: Options<RootGetData>) => createQueryKey('rootGet', options);

/**
 * Root
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rootGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootGetQueryKey(options)
    });
};

export const healthCheckHealthGetQueryKey = (options?: Options<HealthCheckHealthGetData>) => createQueryKey('healthCheckHealthGet', options);

/**
 * Health Check
 */
export const healthCheckHealthGetOptions = (options?: Options<HealthCheckHealthGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthCheckHealthGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthCheckHealthGetQueryKey(options)
    });
};
