// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { AxiosError } from 'axios';

import { client } from '../client.gen';
import { adminEndpointAdminGet, loginForAccessTokenAuthTokenPost, type Options, protectedEndpointProtectedGet, readUsersMeAuthMeGet, refreshAccessTokenAuthRefreshPost, registerUserAuthRegisterPost, rootGet, verifyEmailAuthVerifyEmailGet } from '../sdk.gen';
import type { AdminEndpointAdminGetData, LoginForAccessTokenAuthTokenPostData, LoginForAccessTokenAuthTokenPostError, LoginForAccessTokenAuthTokenPostResponse, ProtectedEndpointProtectedGetData, ReadUsersMeAuthMeGetData, RefreshAccessTokenAuthRefreshPostData, RefreshAccessTokenAuthRefreshPostError, RefreshAccessTokenAuthRefreshPostResponse, RegisterUserAuthRegisterPostData, RegisterUserAuthRegisterPostError, RootGetData, VerifyEmailAuthVerifyEmailGetData } from '../types.gen';

/**
 * Register User
 */
export const registerUserAuthRegisterPostMutation = (options?: Partial<Options<RegisterUserAuthRegisterPostData>>): UseMutationOptions<unknown, AxiosError<RegisterUserAuthRegisterPostError>, Options<RegisterUserAuthRegisterPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<RegisterUserAuthRegisterPostError>, Options<RegisterUserAuthRegisterPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await registerUserAuthRegisterPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Login For Access Token
 */
export const loginForAccessTokenAuthTokenPostMutation = (options?: Partial<Options<LoginForAccessTokenAuthTokenPostData>>): UseMutationOptions<LoginForAccessTokenAuthTokenPostResponse, AxiosError<LoginForAccessTokenAuthTokenPostError>, Options<LoginForAccessTokenAuthTokenPostData>> => {
    const mutationOptions: UseMutationOptions<LoginForAccessTokenAuthTokenPostResponse, AxiosError<LoginForAccessTokenAuthTokenPostError>, Options<LoginForAccessTokenAuthTokenPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await loginForAccessTokenAuthTokenPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Refresh Access Token
 */
export const refreshAccessTokenAuthRefreshPostMutation = (options?: Partial<Options<RefreshAccessTokenAuthRefreshPostData>>): UseMutationOptions<RefreshAccessTokenAuthRefreshPostResponse, AxiosError<RefreshAccessTokenAuthRefreshPostError>, Options<RefreshAccessTokenAuthRefreshPostData>> => {
    const mutationOptions: UseMutationOptions<RefreshAccessTokenAuthRefreshPostResponse, AxiosError<RefreshAccessTokenAuthRefreshPostError>, Options<RefreshAccessTokenAuthRefreshPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await refreshAccessTokenAuthRefreshPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const verifyEmailAuthVerifyEmailGetQueryKey = (options: Options<VerifyEmailAuthVerifyEmailGetData>) => createQueryKey('verifyEmailAuthVerifyEmailGet', options);

/**
 * Verify Email
 */
export const verifyEmailAuthVerifyEmailGetOptions = (options: Options<VerifyEmailAuthVerifyEmailGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await verifyEmailAuthVerifyEmailGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: verifyEmailAuthVerifyEmailGetQueryKey(options)
    });
};

export const readUsersMeAuthMeGetQueryKey = (options?: Options<ReadUsersMeAuthMeGetData>) => createQueryKey('readUsersMeAuthMeGet', options);

/**
 * Read Users Me
 */
export const readUsersMeAuthMeGetOptions = (options?: Options<ReadUsersMeAuthMeGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readUsersMeAuthMeGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readUsersMeAuthMeGetQueryKey(options)
    });
};

export const rootGetQueryKey = (options?: Options<RootGetData>) => createQueryKey('rootGet', options);

/**
 * Root
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rootGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootGetQueryKey(options)
    });
};

export const protectedEndpointProtectedGetQueryKey = (options?: Options<ProtectedEndpointProtectedGetData>) => createQueryKey('protectedEndpointProtectedGet', options);

/**
 * Protected Endpoint
 */
export const protectedEndpointProtectedGetOptions = (options?: Options<ProtectedEndpointProtectedGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await protectedEndpointProtectedGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: protectedEndpointProtectedGetQueryKey(options)
    });
};

export const adminEndpointAdminGetQueryKey = (options?: Options<AdminEndpointAdminGetData>) => createQueryKey('adminEndpointAdminGet', options);

/**
 * Admin Endpoint
 */
export const adminEndpointAdminGetOptions = (options?: Options<AdminEndpointAdminGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await adminEndpointAdminGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: adminEndpointAdminGetQueryKey(options)
    });
};
