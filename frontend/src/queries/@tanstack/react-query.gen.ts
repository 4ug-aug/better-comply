// This file is auto-generated by @hey-api/openapi-ts

import { type InfiniteData, infiniteQueryOptions, queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { AxiosError } from 'axios';

import { client } from '../client.gen';
import { adminEndpointAdminGet, computeNextSchedulingComputeNextPost, dispatchOutboxSchedulingOutboxDispatchPost, listOutboxSchedulingOutboxGet, listRunsSchedulingRunsGet, listSubscriptionsSchedulingSubscriptionsGet, loginForAccessTokenAuthTokenPost, type Options, protectedEndpointProtectedGet, readUsersMeAuthMeGet, refreshAccessTokenAuthRefreshPost, registerUserAuthRegisterPost, rootGet, tickSchedulingTickPost, verifyEmailAuthVerifyEmailGet } from '../sdk.gen';
import type { AdminEndpointAdminGetData, ComputeNextSchedulingComputeNextPostData, ComputeNextSchedulingComputeNextPostError, ComputeNextSchedulingComputeNextPostResponse, DispatchOutboxSchedulingOutboxDispatchPostData, DispatchOutboxSchedulingOutboxDispatchPostError, DispatchOutboxSchedulingOutboxDispatchPostResponse, ListOutboxSchedulingOutboxGetData, ListOutboxSchedulingOutboxGetError, ListOutboxSchedulingOutboxGetResponse, ListRunsSchedulingRunsGetData, ListRunsSchedulingRunsGetError, ListRunsSchedulingRunsGetResponse, ListSubscriptionsSchedulingSubscriptionsGetData, ListSubscriptionsSchedulingSubscriptionsGetError, ListSubscriptionsSchedulingSubscriptionsGetResponse, LoginForAccessTokenAuthTokenPostData, LoginForAccessTokenAuthTokenPostError, LoginForAccessTokenAuthTokenPostResponse, ProtectedEndpointProtectedGetData, ReadUsersMeAuthMeGetData, RefreshAccessTokenAuthRefreshPostData, RefreshAccessTokenAuthRefreshPostError, RefreshAccessTokenAuthRefreshPostResponse, RegisterUserAuthRegisterPostData, RegisterUserAuthRegisterPostError, RootGetData, TickSchedulingTickPostData, TickSchedulingTickPostError, TickSchedulingTickPostResponse, VerifyEmailAuthVerifyEmailGetData } from '../types.gen';

/**
 * Register User
 */
export const registerUserAuthRegisterPostMutation = (options?: Partial<Options<RegisterUserAuthRegisterPostData>>): UseMutationOptions<unknown, AxiosError<RegisterUserAuthRegisterPostError>, Options<RegisterUserAuthRegisterPostData>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<RegisterUserAuthRegisterPostError>, Options<RegisterUserAuthRegisterPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await registerUserAuthRegisterPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Login For Access Token
 */
export const loginForAccessTokenAuthTokenPostMutation = (options?: Partial<Options<LoginForAccessTokenAuthTokenPostData>>): UseMutationOptions<LoginForAccessTokenAuthTokenPostResponse, AxiosError<LoginForAccessTokenAuthTokenPostError>, Options<LoginForAccessTokenAuthTokenPostData>> => {
    const mutationOptions: UseMutationOptions<LoginForAccessTokenAuthTokenPostResponse, AxiosError<LoginForAccessTokenAuthTokenPostError>, Options<LoginForAccessTokenAuthTokenPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await loginForAccessTokenAuthTokenPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Refresh Access Token
 */
export const refreshAccessTokenAuthRefreshPostMutation = (options?: Partial<Options<RefreshAccessTokenAuthRefreshPostData>>): UseMutationOptions<RefreshAccessTokenAuthRefreshPostResponse, AxiosError<RefreshAccessTokenAuthRefreshPostError>, Options<RefreshAccessTokenAuthRefreshPostData>> => {
    const mutationOptions: UseMutationOptions<RefreshAccessTokenAuthRefreshPostResponse, AxiosError<RefreshAccessTokenAuthRefreshPostError>, Options<RefreshAccessTokenAuthRefreshPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await refreshAccessTokenAuthRefreshPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? client).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const verifyEmailAuthVerifyEmailGetQueryKey = (options: Options<VerifyEmailAuthVerifyEmailGetData>) => createQueryKey('verifyEmailAuthVerifyEmailGet', options);

/**
 * Verify Email
 */
export const verifyEmailAuthVerifyEmailGetOptions = (options: Options<VerifyEmailAuthVerifyEmailGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await verifyEmailAuthVerifyEmailGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: verifyEmailAuthVerifyEmailGetQueryKey(options)
    });
};

export const readUsersMeAuthMeGetQueryKey = (options?: Options<ReadUsersMeAuthMeGetData>) => createQueryKey('readUsersMeAuthMeGet', options);

/**
 * Read Users Me
 */
export const readUsersMeAuthMeGetOptions = (options?: Options<ReadUsersMeAuthMeGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await readUsersMeAuthMeGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: readUsersMeAuthMeGetQueryKey(options)
    });
};

/**
 * Tick
 */
export const tickSchedulingTickPostMutation = (options?: Partial<Options<TickSchedulingTickPostData>>): UseMutationOptions<TickSchedulingTickPostResponse, AxiosError<TickSchedulingTickPostError>, Options<TickSchedulingTickPostData>> => {
    const mutationOptions: UseMutationOptions<TickSchedulingTickPostResponse, AxiosError<TickSchedulingTickPostError>, Options<TickSchedulingTickPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await tickSchedulingTickPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Compute Next
 */
export const computeNextSchedulingComputeNextPostMutation = (options?: Partial<Options<ComputeNextSchedulingComputeNextPostData>>): UseMutationOptions<ComputeNextSchedulingComputeNextPostResponse, AxiosError<ComputeNextSchedulingComputeNextPostError>, Options<ComputeNextSchedulingComputeNextPostData>> => {
    const mutationOptions: UseMutationOptions<ComputeNextSchedulingComputeNextPostResponse, AxiosError<ComputeNextSchedulingComputeNextPostError>, Options<ComputeNextSchedulingComputeNextPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await computeNextSchedulingComputeNextPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Dispatch Outbox
 */
export const dispatchOutboxSchedulingOutboxDispatchPostMutation = (options?: Partial<Options<DispatchOutboxSchedulingOutboxDispatchPostData>>): UseMutationOptions<DispatchOutboxSchedulingOutboxDispatchPostResponse, AxiosError<DispatchOutboxSchedulingOutboxDispatchPostError>, Options<DispatchOutboxSchedulingOutboxDispatchPostData>> => {
    const mutationOptions: UseMutationOptions<DispatchOutboxSchedulingOutboxDispatchPostResponse, AxiosError<DispatchOutboxSchedulingOutboxDispatchPostError>, Options<DispatchOutboxSchedulingOutboxDispatchPostData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await dispatchOutboxSchedulingOutboxDispatchPost({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const listSubscriptionsSchedulingSubscriptionsGetQueryKey = (options?: Options<ListSubscriptionsSchedulingSubscriptionsGetData>) => createQueryKey('listSubscriptionsSchedulingSubscriptionsGet', options);

/**
 * List Subscriptions
 */
export const listSubscriptionsSchedulingSubscriptionsGetOptions = (options?: Options<ListSubscriptionsSchedulingSubscriptionsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listSubscriptionsSchedulingSubscriptionsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSubscriptionsSchedulingSubscriptionsGetQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const listSubscriptionsSchedulingSubscriptionsGetInfiniteQueryKey = (options?: Options<ListSubscriptionsSchedulingSubscriptionsGetData>): QueryKey<Options<ListSubscriptionsSchedulingSubscriptionsGetData>> => createQueryKey('listSubscriptionsSchedulingSubscriptionsGet', options, true);

/**
 * List Subscriptions
 */
export const listSubscriptionsSchedulingSubscriptionsGetInfiniteOptions = (options?: Options<ListSubscriptionsSchedulingSubscriptionsGetData>) => {
    return infiniteQueryOptions<ListSubscriptionsSchedulingSubscriptionsGetResponse, AxiosError<ListSubscriptionsSchedulingSubscriptionsGetError>, InfiniteData<ListSubscriptionsSchedulingSubscriptionsGetResponse>, QueryKey<Options<ListSubscriptionsSchedulingSubscriptionsGetData>>, number | Pick<QueryKey<Options<ListSubscriptionsSchedulingSubscriptionsGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListSubscriptionsSchedulingSubscriptionsGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listSubscriptionsSchedulingSubscriptionsGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listSubscriptionsSchedulingSubscriptionsGetInfiniteQueryKey(options)
    });
};

export const listRunsSchedulingRunsGetQueryKey = (options?: Options<ListRunsSchedulingRunsGetData>) => createQueryKey('listRunsSchedulingRunsGet', options);

/**
 * List Runs
 */
export const listRunsSchedulingRunsGetOptions = (options?: Options<ListRunsSchedulingRunsGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listRunsSchedulingRunsGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listRunsSchedulingRunsGetQueryKey(options)
    });
};

export const listRunsSchedulingRunsGetInfiniteQueryKey = (options?: Options<ListRunsSchedulingRunsGetData>): QueryKey<Options<ListRunsSchedulingRunsGetData>> => createQueryKey('listRunsSchedulingRunsGet', options, true);

/**
 * List Runs
 */
export const listRunsSchedulingRunsGetInfiniteOptions = (options?: Options<ListRunsSchedulingRunsGetData>) => {
    return infiniteQueryOptions<ListRunsSchedulingRunsGetResponse, AxiosError<ListRunsSchedulingRunsGetError>, InfiniteData<ListRunsSchedulingRunsGetResponse>, QueryKey<Options<ListRunsSchedulingRunsGetData>>, number | Pick<QueryKey<Options<ListRunsSchedulingRunsGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListRunsSchedulingRunsGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listRunsSchedulingRunsGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listRunsSchedulingRunsGetInfiniteQueryKey(options)
    });
};

export const listOutboxSchedulingOutboxGetQueryKey = (options?: Options<ListOutboxSchedulingOutboxGetData>) => createQueryKey('listOutboxSchedulingOutboxGet', options);

/**
 * List Outbox
 */
export const listOutboxSchedulingOutboxGetOptions = (options?: Options<ListOutboxSchedulingOutboxGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listOutboxSchedulingOutboxGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listOutboxSchedulingOutboxGetQueryKey(options)
    });
};

export const listOutboxSchedulingOutboxGetInfiniteQueryKey = (options?: Options<ListOutboxSchedulingOutboxGetData>): QueryKey<Options<ListOutboxSchedulingOutboxGetData>> => createQueryKey('listOutboxSchedulingOutboxGet', options, true);

/**
 * List Outbox
 */
export const listOutboxSchedulingOutboxGetInfiniteOptions = (options?: Options<ListOutboxSchedulingOutboxGetData>) => {
    return infiniteQueryOptions<ListOutboxSchedulingOutboxGetResponse, AxiosError<ListOutboxSchedulingOutboxGetError>, InfiniteData<ListOutboxSchedulingOutboxGetResponse>, QueryKey<Options<ListOutboxSchedulingOutboxGetData>>, number | Pick<QueryKey<Options<ListOutboxSchedulingOutboxGetData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListOutboxSchedulingOutboxGetData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    offset: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listOutboxSchedulingOutboxGet({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listOutboxSchedulingOutboxGetInfiniteQueryKey(options)
    });
};

export const rootGetQueryKey = (options?: Options<RootGetData>) => createQueryKey('rootGet', options);

/**
 * Root
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await rootGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: rootGetQueryKey(options)
    });
};

export const protectedEndpointProtectedGetQueryKey = (options?: Options<ProtectedEndpointProtectedGetData>) => createQueryKey('protectedEndpointProtectedGet', options);

/**
 * Protected Endpoint
 */
export const protectedEndpointProtectedGetOptions = (options?: Options<ProtectedEndpointProtectedGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await protectedEndpointProtectedGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: protectedEndpointProtectedGetQueryKey(options)
    });
};

export const adminEndpointAdminGetQueryKey = (options?: Options<AdminEndpointAdminGetData>) => createQueryKey('adminEndpointAdminGet', options);

/**
 * Admin Endpoint
 */
export const adminEndpointAdminGetOptions = (options?: Options<AdminEndpointAdminGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await adminEndpointAdminGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: adminEndpointAdminGetQueryKey(options)
    });
};
