// This file is auto-generated by @hey-api/openapi-ts

export const BulkSettingsUpdateSchema = {
    properties: {
        settings: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Settings',
            description: 'Dictionary of setting keys to values'
        }
    },
    type: 'object',
    required: ['settings'],
    title: 'BulkSettingsUpdate',
    description: 'Schema for bulk updating multiple settings'
} as const;

export const ChatMessageSchema = {
    properties: {
        role: {
            type: 'string',
            title: 'Role',
            description: "Message role: 'system' | 'user' | 'assistant'"
        },
        content: {
            type: 'string',
            title: 'Content'
        }
    },
    type: 'object',
    required: ['role', 'content'],
    title: 'ChatMessage'
} as const;

export const ConnectionTestResponseSchema = {
    properties: {
        status: {
            type: 'string',
            title: 'Status',
            description: 'Connection status (success/error)'
        },
        message: {
            type: 'string',
            title: 'Message',
            description: 'Status message'
        },
        organization: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Organization',
            description: 'Organization name'
        },
        verified_tenant_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Verified Tenant Id',
            description: 'Verified tenant ID'
        },
        users_accessible: {
            type: 'boolean',
            title: 'Users Accessible',
            description: 'Whether users can be accessed',
            default: false
        },
        permissions_verified: {
            type: 'boolean',
            title: 'Permissions Verified',
            description: 'Whether permissions are verified',
            default: false
        },
        error_code: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Error Code',
            description: 'Error code if failed'
        }
    },
    type: 'object',
    required: ['status', 'message'],
    title: 'ConnectionTestResponse',
    description: 'Response model for connection test'
} as const;

export const EnqueueHunterIOEmailFinderPayloadSchema = {
    properties: {
        target_id: {
            type: 'string',
            format: 'uuid',
            title: 'Target Id'
        },
        domain: {
            type: 'string',
            title: 'Domain'
        },
        first_name: {
            type: 'string',
            title: 'First Name'
        },
        last_name: {
            type: 'string',
            title: 'Last Name'
        },
        company: {
            type: 'string',
            title: 'Company'
        }
    },
    type: 'object',
    required: ['target_id', 'domain', 'first_name', 'last_name'],
    title: 'EnqueueHunterIOEmailFinderPayload',
    description: 'Payload for HunterIO email finder task.'
} as const;

export const EnqueueHunterIOEmailPayloadSchema = {
    properties: {
        target_id: {
            type: 'string',
            format: 'uuid',
            title: 'Target Id'
        },
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['target_id', 'email'],
    title: 'EnqueueHunterIOEmailPayload',
    description: 'Payload for HunterIO email enrichment task.'
} as const;

export const GenerateRequestSchema = {
    properties: {
        model: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Model',
            description: "Model identifier (e.g., 'openai/gpt-4o')"
        },
        messages: {
            items: {
                '$ref': '#/components/schemas/ChatMessage'
            },
            type: 'array',
            title: 'Messages'
        },
        temperature: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Temperature'
        },
        max_tokens: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Max Tokens'
        },
        extra: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Extra'
        }
    },
    type: 'object',
    required: ['messages'],
    title: 'GenerateRequest'
} as const;

export const GenerateResponseSchema = {
    properties: {
        text: {
            type: 'string',
            title: 'Text'
        },
        raw: {
            additionalProperties: true,
            type: 'object',
            title: 'Raw'
        }
    },
    type: 'object',
    required: ['text', 'raw'],
    title: 'GenerateResponse'
} as const;

export const GraphDomainSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'Domain name'
        },
        authenticationType: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Authenticationtype'
        },
        availabilityStatus: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Availabilitystatus'
        },
        isAdminManaged: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Isadminmanaged'
        },
        isDefault: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Isdefault'
        },
        isInitial: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Isinitial'
        },
        isRoot: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Isroot'
        },
        isVerified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Isverified'
        },
        supportedServices: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Supportedservices'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'GraphDomain',
    description: 'Microsoft Graph Domain object'
} as const;

export const GraphGroupSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'Unique identifier'
        },
        displayName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Displayname'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'Group description'
        },
        mail: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mail',
            description: 'Group email address'
        },
        mailEnabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mailenabled'
        },
        mailNickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mailnickname'
        },
        securityEnabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Securityenabled'
        },
        groupTypes: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grouptypes'
        },
        createdDateTime: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createddatetime'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'GraphGroup',
    description: 'Microsoft Graph Group object'
} as const;

export const GraphGroupTypeSchema = {
    type: 'string',
    enum: ['Unified', 'Security', 'Distribution'],
    title: 'GraphGroupType',
    description: 'Microsoft Graph group types'
} as const;

export const GraphOrganizationSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'Tenant ID'
        },
        displayName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Displayname'
        },
        verifiedDomains: {
            anyOf: [
                {
                    items: {
                        additionalProperties: true,
                        type: 'object'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Verifieddomains'
        },
        businessPhones: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Businessphones'
        },
        city: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'City',
            description: 'City'
        },
        country: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Country',
            description: 'Country'
        },
        countryLetterCode: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Countrylettercode'
        },
        state: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State',
            description: 'State'
        },
        street: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Street',
            description: 'Street address'
        },
        postalCode: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Postalcode'
        },
        createdDateTime: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createddatetime'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'GraphOrganization',
    description: 'Microsoft Graph Organization object'
} as const;

export const GraphUserSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'Unique identifier'
        },
        displayName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Displayname'
        },
        givenName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Givenname'
        },
        surname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Surname'
        },
        userPrincipalName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Userprincipalname'
        },
        mail: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mail',
            description: 'Primary email address'
        },
        jobTitle: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Jobtitle'
        },
        department: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Department',
            description: 'Department'
        },
        companyName: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Companyname'
        },
        officeLocation: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Officelocation'
        },
        businessPhones: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Businessphones'
        },
        mobilePhone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mobilephone'
        },
        userType: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/GraphUserType'
                },
                {
                    type: 'null'
                }
            ]
        },
        accountEnabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Accountenabled'
        },
        createdDateTime: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Createddatetime'
        },
        lastSignInDateTime: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Lastsignindatetime'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'GraphUser',
    description: 'Microsoft Graph User object'
} as const;

export const GraphUserTypeSchema = {
    type: 'string',
    enum: ['Member', 'Guest'],
    title: 'GraphUserType',
    description: 'Microsoft Graph user types'
} as const;

export const GroupDetailResponseSchema = {
    properties: {
        group: {
            '$ref': '#/components/schemas/GraphGroup',
            description: 'Group information'
        },
        members: {
            items: {
                '$ref': '#/components/schemas/GraphUser'
            },
            type: 'array',
            title: 'Members',
            description: 'Group members'
        },
        member_count: {
            type: 'integer',
            title: 'Member Count',
            description: 'Number of members',
            default: 0
        }
    },
    type: 'object',
    required: ['group'],
    title: 'GroupDetailResponse',
    description: 'Response model for group details with members'
} as const;

export const GroupSearchRequestSchema = {
    properties: {
        query: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Query',
            description: 'Search query'
        },
        group_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/GraphGroupType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter by group type'
        },
        mail_enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mail Enabled',
            description: 'Filter by mail enabled status'
        },
        security_enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Security Enabled',
            description: 'Filter by security enabled status'
        },
        limit: {
            type: 'integer',
            maximum: 999,
            minimum: 1,
            title: 'Limit',
            default: 100
        },
        skip: {
            type: 'integer',
            minimum: 0,
            title: 'Skip',
            default: 0
        }
    },
    type: 'object',
    title: 'GroupSearchRequest',
    description: 'Request model for advanced group search'
} as const;

export const GroupsListResponseSchema = {
    properties: {
        groups: {
            items: {
                '$ref': '#/components/schemas/GraphGroup'
            },
            type: 'array',
            title: 'Groups',
            description: 'List of groups'
        },
        total_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Count',
            description: 'Total number of groups (if search is used)'
        },
        next_link: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Link',
            description: 'URL for next page of results'
        },
        has_more: {
            type: 'boolean',
            title: 'Has More',
            description: 'Whether there are more results',
            default: false
        }
    },
    type: 'object',
    required: ['groups'],
    title: 'GroupsListResponse',
    description: 'Response model for listing groups'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const JobRequestSchema = {
    properties: {
        type: {
            type: 'string',
            title: 'Type'
        },
        payload: {
            additionalProperties: true,
            type: 'object',
            title: 'Payload',
            default: {}
        }
    },
    type: 'object',
    required: ['type'],
    title: 'JobRequest',
    description: `Generic job request payload.

- type: logical job type identifier (e.g., "hunterio.enrich_email")
- payload: free-form JSON payload to pass to workers`
} as const;

export const JobRequestResponseSchema = {
    properties: {
        job_id: {
            type: 'string',
            title: 'Job Id'
        }
    },
    type: 'object',
    required: ['job_id'],
    title: 'JobRequestResponse',
    description: 'Response containing the assigned job identifier.'
} as const;

export const MicrosoftGraphCredentialsSchema = {
    properties: {
        client_id: {
            type: 'string',
            title: 'Client Id',
            description: 'Azure AD Application (client) ID'
        },
        client_secret: {
            type: 'string',
            title: 'Client Secret',
            description: 'Azure AD Application client secret'
        },
        tenant_id: {
            type: 'string',
            title: 'Tenant Id',
            description: 'Azure AD Tenant ID'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            description: 'OAuth scope',
            default: 'https://graph.microsoft.com/.default'
        }
    },
    type: 'object',
    required: ['client_id', 'client_secret', 'tenant_id'],
    title: 'MicrosoftGraphCredentials',
    description: 'Schema for Microsoft Graph credentials'
} as const;

export const ObservationSchema = {
    properties: {
        target_id: {
            type: 'string',
            format: 'uuid',
            title: 'Target Id'
        },
        kind: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Kind'
        },
        data: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        confidence: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Confidence'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['target_id', 'id', 'created_at', 'updated_at'],
    title: 'Observation'
} as const;

export const ObservationBaseSchema = {
    properties: {
        target_id: {
            type: 'string',
            format: 'uuid',
            title: 'Target Id'
        },
        kind: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Kind'
        },
        data: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        },
        confidence: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Confidence'
        }
    },
    type: 'object',
    required: ['target_id'],
    title: 'ObservationBase'
} as const;

export const OrganizationResponseSchema = {
    properties: {
        organization: {
            '$ref': '#/components/schemas/GraphOrganization',
            description: 'Organization details'
        },
        domains: {
            items: {
                '$ref': '#/components/schemas/GraphDomain'
            },
            type: 'array',
            title: 'Domains',
            description: 'Organization domains'
        },
        primary_domain: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Primary Domain',
            description: 'Primary domain name'
        }
    },
    type: 'object',
    required: ['organization'],
    title: 'OrganizationResponse',
    description: 'Response model for organization information'
} as const;

export const OrganizationUnitSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        target_count: {
            type: 'integer',
            title: 'Target Count',
            default: 0
        }
    },
    type: 'object',
    required: ['name', 'id', 'created_at', 'updated_at'],
    title: 'OrganizationUnit'
} as const;

export const OrganizationUnitCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'OrganizationUnitCreate'
} as const;

export const OrganizationUnitUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    title: 'OrganizationUnitUpdate'
} as const;

export const ScenarioSchema = {
    properties: {
        target_id: {
            type: 'string',
            format: 'uuid',
            title: 'Target Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        scenario_type: {
            type: 'string',
            title: 'Scenario Type'
        },
        config: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Config'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        target: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Target'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['target_id', 'name', 'scenario_type', 'id', 'created_at', 'updated_at'],
    title: 'Scenario',
    description: 'Complete scenario schema with all fields.'
} as const;

export const ScenarioCreateSchema = {
    properties: {
        target_id: {
            type: 'string',
            format: 'uuid',
            title: 'Target Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        scenario_type: {
            type: 'string',
            title: 'Scenario Type'
        },
        config: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Config'
        }
    },
    type: 'object',
    required: ['target_id', 'name', 'scenario_type'],
    title: 'ScenarioCreate',
    description: 'Schema for creating a new scenario.'
} as const;

export const ScenarioUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        config: {
            anyOf: [
                {
                    additionalProperties: true,
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Config'
        }
    },
    type: 'object',
    title: 'ScenarioUpdate',
    description: 'Schema for updating a scenario.'
} as const;

export const SettingSchema = {
    properties: {
        key: {
            type: 'string',
            title: 'Key',
            description: "Unique setting identifier (e.g., 'microsoft_graph.client_id')"
        },
        value: {
            type: 'string',
            title: 'Value',
            description: 'Setting value (will be encrypted if sensitive)'
        },
        value_type: {
            '$ref': '#/components/schemas/SettingValueType',
            description: 'Type of the setting value',
            default: 'string'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'Human readable description'
        },
        is_sensitive: {
            type: 'boolean',
            title: 'Is Sensitive',
            description: 'Whether value should be encrypted',
            default: false
        },
        is_required: {
            type: 'boolean',
            title: 'Is Required',
            description: 'Whether setting is required for functionality',
            default: false
        },
        category: {
            '$ref': '#/components/schemas/SettingCategory',
            description: 'Setting category',
            default: 'general'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            description: 'Whether the setting is active',
            default: true
        },
        default_value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Default Value',
            description: 'Default value for reference'
        },
        validation_pattern: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Validation Pattern',
            description: 'Regex pattern for validation'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['key', 'value', 'id', 'created_at', 'updated_at'],
    title: 'Setting',
    description: 'Schema for returning settings'
} as const;

export const SettingCategorySchema = {
    type: 'string',
    enum: ['integration', 'security', 'general', 'notification', 'storage'],
    title: 'SettingCategory',
    description: 'Categories for organizing settings'
} as const;

export const SettingCreateSchema = {
    properties: {
        key: {
            type: 'string',
            title: 'Key',
            description: "Unique setting identifier (e.g., 'microsoft_graph.client_id')"
        },
        value: {
            type: 'string',
            title: 'Value',
            description: 'Setting value (will be encrypted if sensitive)'
        },
        value_type: {
            '$ref': '#/components/schemas/SettingValueType',
            description: 'Type of the setting value',
            default: 'string'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'Human readable description'
        },
        is_sensitive: {
            type: 'boolean',
            title: 'Is Sensitive',
            description: 'Whether value should be encrypted',
            default: false
        },
        is_required: {
            type: 'boolean',
            title: 'Is Required',
            description: 'Whether setting is required for functionality',
            default: false
        },
        category: {
            '$ref': '#/components/schemas/SettingCategory',
            description: 'Setting category',
            default: 'general'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            description: 'Whether the setting is active',
            default: true
        },
        default_value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Default Value',
            description: 'Default value for reference'
        },
        validation_pattern: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Validation Pattern',
            description: 'Regex pattern for validation'
        }
    },
    type: 'object',
    required: ['key', 'value'],
    title: 'SettingCreate',
    description: 'Schema for creating settings'
} as const;

export const SettingResponseSchema = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        value: {
            type: 'string',
            title: 'Value'
        },
        display_value: {
            type: 'string',
            title: 'Display Value'
        },
        value_type: {
            '$ref': '#/components/schemas/SettingValueType'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        is_sensitive: {
            type: 'boolean',
            title: 'Is Sensitive'
        },
        is_required: {
            type: 'boolean',
            title: 'Is Required'
        },
        category: {
            '$ref': '#/components/schemas/SettingCategory'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active'
        },
        default_value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Default Value'
        },
        validation_pattern: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Validation Pattern'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'key', 'value', 'display_value', 'value_type', 'description', 'is_sensitive', 'is_required', 'category', 'is_active', 'default_value', 'validation_pattern', 'created_at', 'updated_at'],
    title: 'SettingResponse',
    description: 'Schema for returning settings with potentially obfuscated values'
} as const;

export const SettingUpdateSchema = {
    properties: {
        value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value',
            description: 'Setting value'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            description: 'Human readable description'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active',
            description: 'Whether the setting is active'
        },
        validation_pattern: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Validation Pattern',
            description: 'Regex pattern for validation'
        }
    },
    type: 'object',
    title: 'SettingUpdate',
    description: 'Schema for updating settings'
} as const;

export const SettingValueTypeSchema = {
    type: 'string',
    enum: ['string', 'integer', 'boolean', 'json', 'password', 'oauth_token'],
    title: 'SettingValueType',
    description: 'Types of setting values'
} as const;

export const SpearTemplateSchema = {
    properties: {
        scenario_id: {
            type: 'string',
            format: 'uuid',
            title: 'Scenario Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        subject: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Subject'
        },
        body: {
            type: 'string',
            title: 'Body'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['scenario_id', 'name', 'body', 'status', 'id', 'created_at', 'updated_at'],
    title: 'SpearTemplate',
    description: 'Complete spear template schema with all fields.'
} as const;

export const SpearTemplateCreateSchema = {
    properties: {
        scenario_id: {
            type: 'string',
            format: 'uuid',
            title: 'Scenario Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        subject: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Subject'
        },
        body: {
            type: 'string',
            title: 'Body'
        },
        status: {
            type: 'string',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['scenario_id', 'name', 'body', 'status'],
    title: 'SpearTemplateCreate',
    description: 'Schema for creating a new spear template.'
} as const;

export const SpearTemplateUpdateSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        subject: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Subject'
        },
        body: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Body'
        },
        status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Status'
        }
    },
    type: 'object',
    title: 'SpearTemplateUpdate',
    description: 'Schema for updating a spear template.'
} as const;

export const TargetSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        company: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Company'
        },
        role: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Role'
        },
        org_unit: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Org Unit'
        },
        org_unit_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Org Unit Id'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'created_at', 'updated_at'],
    title: 'Target',
    description: 'Complete target schema with all fields.'
} as const;

export const TargetCreateSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        company: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Company'
        },
        role: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Role'
        },
        org_unit: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Org Unit'
        },
        org_unit_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Org Unit Id'
        }
    },
    type: 'object',
    title: 'TargetCreate',
    description: 'Schema for creating a new target.'
} as const;

export const TargetIdentifierSchema = {
    properties: {
        target_id: {
            type: 'string',
            format: 'uuid',
            title: 'Target Id'
        },
        type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type'
        },
        value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value'
        },
        confidence: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Confidence'
        },
        verified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Verified',
            default: false
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['target_id', 'id', 'created_at', 'updated_at'],
    title: 'TargetIdentifier'
} as const;

export const TargetIdentifierBaseSchema = {
    properties: {
        target_id: {
            type: 'string',
            format: 'uuid',
            title: 'Target Id'
        },
        type: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type'
        },
        value: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Value'
        },
        confidence: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Confidence'
        },
        verified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Verified',
            default: false
        }
    },
    type: 'object',
    required: ['target_id'],
    title: 'TargetIdentifierBase'
} as const;

export const TargetUpdateSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        company: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Company'
        },
        role: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Role'
        },
        org_unit: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Org Unit'
        },
        org_unit_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Org Unit Id'
        }
    },
    type: 'object',
    title: 'TargetUpdate',
    description: 'Schema for updating a target.'
} as const;

export const UserDetailResponseSchema = {
    properties: {
        user: {
            '$ref': '#/components/schemas/GraphUser',
            description: 'User information'
        },
        manager: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/GraphUser'
                },
                {
                    type: 'null'
                }
            ],
            description: "User's manager"
        },
        direct_reports: {
            items: {
                '$ref': '#/components/schemas/GraphUser'
            },
            type: 'array',
            title: 'Direct Reports',
            description: "User's direct reports"
        },
        groups: {
            items: {
                '$ref': '#/components/schemas/GraphGroup'
            },
            type: 'array',
            title: 'Groups',
            description: 'Groups user belongs to'
        }
    },
    type: 'object',
    required: ['user'],
    title: 'UserDetailResponse',
    description: 'Response model for user details with additional information'
} as const;

export const UserSearchRequestSchema = {
    properties: {
        query: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Query',
            description: 'Search query'
        },
        department: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Department',
            description: 'Filter by department'
        },
        job_title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Job Title',
            description: 'Filter by job title'
        },
        company: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Company',
            description: 'Filter by company'
        },
        user_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/GraphUserType'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Filter by user type'
        },
        account_enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Account Enabled',
            description: 'Filter by account status'
        },
        limit: {
            type: 'integer',
            maximum: 999,
            minimum: 1,
            title: 'Limit',
            default: 100
        },
        skip: {
            type: 'integer',
            minimum: 0,
            title: 'Skip',
            default: 0
        }
    },
    type: 'object',
    title: 'UserSearchRequest',
    description: 'Request model for advanced user search'
} as const;

export const UsersListResponseSchema = {
    properties: {
        users: {
            items: {
                '$ref': '#/components/schemas/GraphUser'
            },
            type: 'array',
            title: 'Users',
            description: 'List of users'
        },
        total_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Count',
            description: 'Total number of users (if search is used)'
        },
        next_link: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Link',
            description: 'URL for next page of results'
        },
        has_more: {
            type: 'boolean',
            title: 'Has More',
            description: 'Whether there are more results',
            default: false
        }
    },
    type: 'object',
    required: ['users'],
    title: 'UsersListResponse',
    description: 'Response model for listing users'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;
