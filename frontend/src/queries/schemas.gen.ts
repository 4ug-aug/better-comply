// This file is auto-generated by @hey-api/openapi-ts

export const BatchRequestSchema = {
    properties: {
        batch_size: {
            type: 'integer',
            maximum: 5000,
            minimum: 1,
            title: 'Batch Size',
            default: 100
        }
    },
    type: 'object',
    title: 'BatchRequest'
} as const;

export const Body_login_for_access_token_auth_token_postSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: '^password$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            format: 'password',
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login_for_access_token_auth_token_post'
} as const;

export const ComputeNextResultSchema = {
    properties: {
        updated: {
            type: 'integer',
            title: 'Updated'
        }
    },
    type: 'object',
    required: ['updated'],
    title: 'ComputeNextResult'
} as const;

export const CreateSourceRequestSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 1,
            title: 'Name'
        },
        kind: {
            type: 'string',
            enum: ['html', 'api', 'pdf'],
            title: 'Kind'
        },
        base_url: {
            type: 'string',
            minLength: 1,
            title: 'Base Url'
        },
        auth_ref: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Auth Ref'
        },
        robots_mode: {
            type: 'string',
            enum: ['allow', 'disallow', 'custom'],
            title: 'Robots Mode',
            default: 'allow'
        },
        rate_limit: {
            type: 'integer',
            maximum: 3600,
            minimum: 1,
            title: 'Rate Limit',
            default: 60
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: true
        }
    },
    type: 'object',
    required: ['name', 'kind', 'base_url'],
    title: 'CreateSourceRequest'
} as const;

export const CreateSubscriptionRequestSchema = {
    properties: {
        source_id: {
            type: 'integer',
            title: 'Source Id'
        },
        jurisdiction: {
            type: 'string',
            title: 'Jurisdiction'
        },
        selectors: {
            additionalProperties: true,
            type: 'object',
            title: 'Selectors'
        },
        schedule: {
            type: 'string',
            title: 'Schedule'
        },
        status: {
            type: 'string',
            enum: ['ACTIVE', 'DISABLED'],
            title: 'Status',
            default: 'ACTIVE'
        }
    },
    type: 'object',
    required: ['source_id', 'jurisdiction', 'selectors', 'schedule'],
    title: 'CreateSubscriptionRequest'
} as const;

export const CreateUserRequestSchema = {
    properties: {
        username: {
            type: 'string',
            title: 'Username'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    type: 'object',
    required: ['username', 'email', 'password'],
    title: 'CreateUserRequest'
} as const;

export const DeleteResultSchema = {
    properties: {
        deleted: {
            type: 'boolean',
            title: 'Deleted'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['deleted', 'id'],
    title: 'DeleteResult'
} as const;

export const DispatchResultSchema = {
    properties: {
        published: {
            type: 'integer',
            title: 'Published'
        }
    },
    type: 'object',
    required: ['published'],
    title: 'DispatchResult'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const OutboxOutSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        created_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created At'
        },
        event_type: {
            type: 'string',
            title: 'Event Type'
        },
        payload: {
            additionalProperties: true,
            type: 'object',
            title: 'Payload'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        attempts: {
            type: 'integer',
            title: 'Attempts'
        },
        published_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Published At'
        }
    },
    type: 'object',
    required: ['id', 'event_type', 'payload', 'status', 'attempts'],
    title: 'OutboxOut'
} as const;

export const RefreshTokenRequestSchema = {
    properties: {
        refresh_token: {
            type: 'string',
            title: 'Refresh Token'
        }
    },
    type: 'object',
    required: ['refresh_token'],
    title: 'RefreshTokenRequest'
} as const;

export const RunOutSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        subscription_id: {
            type: 'integer',
            title: 'Subscription Id'
        },
        run_kind: {
            type: 'string',
            title: 'Run Kind'
        },
        started_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Started At'
        },
        ended_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ended At'
        },
        status: {
            type: 'string',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['id', 'subscription_id', 'run_kind', 'status'],
    title: 'RunOut'
} as const;

export const SourceDetailOutSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        kind: {
            type: 'string',
            enum: ['html', 'api', 'pdf'],
            title: 'Kind'
        },
        base_url: {
            type: 'string',
            title: 'Base Url'
        },
        auth_ref: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Auth Ref'
        },
        robots_mode: {
            type: 'string',
            enum: ['allow', 'disallow', 'custom'],
            title: 'Robots Mode',
            default: 'allow'
        },
        rate_limit: {
            type: 'integer',
            title: 'Rate Limit',
            default: 60
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: true
        },
        created_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created At'
        },
        updated_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'name', 'kind', 'base_url'],
    title: 'SourceDetailOut'
} as const;

export const SourceOutSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        kind: {
            type: 'string',
            enum: ['html', 'api', 'pdf'],
            title: 'Kind'
        },
        base_url: {
            type: 'string',
            title: 'Base Url'
        },
        auth_ref: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Auth Ref'
        },
        robots_mode: {
            type: 'string',
            enum: ['allow', 'disallow', 'custom'],
            title: 'Robots Mode',
            default: 'allow'
        },
        rate_limit: {
            type: 'integer',
            title: 'Rate Limit',
            default: 60
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: true
        },
        created_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created At'
        },
        updated_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'name', 'kind', 'base_url'],
    title: 'SourceOut'
} as const;

export const SourceResponseSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        kind: {
            type: 'string',
            enum: ['html', 'api', 'pdf'],
            title: 'Kind'
        },
        base_url: {
            type: 'string',
            title: 'Base Url'
        },
        auth_ref: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Auth Ref'
        },
        robots_mode: {
            type: 'string',
            enum: ['allow', 'disallow', 'custom'],
            title: 'Robots Mode',
            default: 'allow'
        },
        rate_limit: {
            type: 'integer',
            title: 'Rate Limit',
            default: 60
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled',
            default: true
        },
        created_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created At'
        },
        updated_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'name', 'kind', 'base_url'],
    title: 'SourceResponse'
} as const;

export const SubscriptionDetailOutSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        source_id: {
            type: 'integer',
            title: 'Source Id'
        },
        jurisdiction: {
            type: 'string',
            title: 'Jurisdiction'
        },
        selectors: {
            additionalProperties: true,
            type: 'object',
            title: 'Selectors'
        },
        schedule: {
            type: 'string',
            title: 'Schedule'
        },
        last_run_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Run At'
        },
        next_run_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Run At'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        created_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created At'
        },
        updated_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'source_id', 'jurisdiction', 'selectors', 'schedule', 'status'],
    title: 'SubscriptionDetailOut'
} as const;

export const SubscriptionOutSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        schedule: {
            type: 'string',
            title: 'Schedule'
        },
        last_run_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Run At'
        },
        next_run_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Run At'
        },
        status: {
            type: 'string',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['id', 'schedule', 'status'],
    title: 'SubscriptionOut'
} as const;

export const SubscriptionResponseSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        schedule: {
            type: 'string',
            title: 'Schedule'
        },
        last_run_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Run At'
        },
        next_run_at: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Next Run At'
        },
        status: {
            type: 'string',
            title: 'Status'
        }
    },
    type: 'object',
    required: ['id', 'schedule', 'status'],
    title: 'SubscriptionResponse'
} as const;

export const TickResultSchema = {
    properties: {
        processed: {
            type: 'integer',
            title: 'Processed'
        }
    },
    type: 'object',
    required: ['processed'],
    title: 'TickResult'
} as const;

export const TokenSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        refresh_token: {
            type: 'string',
            title: 'Refresh Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type'
        }
    },
    type: 'object',
    required: ['access_token', 'refresh_token', 'token_type'],
    title: 'Token'
} as const;

export const UpdateSourceRequestSchema = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        kind: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['html', 'api', 'pdf']
                },
                {
                    type: 'null'
                }
            ],
            title: 'Kind'
        },
        base_url: {
            anyOf: [
                {
                    type: 'string',
                    minLength: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Base Url'
        },
        auth_ref: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Auth Ref'
        },
        robots_mode: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['allow', 'disallow', 'custom']
                },
                {
                    type: 'null'
                }
            ],
            title: 'Robots Mode'
        },
        rate_limit: {
            anyOf: [
                {
                    type: 'integer',
                    maximum: 3600,
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Rate Limit'
        },
        enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Enabled'
        }
    },
    type: 'object',
    title: 'UpdateSourceRequest'
} as const;

export const UpdateSubscriptionRequestSchema = {
    properties: {
        jurisdiction: {
            type: 'string',
            title: 'Jurisdiction'
        },
        selectors: {
            additionalProperties: true,
            type: 'object',
            title: 'Selectors'
        },
        schedule: {
            type: 'string',
            title: 'Schedule'
        },
        status: {
            type: 'string',
            enum: ['ACTIVE', 'DISABLED'],
            title: 'Status'
        }
    },
    type: 'object',
    required: ['jurisdiction', 'selectors', 'schedule', 'status'],
    title: 'UpdateSubscriptionRequest'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;
