// This file is auto-generated by @hey-api/openapi-ts

import type { CreateIdentifierIdentifiersPostResponse, CreateObservationObservationsPostResponse, CreateOrgUnitOrgUnitsPostResponse, CreateScenarioScenariosPostResponse, CreateSettingSettingsPostResponse, CreateTargetTargetsPostResponse, CreateTemplateSpearTemplatesPostResponse, GetGroupMicrosoftGraphGroupsGroupIdGetResponse, GetIdentifiersByTargetIdentifiersTargetsTargetIdGetResponse, GetObservationsByTargetObservationsTargetsTargetIdGetResponse, GetOrganizationMicrosoftGraphOrganizationGetResponse, GetOrgUnitByIdOrgUnitsOrgUnitIdGetResponse, GetOrgUnitsOrgUnitsGetResponse, GetScenarioByIdScenariosScenarioIdGetResponse, GetScenariosScenariosGetResponse, GetSettingByKeySettingsKeyKeyGetResponse, GetSettingsByCategorySettingsCategoryCategoryGetResponse, GetSettingSettingsSettingIdGetResponse, GetTargetByEmailTargetsEmailEmailGetResponse, GetTargetsByCompanyTargetsCompanyCompanyGetResponse, GetTargetsTargetsGetResponse, GetTargetTargetsTargetIdGetResponse, GetTemplateSpearTemplatesTemplateIdGetResponse, GetUserMicrosoftGraphUsersUserIdGetResponse, ListGroupsMicrosoftGraphGroupsGetResponse, ListSettingsSettingsGetResponse, ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetResponse, ListTemplatesSpearTemplatesGetResponse, ListUsersMicrosoftGraphUsersGetResponse, SearchGroupsMicrosoftGraphGroupsSearchPostResponse, SearchTargetsByNameTargetsSearchNameGetResponse, SearchUsersMicrosoftGraphUsersSearchPostResponse, UpdateOrgUnitOrgUnitsOrgUnitIdPutResponse, UpdateScenarioScenariosScenarioIdPutResponse, UpdateSettingByKeySettingsKeyKeyPutResponse, UpdateSettingSettingsSettingIdPutResponse, UpdateTargetTargetsTargetIdPutResponse, UpdateTemplateSpearTemplatesTemplateIdPutResponse } from './types.gen';

export const getTargetsTargetsGetResponseTransformer = async (data: any): Promise<GetTargetsTargetsGetResponse> => {
    data = data.map((item: any) => {
        return targetSchemaResponseTransformer(item);
    });
    return data;
};

const targetSchemaResponseTransformer = (data: any) => {
    data.created_at = new Date(data.created_at);
    data.updated_at = new Date(data.updated_at);
    return data;
};

export const createTargetTargetsPostResponseTransformer = async (data: any): Promise<CreateTargetTargetsPostResponse> => {
    data = targetSchemaResponseTransformer(data);
    return data;
};

export const getTargetTargetsTargetIdGetResponseTransformer = async (data: any): Promise<GetTargetTargetsTargetIdGetResponse> => {
    data = targetSchemaResponseTransformer(data);
    return data;
};

export const updateTargetTargetsTargetIdPutResponseTransformer = async (data: any): Promise<UpdateTargetTargetsTargetIdPutResponse> => {
    data = targetSchemaResponseTransformer(data);
    return data;
};

export const getTargetByEmailTargetsEmailEmailGetResponseTransformer = async (data: any): Promise<GetTargetByEmailTargetsEmailEmailGetResponse> => {
    data = targetSchemaResponseTransformer(data);
    return data;
};

export const getTargetsByCompanyTargetsCompanyCompanyGetResponseTransformer = async (data: any): Promise<GetTargetsByCompanyTargetsCompanyCompanyGetResponse> => {
    data = data.map((item: any) => {
        return targetSchemaResponseTransformer(item);
    });
    return data;
};

export const searchTargetsByNameTargetsSearchNameGetResponseTransformer = async (data: any): Promise<SearchTargetsByNameTargetsSearchNameGetResponse> => {
    data = data.map((item: any) => {
        return targetSchemaResponseTransformer(item);
    });
    return data;
};

export const getScenariosScenariosGetResponseTransformer = async (data: any): Promise<GetScenariosScenariosGetResponse> => {
    data = data.map((item: any) => {
        return scenarioSchemaResponseTransformer(item);
    });
    return data;
};

const scenarioSchemaResponseTransformer = (data: any) => {
    data.created_at = new Date(data.created_at);
    data.updated_at = new Date(data.updated_at);
    if (data.target) {
        data.target = targetSchemaResponseTransformer(data.target);
    }
    return data;
};

export const createScenarioScenariosPostResponseTransformer = async (data: any): Promise<CreateScenarioScenariosPostResponse> => {
    data = scenarioSchemaResponseTransformer(data);
    return data;
};

export const getScenarioByIdScenariosScenarioIdGetResponseTransformer = async (data: any): Promise<GetScenarioByIdScenariosScenarioIdGetResponse> => {
    data = scenarioSchemaResponseTransformer(data);
    return data;
};

export const updateScenarioScenariosScenarioIdPutResponseTransformer = async (data: any): Promise<UpdateScenarioScenariosScenarioIdPutResponse> => {
    data = scenarioSchemaResponseTransformer(data);
    return data;
};

export const listTemplatesSpearTemplatesGetResponseTransformer = async (data: any): Promise<ListTemplatesSpearTemplatesGetResponse> => {
    data = data.map((item: any) => {
        return spearTemplateSchemaResponseTransformer(item);
    });
    return data;
};

const spearTemplateSchemaResponseTransformer = (data: any) => {
    data.created_at = new Date(data.created_at);
    data.updated_at = new Date(data.updated_at);
    return data;
};

export const createTemplateSpearTemplatesPostResponseTransformer = async (data: any): Promise<CreateTemplateSpearTemplatesPostResponse> => {
    data = spearTemplateSchemaResponseTransformer(data);
    return data;
};

export const listTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetResponseTransformer = async (data: any): Promise<ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetResponse> => {
    data = data.map((item: any) => {
        return spearTemplateSchemaResponseTransformer(item);
    });
    return data;
};

export const getTemplateSpearTemplatesTemplateIdGetResponseTransformer = async (data: any): Promise<GetTemplateSpearTemplatesTemplateIdGetResponse> => {
    data = spearTemplateSchemaResponseTransformer(data);
    return data;
};

export const updateTemplateSpearTemplatesTemplateIdPutResponseTransformer = async (data: any): Promise<UpdateTemplateSpearTemplatesTemplateIdPutResponse> => {
    data = spearTemplateSchemaResponseTransformer(data);
    return data;
};

export const getIdentifiersByTargetIdentifiersTargetsTargetIdGetResponseTransformer = async (data: any): Promise<GetIdentifiersByTargetIdentifiersTargetsTargetIdGetResponse> => {
    data = data.map((item: any) => {
        return targetIdentifierSchemaResponseTransformer(item);
    });
    return data;
};

const targetIdentifierSchemaResponseTransformer = (data: any) => {
    data.created_at = new Date(data.created_at);
    data.updated_at = new Date(data.updated_at);
    return data;
};

export const createIdentifierIdentifiersPostResponseTransformer = async (data: any): Promise<CreateIdentifierIdentifiersPostResponse> => {
    data = targetIdentifierSchemaResponseTransformer(data);
    return data;
};

export const getObservationsByTargetObservationsTargetsTargetIdGetResponseTransformer = async (data: any): Promise<GetObservationsByTargetObservationsTargetsTargetIdGetResponse> => {
    data = data.map((item: any) => {
        return observationSchemaResponseTransformer(item);
    });
    return data;
};

const observationSchemaResponseTransformer = (data: any) => {
    data.created_at = new Date(data.created_at);
    data.updated_at = new Date(data.updated_at);
    return data;
};

export const createObservationObservationsPostResponseTransformer = async (data: any): Promise<CreateObservationObservationsPostResponse> => {
    data = observationSchemaResponseTransformer(data);
    return data;
};

export const getOrgUnitsOrgUnitsGetResponseTransformer = async (data: any): Promise<GetOrgUnitsOrgUnitsGetResponse> => {
    data = data.map((item: any) => {
        return organizationUnitSchemaResponseTransformer(item);
    });
    return data;
};

const organizationUnitSchemaResponseTransformer = (data: any) => {
    data.created_at = new Date(data.created_at);
    data.updated_at = new Date(data.updated_at);
    return data;
};

export const createOrgUnitOrgUnitsPostResponseTransformer = async (data: any): Promise<CreateOrgUnitOrgUnitsPostResponse> => {
    data = organizationUnitSchemaResponseTransformer(data);
    return data;
};

export const getOrgUnitByIdOrgUnitsOrgUnitIdGetResponseTransformer = async (data: any): Promise<GetOrgUnitByIdOrgUnitsOrgUnitIdGetResponse> => {
    data = organizationUnitSchemaResponseTransformer(data);
    return data;
};

export const updateOrgUnitOrgUnitsOrgUnitIdPutResponseTransformer = async (data: any): Promise<UpdateOrgUnitOrgUnitsOrgUnitIdPutResponse> => {
    data = organizationUnitSchemaResponseTransformer(data);
    return data;
};

export const listSettingsSettingsGetResponseTransformer = async (data: any): Promise<ListSettingsSettingsGetResponse> => {
    data = data.map((item: any) => {
        return settingResponseSchemaResponseTransformer(item);
    });
    return data;
};

const settingResponseSchemaResponseTransformer = (data: any) => {
    data.created_at = new Date(data.created_at);
    data.updated_at = new Date(data.updated_at);
    return data;
};

export const createSettingSettingsPostResponseTransformer = async (data: any): Promise<CreateSettingSettingsPostResponse> => {
    data = settingSchemaResponseTransformer(data);
    return data;
};

const settingSchemaResponseTransformer = (data: any) => {
    data.created_at = new Date(data.created_at);
    data.updated_at = new Date(data.updated_at);
    return data;
};

export const getSettingSettingsSettingIdGetResponseTransformer = async (data: any): Promise<GetSettingSettingsSettingIdGetResponse> => {
    data = settingResponseSchemaResponseTransformer(data);
    return data;
};

export const updateSettingSettingsSettingIdPutResponseTransformer = async (data: any): Promise<UpdateSettingSettingsSettingIdPutResponse> => {
    data = settingSchemaResponseTransformer(data);
    return data;
};

export const getSettingByKeySettingsKeyKeyGetResponseTransformer = async (data: any): Promise<GetSettingByKeySettingsKeyKeyGetResponse> => {
    data = settingResponseSchemaResponseTransformer(data);
    return data;
};

export const updateSettingByKeySettingsKeyKeyPutResponseTransformer = async (data: any): Promise<UpdateSettingByKeySettingsKeyKeyPutResponse> => {
    data = settingSchemaResponseTransformer(data);
    return data;
};

export const getSettingsByCategorySettingsCategoryCategoryGetResponseTransformer = async (data: any): Promise<GetSettingsByCategorySettingsCategoryCategoryGetResponse> => {
    data = data.map((item: any) => {
        return settingResponseSchemaResponseTransformer(item);
    });
    return data;
};

export const listUsersMicrosoftGraphUsersGetResponseTransformer = async (data: any): Promise<ListUsersMicrosoftGraphUsersGetResponse> => {
    data = usersListResponseSchemaResponseTransformer(data);
    return data;
};

const usersListResponseSchemaResponseTransformer = (data: any) => {
    data.users = data.users.map((item: any) => {
        return graphUserSchemaResponseTransformer(item);
    });
    return data;
};

const graphUserSchemaResponseTransformer = (data: any) => {
    if (data.createdDateTime) {
        data.createdDateTime = new Date(data.createdDateTime);
    }
    if (data.lastSignInDateTime) {
        data.lastSignInDateTime = new Date(data.lastSignInDateTime);
    }
    return data;
};

export const getUserMicrosoftGraphUsersUserIdGetResponseTransformer = async (data: any): Promise<GetUserMicrosoftGraphUsersUserIdGetResponse> => {
    data = userDetailResponseSchemaResponseTransformer(data);
    return data;
};

const userDetailResponseSchemaResponseTransformer = (data: any) => {
    data.user = graphUserSchemaResponseTransformer(data.user);
    if (data.manager) {
        data.manager = graphUserSchemaResponseTransformer(data.manager);
    }
    if (data.direct_reports) {
        data.direct_reports = data.direct_reports.map((item: any) => {
            return graphUserSchemaResponseTransformer(item);
        });
    }
    if (data.groups) {
        data.groups = data.groups.map((item: any) => {
            return graphGroupSchemaResponseTransformer(item);
        });
    }
    return data;
};

const graphGroupSchemaResponseTransformer = (data: any) => {
    if (data.createdDateTime) {
        data.createdDateTime = new Date(data.createdDateTime);
    }
    return data;
};

export const searchUsersMicrosoftGraphUsersSearchPostResponseTransformer = async (data: any): Promise<SearchUsersMicrosoftGraphUsersSearchPostResponse> => {
    data = usersListResponseSchemaResponseTransformer(data);
    return data;
};

export const listGroupsMicrosoftGraphGroupsGetResponseTransformer = async (data: any): Promise<ListGroupsMicrosoftGraphGroupsGetResponse> => {
    data = groupsListResponseSchemaResponseTransformer(data);
    return data;
};

const groupsListResponseSchemaResponseTransformer = (data: any) => {
    data.groups = data.groups.map((item: any) => {
        return graphGroupSchemaResponseTransformer(item);
    });
    return data;
};

export const getGroupMicrosoftGraphGroupsGroupIdGetResponseTransformer = async (data: any): Promise<GetGroupMicrosoftGraphGroupsGroupIdGetResponse> => {
    data = groupDetailResponseSchemaResponseTransformer(data);
    return data;
};

const groupDetailResponseSchemaResponseTransformer = (data: any) => {
    data.group = graphGroupSchemaResponseTransformer(data.group);
    if (data.members) {
        data.members = data.members.map((item: any) => {
            return graphUserSchemaResponseTransformer(item);
        });
    }
    return data;
};

export const searchGroupsMicrosoftGraphGroupsSearchPostResponseTransformer = async (data: any): Promise<SearchGroupsMicrosoftGraphGroupsSearchPostResponse> => {
    data = groupsListResponseSchemaResponseTransformer(data);
    return data;
};

export const getOrganizationMicrosoftGraphOrganizationGetResponseTransformer = async (data: any): Promise<GetOrganizationMicrosoftGraphOrganizationGetResponse> => {
    data = organizationResponseSchemaResponseTransformer(data);
    return data;
};

const organizationResponseSchemaResponseTransformer = (data: any) => {
    data.organization = graphOrganizationSchemaResponseTransformer(data.organization);
    return data;
};

const graphOrganizationSchemaResponseTransformer = (data: any) => {
    if (data.createdDateTime) {
        data.createdDateTime = new Date(data.createdDateTime);
    }
    return data;
};
