// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseURL: 'http://localhost' | (string & {});
};

/**
 * BulkSettingsUpdate
 *
 * Schema for bulk updating multiple settings
 */
export type BulkSettingsUpdate = {
    /**
     * Settings
     *
     * Dictionary of setting keys to values
     */
    settings: {
        [key: string]: string;
    };
};

/**
 * ChatMessage
 */
export type ChatMessage = {
    /**
     * Role
     *
     * Message role: 'system' | 'user' | 'assistant'
     */
    role: string;
    /**
     * Content
     */
    content: string;
};

/**
 * ConnectionTestResponse
 *
 * Response model for connection test
 */
export type ConnectionTestResponse = {
    /**
     * Status
     *
     * Connection status (success/error)
     */
    status: string;
    /**
     * Message
     *
     * Status message
     */
    message: string;
    /**
     * Organization
     *
     * Organization name
     */
    organization?: string | null;
    /**
     * Verified Tenant Id
     *
     * Verified tenant ID
     */
    verified_tenant_id?: string | null;
    /**
     * Users Accessible
     *
     * Whether users can be accessed
     */
    users_accessible?: boolean;
    /**
     * Permissions Verified
     *
     * Whether permissions are verified
     */
    permissions_verified?: boolean;
    /**
     * Error Code
     *
     * Error code if failed
     */
    error_code?: string | null;
};

/**
 * EnqueueHunterIOEmailFinderPayload
 *
 * Payload for HunterIO email finder task.
 */
export type EnqueueHunterIoEmailFinderPayload = {
    /**
     * Target Id
     */
    target_id: string;
    /**
     * Domain
     */
    domain: string;
    /**
     * First Name
     */
    first_name: string;
    /**
     * Last Name
     */
    last_name: string;
    /**
     * Company
     */
    company?: string;
};

/**
 * EnqueueHunterIOEmailPayload
 *
 * Payload for HunterIO email enrichment task.
 */
export type EnqueueHunterIoEmailPayload = {
    /**
     * Target Id
     */
    target_id: string;
    /**
     * Email
     */
    email: string;
};

/**
 * GenerateRequest
 */
export type GenerateRequest = {
    /**
     * Model
     *
     * Model identifier (e.g., 'openai/gpt-4o')
     */
    model?: string | null;
    /**
     * Messages
     */
    messages: Array<ChatMessage>;
    /**
     * Temperature
     */
    temperature?: number | null;
    /**
     * Max Tokens
     */
    max_tokens?: number | null;
    /**
     * Extra
     */
    extra?: {
        [key: string]: unknown;
    } | null;
};

/**
 * GenerateResponse
 */
export type GenerateResponse = {
    /**
     * Text
     */
    text: string;
    /**
     * Raw
     */
    raw: {
        [key: string]: unknown;
    };
};

/**
 * GraphDomain
 *
 * Microsoft Graph Domain object
 */
export type GraphDomain = {
    /**
     * Id
     *
     * Domain name
     */
    id: string;
    /**
     * Authenticationtype
     */
    authenticationType?: string | null;
    /**
     * Availabilitystatus
     */
    availabilityStatus?: string | null;
    /**
     * Isadminmanaged
     */
    isAdminManaged?: boolean | null;
    /**
     * Isdefault
     */
    isDefault?: boolean | null;
    /**
     * Isinitial
     */
    isInitial?: boolean | null;
    /**
     * Isroot
     */
    isRoot?: boolean | null;
    /**
     * Isverified
     */
    isVerified?: boolean | null;
    /**
     * Supportedservices
     */
    supportedServices?: Array<string> | null;
};

/**
 * GraphGroup
 *
 * Microsoft Graph Group object
 */
export type GraphGroup = {
    /**
     * Id
     *
     * Unique identifier
     */
    id: string;
    /**
     * Displayname
     */
    displayName?: string | null;
    /**
     * Description
     *
     * Group description
     */
    description?: string | null;
    /**
     * Mail
     *
     * Group email address
     */
    mail?: string | null;
    /**
     * Mailenabled
     */
    mailEnabled?: boolean | null;
    /**
     * Mailnickname
     */
    mailNickname?: string | null;
    /**
     * Securityenabled
     */
    securityEnabled?: boolean | null;
    /**
     * Grouptypes
     */
    groupTypes?: Array<string> | null;
    /**
     * Createddatetime
     */
    createdDateTime?: Date | null;
};

/**
 * GraphGroupType
 *
 * Microsoft Graph group types
 */
export const GraphGroupType = {
    UNIFIED: 'Unified',
    SECURITY: 'Security',
    DISTRIBUTION: 'Distribution'
} as const;

/**
 * GraphGroupType
 *
 * Microsoft Graph group types
 */
export type GraphGroupType = typeof GraphGroupType[keyof typeof GraphGroupType];

/**
 * GraphOrganization
 *
 * Microsoft Graph Organization object
 */
export type GraphOrganization = {
    /**
     * Id
     *
     * Tenant ID
     */
    id: string;
    /**
     * Displayname
     */
    displayName?: string | null;
    /**
     * Verifieddomains
     */
    verifiedDomains?: Array<{
        [key: string]: unknown;
    }> | null;
    /**
     * Businessphones
     */
    businessPhones?: Array<string> | null;
    /**
     * City
     *
     * City
     */
    city?: string | null;
    /**
     * Country
     *
     * Country
     */
    country?: string | null;
    /**
     * Countrylettercode
     */
    countryLetterCode?: string | null;
    /**
     * State
     *
     * State
     */
    state?: string | null;
    /**
     * Street
     *
     * Street address
     */
    street?: string | null;
    /**
     * Postalcode
     */
    postalCode?: string | null;
    /**
     * Createddatetime
     */
    createdDateTime?: Date | null;
};

/**
 * GraphUser
 *
 * Microsoft Graph User object
 */
export type GraphUser = {
    /**
     * Id
     *
     * Unique identifier
     */
    id: string;
    /**
     * Displayname
     */
    displayName?: string | null;
    /**
     * Givenname
     */
    givenName?: string | null;
    /**
     * Surname
     */
    surname?: string | null;
    /**
     * Userprincipalname
     */
    userPrincipalName?: string | null;
    /**
     * Mail
     *
     * Primary email address
     */
    mail?: string | null;
    /**
     * Jobtitle
     */
    jobTitle?: string | null;
    /**
     * Department
     *
     * Department
     */
    department?: string | null;
    /**
     * Companyname
     */
    companyName?: string | null;
    /**
     * Officelocation
     */
    officeLocation?: string | null;
    /**
     * Businessphones
     */
    businessPhones?: Array<string> | null;
    /**
     * Mobilephone
     */
    mobilePhone?: string | null;
    userType?: GraphUserType | null;
    /**
     * Accountenabled
     */
    accountEnabled?: boolean | null;
    /**
     * Createddatetime
     */
    createdDateTime?: Date | null;
    /**
     * Lastsignindatetime
     */
    lastSignInDateTime?: Date | null;
};

/**
 * GraphUserType
 *
 * Microsoft Graph user types
 */
export const GraphUserType = {
    MEMBER: 'Member',
    GUEST: 'Guest'
} as const;

/**
 * GraphUserType
 *
 * Microsoft Graph user types
 */
export type GraphUserType = typeof GraphUserType[keyof typeof GraphUserType];

/**
 * GroupDetailResponse
 *
 * Response model for group details with members
 */
export type GroupDetailResponse = {
    /**
     * Group information
     */
    group: GraphGroup;
    /**
     * Members
     *
     * Group members
     */
    members?: Array<GraphUser>;
    /**
     * Member Count
     *
     * Number of members
     */
    member_count?: number;
};

/**
 * GroupSearchRequest
 *
 * Request model for advanced group search
 */
export type GroupSearchRequest = {
    /**
     * Query
     *
     * Search query
     */
    query?: string | null;
    /**
     * Filter by group type
     */
    group_type?: GraphGroupType | null;
    /**
     * Mail Enabled
     *
     * Filter by mail enabled status
     */
    mail_enabled?: boolean | null;
    /**
     * Security Enabled
     *
     * Filter by security enabled status
     */
    security_enabled?: boolean | null;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Skip
     */
    skip?: number;
};

/**
 * GroupsListResponse
 *
 * Response model for listing groups
 */
export type GroupsListResponse = {
    /**
     * Groups
     *
     * List of groups
     */
    groups: Array<GraphGroup>;
    /**
     * Total Count
     *
     * Total number of groups (if search is used)
     */
    total_count?: number | null;
    /**
     * Next Link
     *
     * URL for next page of results
     */
    next_link?: string | null;
    /**
     * Has More
     *
     * Whether there are more results
     */
    has_more?: boolean;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * JobRequest
 *
 * Generic job request payload.
 *
 * - type: logical job type identifier (e.g., "hunterio.enrich_email")
 * - payload: free-form JSON payload to pass to workers
 */
export type JobRequest = {
    /**
     * Type
     */
    type: string;
    /**
     * Payload
     */
    payload?: {
        [key: string]: unknown;
    };
};

/**
 * JobRequestResponse
 *
 * Response containing the assigned job identifier.
 */
export type JobRequestResponse = {
    /**
     * Job Id
     */
    job_id: string;
};

/**
 * MicrosoftGraphCredentials
 *
 * Schema for Microsoft Graph credentials
 */
export type MicrosoftGraphCredentials = {
    /**
     * Client Id
     *
     * Azure AD Application (client) ID
     */
    client_id: string;
    /**
     * Client Secret
     *
     * Azure AD Application client secret
     */
    client_secret: string;
    /**
     * Tenant Id
     *
     * Azure AD Tenant ID
     */
    tenant_id: string;
    /**
     * Scope
     *
     * OAuth scope
     */
    scope?: string;
};

/**
 * Observation
 */
export type Observation = {
    /**
     * Target Id
     */
    target_id: string;
    /**
     * Kind
     */
    kind?: string | null;
    /**
     * Data
     */
    data?: {
        [key: string]: unknown;
    } | null;
    /**
     * Confidence
     */
    confidence?: number | null;
    /**
     * Id
     */
    id: string;
    /**
     * Created At
     */
    created_at: Date;
    /**
     * Updated At
     */
    updated_at: Date;
};

/**
 * ObservationBase
 */
export type ObservationBase = {
    /**
     * Target Id
     */
    target_id: string;
    /**
     * Kind
     */
    kind?: string | null;
    /**
     * Data
     */
    data?: {
        [key: string]: unknown;
    } | null;
    /**
     * Confidence
     */
    confidence?: number | null;
};

/**
 * OrganizationResponse
 *
 * Response model for organization information
 */
export type OrganizationResponse = {
    /**
     * Organization details
     */
    organization: GraphOrganization;
    /**
     * Domains
     *
     * Organization domains
     */
    domains?: Array<GraphDomain>;
    /**
     * Primary Domain
     *
     * Primary domain name
     */
    primary_domain?: string | null;
};

/**
 * OrganizationUnit
 */
export type OrganizationUnit = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Id
     */
    id: string;
    /**
     * Created At
     */
    created_at: Date;
    /**
     * Updated At
     */
    updated_at: Date;
    /**
     * Target Count
     */
    target_count?: number;
};

/**
 * OrganizationUnitCreate
 */
export type OrganizationUnitCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * OrganizationUnitUpdate
 */
export type OrganizationUnitUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * Scenario
 *
 * Complete scenario schema with all fields.
 */
export type Scenario = {
    /**
     * Target Id
     */
    target_id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Scenario Type
     */
    scenario_type: string;
    /**
     * Config
     */
    config?: {
        [key: string]: unknown;
    } | null;
    /**
     * Id
     */
    id: string;
    /**
     * Created At
     */
    created_at: Date;
    /**
     * Updated At
     */
    updated_at: Date;
    target?: Target | null;
};

/**
 * ScenarioCreate
 *
 * Schema for creating a new scenario.
 */
export type ScenarioCreate = {
    /**
     * Target Id
     */
    target_id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Scenario Type
     */
    scenario_type: string;
    /**
     * Config
     */
    config?: {
        [key: string]: unknown;
    } | null;
};

/**
 * ScenarioUpdate
 *
 * Schema for updating a scenario.
 */
export type ScenarioUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Config
     */
    config?: {
        [key: string]: unknown;
    } | null;
};

/**
 * Setting
 *
 * Schema for returning settings
 */
export type Setting = {
    /**
     * Key
     *
     * Unique setting identifier (e.g., 'microsoft_graph.client_id')
     */
    key: string;
    /**
     * Value
     *
     * Setting value (will be encrypted if sensitive)
     */
    value: string;
    /**
     * Type of the setting value
     */
    value_type?: SettingValueType;
    /**
     * Description
     *
     * Human readable description
     */
    description?: string | null;
    /**
     * Is Sensitive
     *
     * Whether value should be encrypted
     */
    is_sensitive?: boolean;
    /**
     * Is Required
     *
     * Whether setting is required for functionality
     */
    is_required?: boolean;
    /**
     * Setting category
     */
    category?: SettingCategory;
    /**
     * Is Active
     *
     * Whether the setting is active
     */
    is_active?: boolean;
    /**
     * Default Value
     *
     * Default value for reference
     */
    default_value?: string | null;
    /**
     * Validation Pattern
     *
     * Regex pattern for validation
     */
    validation_pattern?: string | null;
    /**
     * Id
     */
    id: string;
    /**
     * Created At
     */
    created_at: Date;
    /**
     * Updated At
     */
    updated_at: Date;
};

/**
 * SettingCategory
 *
 * Categories for organizing settings
 */
export const SettingCategory = {
    INTEGRATION: 'integration',
    SECURITY: 'security',
    GENERAL: 'general',
    NOTIFICATION: 'notification',
    STORAGE: 'storage'
} as const;

/**
 * SettingCategory
 *
 * Categories for organizing settings
 */
export type SettingCategory = typeof SettingCategory[keyof typeof SettingCategory];

/**
 * SettingCreate
 *
 * Schema for creating settings
 */
export type SettingCreate = {
    /**
     * Key
     *
     * Unique setting identifier (e.g., 'microsoft_graph.client_id')
     */
    key: string;
    /**
     * Value
     *
     * Setting value (will be encrypted if sensitive)
     */
    value: string;
    /**
     * Type of the setting value
     */
    value_type?: SettingValueType;
    /**
     * Description
     *
     * Human readable description
     */
    description?: string | null;
    /**
     * Is Sensitive
     *
     * Whether value should be encrypted
     */
    is_sensitive?: boolean;
    /**
     * Is Required
     *
     * Whether setting is required for functionality
     */
    is_required?: boolean;
    /**
     * Setting category
     */
    category?: SettingCategory;
    /**
     * Is Active
     *
     * Whether the setting is active
     */
    is_active?: boolean;
    /**
     * Default Value
     *
     * Default value for reference
     */
    default_value?: string | null;
    /**
     * Validation Pattern
     *
     * Regex pattern for validation
     */
    validation_pattern?: string | null;
};

/**
 * SettingResponse
 *
 * Schema for returning settings with potentially obfuscated values
 */
export type SettingResponse = {
    /**
     * Id
     */
    id: string;
    /**
     * Key
     */
    key: string;
    /**
     * Value
     */
    value: string;
    /**
     * Display Value
     */
    display_value: string;
    value_type: SettingValueType;
    /**
     * Description
     */
    description: string | null;
    /**
     * Is Sensitive
     */
    is_sensitive: boolean;
    /**
     * Is Required
     */
    is_required: boolean;
    category: SettingCategory;
    /**
     * Is Active
     */
    is_active: boolean;
    /**
     * Default Value
     */
    default_value: string | null;
    /**
     * Validation Pattern
     */
    validation_pattern: string | null;
    /**
     * Created At
     */
    created_at: Date;
    /**
     * Updated At
     */
    updated_at: Date;
};

/**
 * SettingUpdate
 *
 * Schema for updating settings
 */
export type SettingUpdate = {
    /**
     * Value
     *
     * Setting value
     */
    value?: string | null;
    /**
     * Description
     *
     * Human readable description
     */
    description?: string | null;
    /**
     * Is Active
     *
     * Whether the setting is active
     */
    is_active?: boolean | null;
    /**
     * Validation Pattern
     *
     * Regex pattern for validation
     */
    validation_pattern?: string | null;
};

/**
 * SettingValueType
 *
 * Types of setting values
 */
export const SettingValueType = {
    STRING: 'string',
    INTEGER: 'integer',
    BOOLEAN: 'boolean',
    JSON: 'json',
    PASSWORD: 'password',
    OAUTH_TOKEN: 'oauth_token'
} as const;

/**
 * SettingValueType
 *
 * Types of setting values
 */
export type SettingValueType = typeof SettingValueType[keyof typeof SettingValueType];

/**
 * SpearTemplate
 *
 * Complete spear template schema with all fields.
 */
export type SpearTemplate = {
    /**
     * Scenario Id
     */
    scenario_id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Subject
     */
    subject?: string | null;
    /**
     * Body
     */
    body: string;
    /**
     * Status
     */
    status: string;
    /**
     * Id
     */
    id: string;
    /**
     * Created At
     */
    created_at: Date;
    /**
     * Updated At
     */
    updated_at: Date;
};

/**
 * SpearTemplateCreate
 *
 * Schema for creating a new spear template.
 */
export type SpearTemplateCreate = {
    /**
     * Scenario Id
     */
    scenario_id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Subject
     */
    subject?: string | null;
    /**
     * Body
     */
    body: string;
    /**
     * Status
     */
    status: string;
};

/**
 * SpearTemplateUpdate
 *
 * Schema for updating a spear template.
 */
export type SpearTemplateUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Subject
     */
    subject?: string | null;
    /**
     * Body
     */
    body?: string | null;
    /**
     * Status
     */
    status?: string | null;
};

/**
 * Target
 *
 * Complete target schema with all fields.
 */
export type Target = {
    /**
     * Email
     */
    email?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Company
     */
    company?: string | null;
    /**
     * Role
     */
    role?: string | null;
    /**
     * Org Unit
     */
    org_unit?: string | null;
    /**
     * Org Unit Id
     */
    org_unit_id?: string | null;
    /**
     * Id
     */
    id: string;
    /**
     * Created At
     */
    created_at: Date;
    /**
     * Updated At
     */
    updated_at: Date;
};

/**
 * TargetCreate
 *
 * Schema for creating a new target.
 */
export type TargetCreate = {
    /**
     * Email
     */
    email?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Company
     */
    company?: string | null;
    /**
     * Role
     */
    role?: string | null;
    /**
     * Org Unit
     */
    org_unit?: string | null;
    /**
     * Org Unit Id
     */
    org_unit_id?: string | null;
};

/**
 * TargetIdentifier
 */
export type TargetIdentifier = {
    /**
     * Target Id
     */
    target_id: string;
    /**
     * Type
     */
    type?: string | null;
    /**
     * Value
     */
    value?: string | null;
    /**
     * Confidence
     */
    confidence?: number | null;
    /**
     * Verified
     */
    verified?: boolean | null;
    /**
     * Id
     */
    id: string;
    /**
     * Created At
     */
    created_at: Date;
    /**
     * Updated At
     */
    updated_at: Date;
};

/**
 * TargetIdentifierBase
 */
export type TargetIdentifierBase = {
    /**
     * Target Id
     */
    target_id: string;
    /**
     * Type
     */
    type?: string | null;
    /**
     * Value
     */
    value?: string | null;
    /**
     * Confidence
     */
    confidence?: number | null;
    /**
     * Verified
     */
    verified?: boolean | null;
};

/**
 * TargetUpdate
 *
 * Schema for updating a target.
 */
export type TargetUpdate = {
    /**
     * Email
     */
    email?: string | null;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Company
     */
    company?: string | null;
    /**
     * Role
     */
    role?: string | null;
    /**
     * Org Unit
     */
    org_unit?: string | null;
    /**
     * Org Unit Id
     */
    org_unit_id?: string | null;
};

/**
 * UserDetailResponse
 *
 * Response model for user details with additional information
 */
export type UserDetailResponse = {
    /**
     * User information
     */
    user: GraphUser;
    /**
     * User's manager
     */
    manager?: GraphUser | null;
    /**
     * Direct Reports
     *
     * User's direct reports
     */
    direct_reports?: Array<GraphUser>;
    /**
     * Groups
     *
     * Groups user belongs to
     */
    groups?: Array<GraphGroup>;
};

/**
 * UserSearchRequest
 *
 * Request model for advanced user search
 */
export type UserSearchRequest = {
    /**
     * Query
     *
     * Search query
     */
    query?: string | null;
    /**
     * Department
     *
     * Filter by department
     */
    department?: string | null;
    /**
     * Job Title
     *
     * Filter by job title
     */
    job_title?: string | null;
    /**
     * Company
     *
     * Filter by company
     */
    company?: string | null;
    /**
     * Filter by user type
     */
    user_type?: GraphUserType | null;
    /**
     * Account Enabled
     *
     * Filter by account status
     */
    account_enabled?: boolean | null;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Skip
     */
    skip?: number;
};

/**
 * UsersListResponse
 *
 * Response model for listing users
 */
export type UsersListResponse = {
    /**
     * Users
     *
     * List of users
     */
    users: Array<GraphUser>;
    /**
     * Total Count
     *
     * Total number of users (if search is used)
     */
    total_count?: number | null;
    /**
     * Next Link
     *
     * URL for next page of results
     */
    next_link?: string | null;
    /**
     * Has More
     *
     * Whether there are more results
     */
    has_more?: boolean;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type GetTargetsTargetsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         *
         * Number of records to skip
         */
        skip?: number;
        /**
         * Limit
         *
         * Maximum number of records to return
         */
        limit?: number;
    };
    url: '/targets';
};

export type GetTargetsTargetsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTargetsTargetsGetError = GetTargetsTargetsGetErrors[keyof GetTargetsTargetsGetErrors];

export type GetTargetsTargetsGetResponses = {
    /**
     * Response Get Targets Targets Get
     *
     * Successful Response
     */
    200: Array<Target>;
};

export type GetTargetsTargetsGetResponse = GetTargetsTargetsGetResponses[keyof GetTargetsTargetsGetResponses];

export type CreateTargetTargetsPostData = {
    body: TargetCreate;
    path?: never;
    query?: never;
    url: '/targets';
};

export type CreateTargetTargetsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTargetTargetsPostError = CreateTargetTargetsPostErrors[keyof CreateTargetTargetsPostErrors];

export type CreateTargetTargetsPostResponses = {
    /**
     * Successful Response
     */
    200: Target;
};

export type CreateTargetTargetsPostResponse = CreateTargetTargetsPostResponses[keyof CreateTargetTargetsPostResponses];

export type DeleteTargetTargetsTargetIdDeleteData = {
    body?: never;
    path: {
        /**
         * Target Id
         */
        target_id: string;
    };
    query?: never;
    url: '/targets/{target_id}';
};

export type DeleteTargetTargetsTargetIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTargetTargetsTargetIdDeleteError = DeleteTargetTargetsTargetIdDeleteErrors[keyof DeleteTargetTargetsTargetIdDeleteErrors];

export type DeleteTargetTargetsTargetIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetTargetTargetsTargetIdGetData = {
    body?: never;
    path: {
        /**
         * Target Id
         */
        target_id: string;
    };
    query?: never;
    url: '/targets/{target_id}';
};

export type GetTargetTargetsTargetIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTargetTargetsTargetIdGetError = GetTargetTargetsTargetIdGetErrors[keyof GetTargetTargetsTargetIdGetErrors];

export type GetTargetTargetsTargetIdGetResponses = {
    /**
     * Successful Response
     */
    200: Target;
};

export type GetTargetTargetsTargetIdGetResponse = GetTargetTargetsTargetIdGetResponses[keyof GetTargetTargetsTargetIdGetResponses];

export type UpdateTargetTargetsTargetIdPutData = {
    body: TargetUpdate;
    path: {
        /**
         * Target Id
         */
        target_id: string;
    };
    query?: never;
    url: '/targets/{target_id}';
};

export type UpdateTargetTargetsTargetIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTargetTargetsTargetIdPutError = UpdateTargetTargetsTargetIdPutErrors[keyof UpdateTargetTargetsTargetIdPutErrors];

export type UpdateTargetTargetsTargetIdPutResponses = {
    /**
     * Successful Response
     */
    200: Target;
};

export type UpdateTargetTargetsTargetIdPutResponse = UpdateTargetTargetsTargetIdPutResponses[keyof UpdateTargetTargetsTargetIdPutResponses];

export type GetTargetByEmailTargetsEmailEmailGetData = {
    body?: never;
    path: {
        /**
         * Email
         */
        email: string;
    };
    query?: never;
    url: '/targets/email/{email}';
};

export type GetTargetByEmailTargetsEmailEmailGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTargetByEmailTargetsEmailEmailGetError = GetTargetByEmailTargetsEmailEmailGetErrors[keyof GetTargetByEmailTargetsEmailEmailGetErrors];

export type GetTargetByEmailTargetsEmailEmailGetResponses = {
    /**
     * Successful Response
     */
    200: Target;
};

export type GetTargetByEmailTargetsEmailEmailGetResponse = GetTargetByEmailTargetsEmailEmailGetResponses[keyof GetTargetByEmailTargetsEmailEmailGetResponses];

export type GetTargetsByCompanyTargetsCompanyCompanyGetData = {
    body?: never;
    path: {
        /**
         * Company
         */
        company: string;
    };
    query?: {
        /**
         * Skip
         *
         * Number of records to skip
         */
        skip?: number;
        /**
         * Limit
         *
         * Maximum number of records to return
         */
        limit?: number;
    };
    url: '/targets/company/{company}';
};

export type GetTargetsByCompanyTargetsCompanyCompanyGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTargetsByCompanyTargetsCompanyCompanyGetError = GetTargetsByCompanyTargetsCompanyCompanyGetErrors[keyof GetTargetsByCompanyTargetsCompanyCompanyGetErrors];

export type GetTargetsByCompanyTargetsCompanyCompanyGetResponses = {
    /**
     * Response Get Targets By Company Targets Company  Company  Get
     *
     * Successful Response
     */
    200: Array<Target>;
};

export type GetTargetsByCompanyTargetsCompanyCompanyGetResponse = GetTargetsByCompanyTargetsCompanyCompanyGetResponses[keyof GetTargetsByCompanyTargetsCompanyCompanyGetResponses];

export type SearchTargetsByNameTargetsSearchNameGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Name
         *
         * Name to search for
         */
        name: string;
        /**
         * Skip
         *
         * Number of records to skip
         */
        skip?: number;
        /**
         * Limit
         *
         * Maximum number of records to return
         */
        limit?: number;
    };
    url: '/targets/search/name';
};

export type SearchTargetsByNameTargetsSearchNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SearchTargetsByNameTargetsSearchNameGetError = SearchTargetsByNameTargetsSearchNameGetErrors[keyof SearchTargetsByNameTargetsSearchNameGetErrors];

export type SearchTargetsByNameTargetsSearchNameGetResponses = {
    /**
     * Response Search Targets By Name Targets Search Name Get
     *
     * Successful Response
     */
    200: Array<Target>;
};

export type SearchTargetsByNameTargetsSearchNameGetResponse = SearchTargetsByNameTargetsSearchNameGetResponses[keyof SearchTargetsByNameTargetsSearchNameGetResponses];

export type GetScenariosScenariosGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         *
         * Number of records to skip
         */
        skip?: number;
        /**
         * Limit
         *
         * Maximum number of records to return
         */
        limit?: number;
        /**
         * Include Target
         *
         * Whether to include the target in the result
         */
        include_target?: boolean;
    };
    url: '/scenarios';
};

export type GetScenariosScenariosGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetScenariosScenariosGetError = GetScenariosScenariosGetErrors[keyof GetScenariosScenariosGetErrors];

export type GetScenariosScenariosGetResponses = {
    /**
     * Response Get Scenarios Scenarios Get
     *
     * Successful Response
     */
    200: Array<Scenario>;
};

export type GetScenariosScenariosGetResponse = GetScenariosScenariosGetResponses[keyof GetScenariosScenariosGetResponses];

export type CreateScenarioScenariosPostData = {
    body: ScenarioCreate;
    path?: never;
    query?: never;
    url: '/scenarios';
};

export type CreateScenarioScenariosPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateScenarioScenariosPostError = CreateScenarioScenariosPostErrors[keyof CreateScenarioScenariosPostErrors];

export type CreateScenarioScenariosPostResponses = {
    /**
     * Successful Response
     */
    200: Scenario;
};

export type CreateScenarioScenariosPostResponse = CreateScenarioScenariosPostResponses[keyof CreateScenarioScenariosPostResponses];

export type DeleteScenarioScenariosScenarioIdDeleteData = {
    body?: never;
    path: {
        /**
         * Scenario Id
         */
        scenario_id: string;
    };
    query?: never;
    url: '/scenarios/{scenario_id}';
};

export type DeleteScenarioScenariosScenarioIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteScenarioScenariosScenarioIdDeleteError = DeleteScenarioScenariosScenarioIdDeleteErrors[keyof DeleteScenarioScenariosScenarioIdDeleteErrors];

export type DeleteScenarioScenariosScenarioIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetScenarioByIdScenariosScenarioIdGetData = {
    body?: never;
    path: {
        /**
         * Scenario Id
         */
        scenario_id: string;
    };
    query?: never;
    url: '/scenarios/{scenario_id}';
};

export type GetScenarioByIdScenariosScenarioIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetScenarioByIdScenariosScenarioIdGetError = GetScenarioByIdScenariosScenarioIdGetErrors[keyof GetScenarioByIdScenariosScenarioIdGetErrors];

export type GetScenarioByIdScenariosScenarioIdGetResponses = {
    /**
     * Successful Response
     */
    200: Scenario;
};

export type GetScenarioByIdScenariosScenarioIdGetResponse = GetScenarioByIdScenariosScenarioIdGetResponses[keyof GetScenarioByIdScenariosScenarioIdGetResponses];

export type UpdateScenarioScenariosScenarioIdPutData = {
    body: ScenarioUpdate;
    path: {
        /**
         * Scenario Id
         */
        scenario_id: string;
    };
    query?: never;
    url: '/scenarios/{scenario_id}';
};

export type UpdateScenarioScenariosScenarioIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateScenarioScenariosScenarioIdPutError = UpdateScenarioScenariosScenarioIdPutErrors[keyof UpdateScenarioScenariosScenarioIdPutErrors];

export type UpdateScenarioScenariosScenarioIdPutResponses = {
    /**
     * Successful Response
     */
    200: Scenario;
};

export type UpdateScenarioScenariosScenarioIdPutResponse = UpdateScenarioScenariosScenarioIdPutResponses[keyof UpdateScenarioScenariosScenarioIdPutResponses];

export type ListTemplatesSpearTemplatesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/spear-templates';
};

export type ListTemplatesSpearTemplatesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListTemplatesSpearTemplatesGetError = ListTemplatesSpearTemplatesGetErrors[keyof ListTemplatesSpearTemplatesGetErrors];

export type ListTemplatesSpearTemplatesGetResponses = {
    /**
     * Response List Templates Spear Templates Get
     *
     * Successful Response
     */
    200: Array<SpearTemplate>;
};

export type ListTemplatesSpearTemplatesGetResponse = ListTemplatesSpearTemplatesGetResponses[keyof ListTemplatesSpearTemplatesGetResponses];

export type CreateTemplateSpearTemplatesPostData = {
    body: SpearTemplateCreate;
    path?: never;
    query?: never;
    url: '/spear-templates';
};

export type CreateTemplateSpearTemplatesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTemplateSpearTemplatesPostError = CreateTemplateSpearTemplatesPostErrors[keyof CreateTemplateSpearTemplatesPostErrors];

export type CreateTemplateSpearTemplatesPostResponses = {
    /**
     * Successful Response
     */
    200: SpearTemplate;
};

export type CreateTemplateSpearTemplatesPostResponse = CreateTemplateSpearTemplatesPostResponses[keyof CreateTemplateSpearTemplatesPostResponses];

export type ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetData = {
    body?: never;
    path: {
        /**
         * Scenario Id
         */
        scenario_id: string;
    };
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/spear-templates/scenario/{scenario_id}';
};

export type ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetError = ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetErrors[keyof ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetErrors];

export type ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetResponses = {
    /**
     * Response List Templates For Scenario Spear Templates Scenario  Scenario Id  Get
     *
     * Successful Response
     */
    200: Array<SpearTemplate>;
};

export type ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetResponse = ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetResponses[keyof ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetResponses];

export type DeleteTemplateSpearTemplatesTemplateIdDeleteData = {
    body?: never;
    path: {
        /**
         * Template Id
         */
        template_id: string;
    };
    query?: never;
    url: '/spear-templates/{template_id}';
};

export type DeleteTemplateSpearTemplatesTemplateIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTemplateSpearTemplatesTemplateIdDeleteError = DeleteTemplateSpearTemplatesTemplateIdDeleteErrors[keyof DeleteTemplateSpearTemplatesTemplateIdDeleteErrors];

export type DeleteTemplateSpearTemplatesTemplateIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetTemplateSpearTemplatesTemplateIdGetData = {
    body?: never;
    path: {
        /**
         * Template Id
         */
        template_id: string;
    };
    query?: never;
    url: '/spear-templates/{template_id}';
};

export type GetTemplateSpearTemplatesTemplateIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTemplateSpearTemplatesTemplateIdGetError = GetTemplateSpearTemplatesTemplateIdGetErrors[keyof GetTemplateSpearTemplatesTemplateIdGetErrors];

export type GetTemplateSpearTemplatesTemplateIdGetResponses = {
    /**
     * Successful Response
     */
    200: SpearTemplate;
};

export type GetTemplateSpearTemplatesTemplateIdGetResponse = GetTemplateSpearTemplatesTemplateIdGetResponses[keyof GetTemplateSpearTemplatesTemplateIdGetResponses];

export type UpdateTemplateSpearTemplatesTemplateIdPutData = {
    body: SpearTemplateUpdate;
    path: {
        /**
         * Template Id
         */
        template_id: string;
    };
    query?: never;
    url: '/spear-templates/{template_id}';
};

export type UpdateTemplateSpearTemplatesTemplateIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTemplateSpearTemplatesTemplateIdPutError = UpdateTemplateSpearTemplatesTemplateIdPutErrors[keyof UpdateTemplateSpearTemplatesTemplateIdPutErrors];

export type UpdateTemplateSpearTemplatesTemplateIdPutResponses = {
    /**
     * Successful Response
     */
    200: SpearTemplate;
};

export type UpdateTemplateSpearTemplatesTemplateIdPutResponse = UpdateTemplateSpearTemplatesTemplateIdPutResponses[keyof UpdateTemplateSpearTemplatesTemplateIdPutResponses];

export type RequestJobJobRequestPostData = {
    body: JobRequest;
    path?: never;
    query?: never;
    url: '/job/request';
};

export type RequestJobJobRequestPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RequestJobJobRequestPostError = RequestJobJobRequestPostErrors[keyof RequestJobJobRequestPostErrors];

export type RequestJobJobRequestPostResponses = {
    /**
     * Job ID assigned
     */
    200: JobRequestResponse;
};

export type RequestJobJobRequestPostResponse = RequestJobJobRequestPostResponses[keyof RequestJobJobRequestPostResponses];

export type EnqueueHunterioEmailTestEnqueueHunterioEmailPostData = {
    body: EnqueueHunterIoEmailPayload;
    path?: never;
    query?: never;
    url: '/test/enqueue/hunterio/email';
};

export type EnqueueHunterioEmailTestEnqueueHunterioEmailPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EnqueueHunterioEmailTestEnqueueHunterioEmailPostError = EnqueueHunterioEmailTestEnqueueHunterioEmailPostErrors[keyof EnqueueHunterioEmailTestEnqueueHunterioEmailPostErrors];

export type EnqueueHunterioEmailTestEnqueueHunterioEmailPostResponses = {
    /**
     * Response Enqueue Hunterio Email Test Enqueue Hunterio Email Post
     *
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type EnqueueHunterioEmailTestEnqueueHunterioEmailPostResponse = EnqueueHunterioEmailTestEnqueueHunterioEmailPostResponses[keyof EnqueueHunterioEmailTestEnqueueHunterioEmailPostResponses];

export type EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostData = {
    body: EnqueueHunterIoEmailFinderPayload;
    path?: never;
    query?: never;
    url: '/test/enqueue/hunterio/email-finder';
};

export type EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostError = EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostErrors[keyof EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostErrors];

export type EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostResponses = {
    /**
     * Response Enqueue Hunterio Email Finder Test Enqueue Hunterio Email Finder Post
     *
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostResponse = EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostResponses[keyof EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostResponses];

export type ListTasksJobsTasksGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         *
         * Number of tasks to skip
         */
        skip?: number;
        /**
         * Limit
         *
         * Number of tasks to return
         */
        limit?: number;
        /**
         * Status
         *
         * Filter by task status
         */
        status?: string | null;
        /**
         * Name
         *
         * Filter by task name pattern
         */
        name?: string | null;
        /**
         * Queue
         *
         * Filter by queue name
         */
        queue?: string | null;
        /**
         * Task Id Pattern
         *
         * Filter by task ID pattern
         */
        task_id_pattern?: string | null;
        /**
         * Target Id
         *
         * Filter by target ID
         */
        target_id?: string | null;
        /**
         * Date From
         *
         * Filter tasks from this date
         */
        date_from?: Date | null;
        /**
         * Date To
         *
         * Filter tasks to this date
         */
        date_to?: Date | null;
    };
    url: '/jobs/tasks';
};

export type ListTasksJobsTasksGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListTasksJobsTasksGetError = ListTasksJobsTasksGetErrors[keyof ListTasksJobsTasksGetErrors];

export type ListTasksJobsTasksGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetTaskByIdJobsTasksTaskIdGetData = {
    body?: never;
    path: {
        /**
         * Task Id
         */
        task_id: string;
    };
    query?: never;
    url: '/jobs/tasks/{task_id}';
};

export type GetTaskByIdJobsTasksTaskIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTaskByIdJobsTasksTaskIdGetError = GetTaskByIdJobsTasksTaskIdGetErrors[keyof GetTaskByIdJobsTasksTaskIdGetErrors];

export type GetTaskByIdJobsTasksTaskIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetIdentifiersByTargetIdentifiersTargetsTargetIdGetData = {
    body?: never;
    path: {
        /**
         * Target Id
         */
        target_id: string;
    };
    query?: {
        /**
         * Skip
         *
         * Number of records to skip
         */
        skip?: number;
        /**
         * Limit
         *
         * Maximum number of records to return
         */
        limit?: number;
    };
    url: '/identifiers/targets/{target_id}';
};

export type GetIdentifiersByTargetIdentifiersTargetsTargetIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetIdentifiersByTargetIdentifiersTargetsTargetIdGetError = GetIdentifiersByTargetIdentifiersTargetsTargetIdGetErrors[keyof GetIdentifiersByTargetIdentifiersTargetsTargetIdGetErrors];

export type GetIdentifiersByTargetIdentifiersTargetsTargetIdGetResponses = {
    /**
     * Response Get Identifiers By Target Identifiers Targets  Target Id  Get
     *
     * Successful Response
     */
    200: Array<TargetIdentifier>;
};

export type GetIdentifiersByTargetIdentifiersTargetsTargetIdGetResponse = GetIdentifiersByTargetIdentifiersTargetsTargetIdGetResponses[keyof GetIdentifiersByTargetIdentifiersTargetsTargetIdGetResponses];

export type CreateIdentifierIdentifiersPostData = {
    body: TargetIdentifierBase;
    path?: never;
    query?: never;
    url: '/identifiers';
};

export type CreateIdentifierIdentifiersPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateIdentifierIdentifiersPostError = CreateIdentifierIdentifiersPostErrors[keyof CreateIdentifierIdentifiersPostErrors];

export type CreateIdentifierIdentifiersPostResponses = {
    /**
     * Successful Response
     */
    200: TargetIdentifier;
};

export type CreateIdentifierIdentifiersPostResponse = CreateIdentifierIdentifiersPostResponses[keyof CreateIdentifierIdentifiersPostResponses];

export type DeleteIdentifierIdentifiersIdentifierIdDeleteData = {
    body?: never;
    path: {
        /**
         * Identifier Id
         */
        identifier_id: string;
    };
    query?: never;
    url: '/identifiers/{identifier_id}';
};

export type DeleteIdentifierIdentifiersIdentifierIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteIdentifierIdentifiersIdentifierIdDeleteError = DeleteIdentifierIdentifiersIdentifierIdDeleteErrors[keyof DeleteIdentifierIdentifiersIdentifierIdDeleteErrors];

export type DeleteIdentifierIdentifiersIdentifierIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetObservationsByTargetObservationsTargetsTargetIdGetData = {
    body?: never;
    path: {
        /**
         * Target Id
         */
        target_id: string;
    };
    query?: {
        /**
         * Skip
         *
         * Number of records to skip
         */
        skip?: number;
        /**
         * Limit
         *
         * Maximum number of records to return
         */
        limit?: number;
    };
    url: '/observations/targets/{target_id}';
};

export type GetObservationsByTargetObservationsTargetsTargetIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetObservationsByTargetObservationsTargetsTargetIdGetError = GetObservationsByTargetObservationsTargetsTargetIdGetErrors[keyof GetObservationsByTargetObservationsTargetsTargetIdGetErrors];

export type GetObservationsByTargetObservationsTargetsTargetIdGetResponses = {
    /**
     * Response Get Observations By Target Observations Targets  Target Id  Get
     *
     * Successful Response
     */
    200: Array<Observation>;
};

export type GetObservationsByTargetObservationsTargetsTargetIdGetResponse = GetObservationsByTargetObservationsTargetsTargetIdGetResponses[keyof GetObservationsByTargetObservationsTargetsTargetIdGetResponses];

export type CreateObservationObservationsPostData = {
    body: ObservationBase;
    path?: never;
    query?: never;
    url: '/observations';
};

export type CreateObservationObservationsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateObservationObservationsPostError = CreateObservationObservationsPostErrors[keyof CreateObservationObservationsPostErrors];

export type CreateObservationObservationsPostResponses = {
    /**
     * Successful Response
     */
    200: Observation;
};

export type CreateObservationObservationsPostResponse = CreateObservationObservationsPostResponses[keyof CreateObservationObservationsPostResponses];

export type DeleteObservationObservationsObservationIdDeleteData = {
    body?: never;
    path: {
        /**
         * Observation Id
         */
        observation_id: string;
    };
    query?: never;
    url: '/observations/{observation_id}';
};

export type DeleteObservationObservationsObservationIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteObservationObservationsObservationIdDeleteError = DeleteObservationObservationsObservationIdDeleteErrors[keyof DeleteObservationObservationsObservationIdDeleteErrors];

export type DeleteObservationObservationsObservationIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GenerateTextLlmGeneratePostData = {
    body: GenerateRequest;
    path?: never;
    query?: never;
    url: '/llm/generate';
};

export type GenerateTextLlmGeneratePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateTextLlmGeneratePostError = GenerateTextLlmGeneratePostErrors[keyof GenerateTextLlmGeneratePostErrors];

export type GenerateTextLlmGeneratePostResponses = {
    /**
     * Successful Response
     */
    200: GenerateResponse;
};

export type GenerateTextLlmGeneratePostResponse = GenerateTextLlmGeneratePostResponses[keyof GenerateTextLlmGeneratePostResponses];

export type GetOrgUnitsOrgUnitsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/org-units';
};

export type GetOrgUnitsOrgUnitsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOrgUnitsOrgUnitsGetError = GetOrgUnitsOrgUnitsGetErrors[keyof GetOrgUnitsOrgUnitsGetErrors];

export type GetOrgUnitsOrgUnitsGetResponses = {
    /**
     * Response Get Org Units Org Units Get
     *
     * Successful Response
     */
    200: Array<OrganizationUnit>;
};

export type GetOrgUnitsOrgUnitsGetResponse = GetOrgUnitsOrgUnitsGetResponses[keyof GetOrgUnitsOrgUnitsGetResponses];

export type CreateOrgUnitOrgUnitsPostData = {
    body: OrganizationUnitCreate;
    path?: never;
    query?: never;
    url: '/org-units';
};

export type CreateOrgUnitOrgUnitsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateOrgUnitOrgUnitsPostError = CreateOrgUnitOrgUnitsPostErrors[keyof CreateOrgUnitOrgUnitsPostErrors];

export type CreateOrgUnitOrgUnitsPostResponses = {
    /**
     * Successful Response
     */
    200: OrganizationUnit;
};

export type CreateOrgUnitOrgUnitsPostResponse = CreateOrgUnitOrgUnitsPostResponses[keyof CreateOrgUnitOrgUnitsPostResponses];

export type DeleteOrgUnitOrgUnitsOrgUnitIdDeleteData = {
    body?: never;
    path: {
        /**
         * Org Unit Id
         */
        org_unit_id: string;
    };
    query?: never;
    url: '/org-units/{org_unit_id}';
};

export type DeleteOrgUnitOrgUnitsOrgUnitIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteOrgUnitOrgUnitsOrgUnitIdDeleteError = DeleteOrgUnitOrgUnitsOrgUnitIdDeleteErrors[keyof DeleteOrgUnitOrgUnitsOrgUnitIdDeleteErrors];

export type DeleteOrgUnitOrgUnitsOrgUnitIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetOrgUnitByIdOrgUnitsOrgUnitIdGetData = {
    body?: never;
    path: {
        /**
         * Org Unit Id
         */
        org_unit_id: string;
    };
    query?: never;
    url: '/org-units/{org_unit_id}';
};

export type GetOrgUnitByIdOrgUnitsOrgUnitIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetOrgUnitByIdOrgUnitsOrgUnitIdGetError = GetOrgUnitByIdOrgUnitsOrgUnitIdGetErrors[keyof GetOrgUnitByIdOrgUnitsOrgUnitIdGetErrors];

export type GetOrgUnitByIdOrgUnitsOrgUnitIdGetResponses = {
    /**
     * Successful Response
     */
    200: OrganizationUnit;
};

export type GetOrgUnitByIdOrgUnitsOrgUnitIdGetResponse = GetOrgUnitByIdOrgUnitsOrgUnitIdGetResponses[keyof GetOrgUnitByIdOrgUnitsOrgUnitIdGetResponses];

export type UpdateOrgUnitOrgUnitsOrgUnitIdPutData = {
    body: OrganizationUnitUpdate;
    path: {
        /**
         * Org Unit Id
         */
        org_unit_id: string;
    };
    query?: never;
    url: '/org-units/{org_unit_id}';
};

export type UpdateOrgUnitOrgUnitsOrgUnitIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateOrgUnitOrgUnitsOrgUnitIdPutError = UpdateOrgUnitOrgUnitsOrgUnitIdPutErrors[keyof UpdateOrgUnitOrgUnitsOrgUnitIdPutErrors];

export type UpdateOrgUnitOrgUnitsOrgUnitIdPutResponses = {
    /**
     * Successful Response
     */
    200: OrganizationUnit;
};

export type UpdateOrgUnitOrgUnitsOrgUnitIdPutResponse = UpdateOrgUnitOrgUnitsOrgUnitIdPutResponses[keyof UpdateOrgUnitOrgUnitsOrgUnitIdPutResponses];

export type AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostData = {
    body?: never;
    path: {
        /**
         * Org Unit Id
         */
        org_unit_id: string;
        /**
         * Target Id
         */
        target_id: string;
    };
    query?: never;
    url: '/org-units/{org_unit_id}/assign/{target_id}';
};

export type AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostError = AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostErrors[keyof AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostErrors];

export type AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostData = {
    body?: never;
    path: {
        /**
         * Target Id
         */
        target_id: string;
    };
    query?: never;
    url: '/org-units/unassign/{target_id}';
};

export type UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostError = UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostErrors[keyof UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostErrors];

export type UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListSettingsSettingsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         *
         * Number of records to skip
         */
        skip?: number;
        /**
         * Limit
         *
         * Maximum number of records to return
         */
        limit?: number;
        /**
         * Category
         *
         * Filter by category
         */
        category?: SettingCategory | null;
        /**
         * Include Sensitive
         *
         * Include sensitive settings in response
         */
        include_sensitive?: boolean;
    };
    url: '/settings';
};

export type ListSettingsSettingsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListSettingsSettingsGetError = ListSettingsSettingsGetErrors[keyof ListSettingsSettingsGetErrors];

export type ListSettingsSettingsGetResponses = {
    /**
     * Response List Settings Settings Get
     *
     * Successful Response
     */
    200: Array<SettingResponse>;
};

export type ListSettingsSettingsGetResponse = ListSettingsSettingsGetResponses[keyof ListSettingsSettingsGetResponses];

export type CreateSettingSettingsPostData = {
    body: SettingCreate;
    path?: never;
    query?: never;
    url: '/settings';
};

export type CreateSettingSettingsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSettingSettingsPostError = CreateSettingSettingsPostErrors[keyof CreateSettingSettingsPostErrors];

export type CreateSettingSettingsPostResponses = {
    /**
     * Successful Response
     */
    200: Setting;
};

export type CreateSettingSettingsPostResponse = CreateSettingSettingsPostResponses[keyof CreateSettingSettingsPostResponses];

export type DeleteSettingSettingsSettingIdDeleteData = {
    body?: never;
    path: {
        /**
         * Setting Id
         */
        setting_id: string;
    };
    query?: never;
    url: '/settings/{setting_id}';
};

export type DeleteSettingSettingsSettingIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteSettingSettingsSettingIdDeleteError = DeleteSettingSettingsSettingIdDeleteErrors[keyof DeleteSettingSettingsSettingIdDeleteErrors];

export type DeleteSettingSettingsSettingIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSettingSettingsSettingIdGetData = {
    body?: never;
    path: {
        /**
         * Setting Id
         */
        setting_id: string;
    };
    query?: never;
    url: '/settings/{setting_id}';
};

export type GetSettingSettingsSettingIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSettingSettingsSettingIdGetError = GetSettingSettingsSettingIdGetErrors[keyof GetSettingSettingsSettingIdGetErrors];

export type GetSettingSettingsSettingIdGetResponses = {
    /**
     * Successful Response
     */
    200: SettingResponse;
};

export type GetSettingSettingsSettingIdGetResponse = GetSettingSettingsSettingIdGetResponses[keyof GetSettingSettingsSettingIdGetResponses];

export type UpdateSettingSettingsSettingIdPutData = {
    body: SettingUpdate;
    path: {
        /**
         * Setting Id
         */
        setting_id: string;
    };
    query?: never;
    url: '/settings/{setting_id}';
};

export type UpdateSettingSettingsSettingIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateSettingSettingsSettingIdPutError = UpdateSettingSettingsSettingIdPutErrors[keyof UpdateSettingSettingsSettingIdPutErrors];

export type UpdateSettingSettingsSettingIdPutResponses = {
    /**
     * Successful Response
     */
    200: Setting;
};

export type UpdateSettingSettingsSettingIdPutResponse = UpdateSettingSettingsSettingIdPutResponses[keyof UpdateSettingSettingsSettingIdPutResponses];

export type DeleteSettingByKeySettingsKeyKeyDeleteData = {
    body?: never;
    path: {
        /**
         * Key
         */
        key: string;
    };
    query?: never;
    url: '/settings/key/{key}';
};

export type DeleteSettingByKeySettingsKeyKeyDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteSettingByKeySettingsKeyKeyDeleteError = DeleteSettingByKeySettingsKeyKeyDeleteErrors[keyof DeleteSettingByKeySettingsKeyKeyDeleteErrors];

export type DeleteSettingByKeySettingsKeyKeyDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSettingByKeySettingsKeyKeyGetData = {
    body?: never;
    path: {
        /**
         * Key
         */
        key: string;
    };
    query?: never;
    url: '/settings/key/{key}';
};

export type GetSettingByKeySettingsKeyKeyGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSettingByKeySettingsKeyKeyGetError = GetSettingByKeySettingsKeyKeyGetErrors[keyof GetSettingByKeySettingsKeyKeyGetErrors];

export type GetSettingByKeySettingsKeyKeyGetResponses = {
    /**
     * Successful Response
     */
    200: SettingResponse;
};

export type GetSettingByKeySettingsKeyKeyGetResponse = GetSettingByKeySettingsKeyKeyGetResponses[keyof GetSettingByKeySettingsKeyKeyGetResponses];

export type UpdateSettingByKeySettingsKeyKeyPutData = {
    body: SettingUpdate;
    path: {
        /**
         * Key
         */
        key: string;
    };
    query?: never;
    url: '/settings/key/{key}';
};

export type UpdateSettingByKeySettingsKeyKeyPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateSettingByKeySettingsKeyKeyPutError = UpdateSettingByKeySettingsKeyKeyPutErrors[keyof UpdateSettingByKeySettingsKeyKeyPutErrors];

export type UpdateSettingByKeySettingsKeyKeyPutResponses = {
    /**
     * Successful Response
     */
    200: Setting;
};

export type UpdateSettingByKeySettingsKeyKeyPutResponse = UpdateSettingByKeySettingsKeyKeyPutResponses[keyof UpdateSettingByKeySettingsKeyKeyPutResponses];

export type GetSettingsByCategorySettingsCategoryCategoryGetData = {
    body?: never;
    path: {
        category: SettingCategory;
    };
    query?: {
        /**
         * Skip
         *
         * Number of records to skip
         */
        skip?: number;
        /**
         * Limit
         *
         * Maximum number of records to return
         */
        limit?: number;
        /**
         * Include Sensitive
         *
         * Include sensitive settings in response
         */
        include_sensitive?: boolean;
    };
    url: '/settings/category/{category}';
};

export type GetSettingsByCategorySettingsCategoryCategoryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSettingsByCategorySettingsCategoryCategoryGetError = GetSettingsByCategorySettingsCategoryCategoryGetErrors[keyof GetSettingsByCategorySettingsCategoryCategoryGetErrors];

export type GetSettingsByCategorySettingsCategoryCategoryGetResponses = {
    /**
     * Response Get Settings By Category Settings Category  Category  Get
     *
     * Successful Response
     */
    200: Array<SettingResponse>;
};

export type GetSettingsByCategorySettingsCategoryCategoryGetResponse = GetSettingsByCategorySettingsCategoryCategoryGetResponses[keyof GetSettingsByCategorySettingsCategoryCategoryGetResponses];

export type BulkUpdateSettingsSettingsBulkUpdatePostData = {
    body: BulkSettingsUpdate;
    path?: never;
    query?: never;
    url: '/settings/bulk-update';
};

export type BulkUpdateSettingsSettingsBulkUpdatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BulkUpdateSettingsSettingsBulkUpdatePostError = BulkUpdateSettingsSettingsBulkUpdatePostErrors[keyof BulkUpdateSettingsSettingsBulkUpdatePostErrors];

export type BulkUpdateSettingsSettingsBulkUpdatePostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/settings/integrations/microsoft-graph';
};

export type GetMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetResponses = {
    /**
     * Successful Response
     */
    200: MicrosoftGraphCredentials;
};

export type GetMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetResponse = GetMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetResponses[keyof GetMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetResponses];

export type SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostData = {
    body: MicrosoftGraphCredentials;
    path?: never;
    query?: never;
    url: '/settings/integrations/microsoft-graph';
};

export type SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostError = SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostErrors[keyof SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostErrors];

export type SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSettingValueSettingsValueKeyGetData = {
    body?: never;
    path: {
        /**
         * Key
         */
        key: string;
    };
    query?: never;
    url: '/settings/value/{key}';
};

export type GetSettingValueSettingsValueKeyGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSettingValueSettingsValueKeyGetError = GetSettingValueSettingsValueKeyGetErrors[keyof GetSettingValueSettingsValueKeyGetErrors];

export type GetSettingValueSettingsValueKeyGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TestMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/microsoft-graph/test-connection';
};

export type TestMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetResponses = {
    /**
     * Successful Response
     */
    200: ConnectionTestResponse;
};

export type TestMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetResponse = TestMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetResponses[keyof TestMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetResponses];

export type GetMicrosoftGraphStatisticsMicrosoftGraphStatisticsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/microsoft-graph/statistics';
};

export type GetMicrosoftGraphStatisticsMicrosoftGraphStatisticsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListUsersMicrosoftGraphUsersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Limit
         *
         * Number of users to return
         */
        limit?: number;
        /**
         * Skip
         *
         * Number of users to skip
         */
        skip?: number;
        /**
         * Search
         *
         * Search term for display name, email, or UPN
         */
        search?: string | null;
        /**
         * Select
         *
         * Comma-separated list of properties to select
         */
        select?: string | null;
    };
    url: '/microsoft-graph/users';
};

export type ListUsersMicrosoftGraphUsersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListUsersMicrosoftGraphUsersGetError = ListUsersMicrosoftGraphUsersGetErrors[keyof ListUsersMicrosoftGraphUsersGetErrors];

export type ListUsersMicrosoftGraphUsersGetResponses = {
    /**
     * Successful Response
     */
    200: UsersListResponse;
};

export type ListUsersMicrosoftGraphUsersGetResponse = ListUsersMicrosoftGraphUsersGetResponses[keyof ListUsersMicrosoftGraphUsersGetResponses];

export type GetUserMicrosoftGraphUsersUserIdGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: {
        /**
         * Include Relationships
         *
         * Include manager, direct reports, and groups
         */
        include_relationships?: boolean;
    };
    url: '/microsoft-graph/users/{user_id}';
};

export type GetUserMicrosoftGraphUsersUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserMicrosoftGraphUsersUserIdGetError = GetUserMicrosoftGraphUsersUserIdGetErrors[keyof GetUserMicrosoftGraphUsersUserIdGetErrors];

export type GetUserMicrosoftGraphUsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: UserDetailResponse;
};

export type GetUserMicrosoftGraphUsersUserIdGetResponse = GetUserMicrosoftGraphUsersUserIdGetResponses[keyof GetUserMicrosoftGraphUsersUserIdGetResponses];

export type GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: string;
    };
    query?: {
        /**
         * Depth
         *
         * Hierarchy depth (1-3)
         */
        depth?: number;
    };
    url: '/microsoft-graph/users/{user_id}/hierarchy';
};

export type GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetError = GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetErrors[keyof GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetErrors];

export type GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type SearchUsersMicrosoftGraphUsersSearchPostData = {
    body: UserSearchRequest;
    path?: never;
    query?: never;
    url: '/microsoft-graph/users/search';
};

export type SearchUsersMicrosoftGraphUsersSearchPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SearchUsersMicrosoftGraphUsersSearchPostError = SearchUsersMicrosoftGraphUsersSearchPostErrors[keyof SearchUsersMicrosoftGraphUsersSearchPostErrors];

export type SearchUsersMicrosoftGraphUsersSearchPostResponses = {
    /**
     * Successful Response
     */
    200: UsersListResponse;
};

export type SearchUsersMicrosoftGraphUsersSearchPostResponse = SearchUsersMicrosoftGraphUsersSearchPostResponses[keyof SearchUsersMicrosoftGraphUsersSearchPostResponses];

export type ListGroupsMicrosoftGraphGroupsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Limit
         *
         * Number of groups to return
         */
        limit?: number;
        /**
         * Skip
         *
         * Number of groups to skip
         */
        skip?: number;
        /**
         * Search
         *
         * Search term for display name or email
         */
        search?: string | null;
        /**
         * Select
         *
         * Comma-separated list of properties to select
         */
        select?: string | null;
    };
    url: '/microsoft-graph/groups';
};

export type ListGroupsMicrosoftGraphGroupsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListGroupsMicrosoftGraphGroupsGetError = ListGroupsMicrosoftGraphGroupsGetErrors[keyof ListGroupsMicrosoftGraphGroupsGetErrors];

export type ListGroupsMicrosoftGraphGroupsGetResponses = {
    /**
     * Successful Response
     */
    200: GroupsListResponse;
};

export type ListGroupsMicrosoftGraphGroupsGetResponse = ListGroupsMicrosoftGraphGroupsGetResponses[keyof ListGroupsMicrosoftGraphGroupsGetResponses];

export type GetGroupMicrosoftGraphGroupsGroupIdGetData = {
    body?: never;
    path: {
        /**
         * Group Id
         */
        group_id: string;
    };
    query?: {
        /**
         * Include Members
         *
         * Include group members
         */
        include_members?: boolean;
    };
    url: '/microsoft-graph/groups/{group_id}';
};

export type GetGroupMicrosoftGraphGroupsGroupIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetGroupMicrosoftGraphGroupsGroupIdGetError = GetGroupMicrosoftGraphGroupsGroupIdGetErrors[keyof GetGroupMicrosoftGraphGroupsGroupIdGetErrors];

export type GetGroupMicrosoftGraphGroupsGroupIdGetResponses = {
    /**
     * Successful Response
     */
    200: GroupDetailResponse;
};

export type GetGroupMicrosoftGraphGroupsGroupIdGetResponse = GetGroupMicrosoftGraphGroupsGroupIdGetResponses[keyof GetGroupMicrosoftGraphGroupsGroupIdGetResponses];

export type SearchGroupsMicrosoftGraphGroupsSearchPostData = {
    body: GroupSearchRequest;
    path?: never;
    query?: never;
    url: '/microsoft-graph/groups/search';
};

export type SearchGroupsMicrosoftGraphGroupsSearchPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SearchGroupsMicrosoftGraphGroupsSearchPostError = SearchGroupsMicrosoftGraphGroupsSearchPostErrors[keyof SearchGroupsMicrosoftGraphGroupsSearchPostErrors];

export type SearchGroupsMicrosoftGraphGroupsSearchPostResponses = {
    /**
     * Successful Response
     */
    200: GroupsListResponse;
};

export type SearchGroupsMicrosoftGraphGroupsSearchPostResponse = SearchGroupsMicrosoftGraphGroupsSearchPostResponses[keyof SearchGroupsMicrosoftGraphGroupsSearchPostResponses];

export type GetOrganizationMicrosoftGraphOrganizationGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/microsoft-graph/organization';
};

export type GetOrganizationMicrosoftGraphOrganizationGetResponses = {
    /**
     * Successful Response
     */
    200: OrganizationResponse;
};

export type GetOrganizationMicrosoftGraphOrganizationGetResponse = GetOrganizationMicrosoftGraphOrganizationGetResponses[keyof GetOrganizationMicrosoftGraphOrganizationGetResponses];

export type GetMetricsMicrosoftGraphMetricsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/microsoft-graph/metrics';
};

export type GetMetricsMicrosoftGraphMetricsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ResetMetricsMicrosoftGraphMetricsResetPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/microsoft-graph/metrics/reset';
};

export type ResetMetricsMicrosoftGraphMetricsResetPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthCheckMicrosoftGraphHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/microsoft-graph/health';
};

export type HealthCheckMicrosoftGraphHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListProvidersIntegrationsProvidersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/integrations/providers';
};

export type ListProvidersIntegrationsProvidersGetResponses = {
    /**
     * Response List Providers Integrations Providers Get
     *
     * Successful Response
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type ListProvidersIntegrationsProvidersGetResponse = ListProvidersIntegrationsProvidersGetResponses[keyof ListProvidersIntegrationsProvidersGetResponses];

export type GetProviderIntegrationsProvidersProviderKeyGetData = {
    body?: never;
    path: {
        /**
         * Provider Key
         */
        provider_key: string;
    };
    query?: never;
    url: '/integrations/providers/{provider_key}';
};

export type GetProviderIntegrationsProvidersProviderKeyGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProviderIntegrationsProvidersProviderKeyGetError = GetProviderIntegrationsProvidersProviderKeyGetErrors[keyof GetProviderIntegrationsProvidersProviderKeyGetErrors];

export type GetProviderIntegrationsProvidersProviderKeyGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListAccountsIntegrationsAccountsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Provider Key
         *
         * Filter by provider
         */
        provider_key?: string | null;
    };
    url: '/integrations/accounts';
};

export type ListAccountsIntegrationsAccountsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListAccountsIntegrationsAccountsGetError = ListAccountsIntegrationsAccountsGetErrors[keyof ListAccountsIntegrationsAccountsGetErrors];

export type ListAccountsIntegrationsAccountsGetResponses = {
    /**
     * Response List Accounts Integrations Accounts Get
     *
     * Successful Response
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type ListAccountsIntegrationsAccountsGetResponse = ListAccountsIntegrationsAccountsGetResponses[keyof ListAccountsIntegrationsAccountsGetResponses];

export type GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetData = {
    body?: never;
    path: {
        /**
         * Provider Key
         */
        provider_key: string;
    };
    query?: never;
    url: '/integrations/accounts/by-provider/{provider_key}';
};

export type GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetError = GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetErrors[keyof GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetErrors];

export type GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteAccountIntegrationsAccountsAccountIdDeleteData = {
    body?: never;
    path: {
        /**
         * Account Id
         */
        account_id: string;
    };
    query?: never;
    url: '/integrations/accounts/{account_id}';
};

export type DeleteAccountIntegrationsAccountsAccountIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteAccountIntegrationsAccountsAccountIdDeleteError = DeleteAccountIntegrationsAccountsAccountIdDeleteErrors[keyof DeleteAccountIntegrationsAccountsAccountIdDeleteErrors];

export type DeleteAccountIntegrationsAccountsAccountIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAccountIntegrationsAccountsAccountIdGetData = {
    body?: never;
    path: {
        /**
         * Account Id
         */
        account_id: string;
    };
    query?: never;
    url: '/integrations/accounts/{account_id}';
};

export type GetAccountIntegrationsAccountsAccountIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAccountIntegrationsAccountsAccountIdGetError = GetAccountIntegrationsAccountsAccountIdGetErrors[keyof GetAccountIntegrationsAccountsAccountIdGetErrors];

export type GetAccountIntegrationsAccountsAccountIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpsertAccountIntegrationsProviderKeyAccountsPostData = {
    /**
     * Body
     */
    body: {
        [key: string]: unknown;
    };
    path: {
        /**
         * Provider Key
         */
        provider_key: string;
    };
    query?: never;
    url: '/integrations/{provider_key}/accounts';
};

export type UpsertAccountIntegrationsProviderKeyAccountsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpsertAccountIntegrationsProviderKeyAccountsPostError = UpsertAccountIntegrationsProviderKeyAccountsPostErrors[keyof UpsertAccountIntegrationsProviderKeyAccountsPostErrors];

export type UpsertAccountIntegrationsProviderKeyAccountsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetSecretIntegrationsAccountsAccountIdSecretGetData = {
    body?: never;
    path: {
        /**
         * Account Id
         */
        account_id: string;
    };
    query?: never;
    url: '/integrations/accounts/{account_id}/secret';
};

export type GetSecretIntegrationsAccountsAccountIdSecretGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSecretIntegrationsAccountsAccountIdSecretGetError = GetSecretIntegrationsAccountsAccountIdSecretGetErrors[keyof GetSecretIntegrationsAccountsAccountIdSecretGetErrors];

export type GetSecretIntegrationsAccountsAccountIdSecretGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type PutSecretIntegrationsAccountsAccountIdSecretPostData = {
    /**
     * Body
     */
    body: {
        [key: string]: unknown;
    };
    path: {
        /**
         * Account Id
         */
        account_id: string;
    };
    query?: never;
    url: '/integrations/accounts/{account_id}/secret';
};

export type PutSecretIntegrationsAccountsAccountIdSecretPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PutSecretIntegrationsAccountsAccountIdSecretPostError = PutSecretIntegrationsAccountsAccountIdSecretPostErrors[keyof PutSecretIntegrationsAccountsAccountIdSecretPostErrors];

export type PutSecretIntegrationsAccountsAccountIdSecretPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HasSecretIntegrationsAccountsAccountIdHasSecretGetData = {
    body?: never;
    path: {
        /**
         * Account Id
         */
        account_id: string;
    };
    query?: never;
    url: '/integrations/accounts/{account_id}/has-secret';
};

export type HasSecretIntegrationsAccountsAccountIdHasSecretGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HasSecretIntegrationsAccountsAccountIdHasSecretGetError = HasSecretIntegrationsAccountsAccountIdHasSecretGetErrors[keyof HasSecretIntegrationsAccountsAccountIdHasSecretGetErrors];

export type HasSecretIntegrationsAccountsAccountIdHasSecretGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetAuditIntegrationsAccountsAccountIdAuditGetData = {
    body?: never;
    path: {
        /**
         * Account Id
         */
        account_id: string;
    };
    query?: never;
    url: '/integrations/accounts/{account_id}/audit';
};

export type GetAuditIntegrationsAccountsAccountIdAuditGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetAuditIntegrationsAccountsAccountIdAuditGetError = GetAuditIntegrationsAccountsAccountIdAuditGetErrors[keyof GetAuditIntegrationsAccountsAccountIdAuditGetErrors];

export type GetAuditIntegrationsAccountsAccountIdAuditGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetData = {
    body?: never;
    path: {
        /**
         * Account Id
         */
        account_id: string;
    };
    query?: never;
    url: '/integrations/accounts/{account_id}/integrity';
};

export type CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetError = CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetErrors[keyof CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetErrors];

export type CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListAuditAuditGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Entity Type
         */
        entity_type?: string | null;
        /**
         * Entity Id
         */
        entity_id?: string | null;
        /**
         * Action
         */
        action?: string | null;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Before
         */
        before?: Date | null;
    };
    url: '/audit';
};

export type ListAuditAuditGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListAuditAuditGetError = ListAuditAuditGetErrors[keyof ListAuditAuditGetErrors];

export type ListAuditAuditGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListEntityAuditAuditEntityTypeEntityIdGetData = {
    body?: never;
    path: {
        /**
         * Entity Type
         */
        entity_type: string;
        /**
         * Entity Id
         */
        entity_id: string;
    };
    query?: {
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/audit/{entity_type}/{entity_id}';
};

export type ListEntityAuditAuditEntityTypeEntityIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListEntityAuditAuditEntityTypeEntityIdGetError = ListEntityAuditAuditEntityTypeEntityIdGetErrors[keyof ListEntityAuditAuditEntityTypeEntityIdGetErrors];

export type ListEntityAuditAuditEntityTypeEntityIdGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
