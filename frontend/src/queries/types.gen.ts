// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseURL: 'http://localhost' | (string & {});
};

/**
 * BatchRequest
 */
export type BatchRequest = {
    /**
     * Batch Size
     */
    batch_size?: number;
};

/**
 * Body_login_for_access_token_auth_token_post
 */
export type BodyLoginForAccessTokenAuthTokenPost = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * ComputeNextResult
 */
export type ComputeNextResult = {
    /**
     * Updated
     */
    updated: number;
};

/**
 * CreateSubscriptionRequest
 */
export type CreateSubscriptionRequest = {
    /**
     * Source Id
     */
    source_id: number;
    /**
     * Jurisdiction
     */
    jurisdiction: string;
    /**
     * Selectors
     */
    selectors: {
        [key: string]: unknown;
    };
    /**
     * Schedule
     */
    schedule: string;
    /**
     * Status
     */
    status?: 'ACTIVE' | 'DISABLED';
};

/**
 * CreateUserRequest
 */
export type CreateUserRequest = {
    /**
     * Username
     */
    username: string;
    /**
     * Email
     */
    email: string;
    /**
     * Password
     */
    password: string;
};

/**
 * DispatchResult
 */
export type DispatchResult = {
    /**
     * Published
     */
    published: number;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * OutboxOut
 */
export type OutboxOut = {
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at?: string | null;
    /**
     * Event Type
     */
    event_type: string;
    /**
     * Payload
     */
    payload: {
        [key: string]: unknown;
    };
    /**
     * Status
     */
    status: string;
    /**
     * Attempts
     */
    attempts: number;
    /**
     * Published At
     */
    published_at?: string | null;
};

/**
 * RefreshTokenRequest
 */
export type RefreshTokenRequest = {
    /**
     * Refresh Token
     */
    refresh_token: string;
};

/**
 * RunOut
 */
export type RunOut = {
    /**
     * Id
     */
    id: number;
    /**
     * Subscription Id
     */
    subscription_id: number;
    /**
     * Run Kind
     */
    run_kind: string;
    /**
     * Started At
     */
    started_at?: string | null;
    /**
     * Ended At
     */
    ended_at?: string | null;
    /**
     * Status
     */
    status: string;
};

/**
 * SubscriptionOut
 */
export type SubscriptionOut = {
    /**
     * Id
     */
    id: number;
    /**
     * Schedule
     */
    schedule: string;
    /**
     * Last Run At
     */
    last_run_at?: string | null;
    /**
     * Next Run At
     */
    next_run_at?: string | null;
    /**
     * Status
     */
    status: string;
};

/**
 * SubscriptionResponse
 */
export type SubscriptionResponse = {
    /**
     * Id
     */
    id: number;
    /**
     * Schedule
     */
    schedule: string;
    /**
     * Last Run At
     */
    last_run_at?: string | null;
    /**
     * Next Run At
     */
    next_run_at?: string | null;
    /**
     * Status
     */
    status: string;
};

/**
 * TickResult
 */
export type TickResult = {
    /**
     * Processed
     */
    processed: number;
};

/**
 * Token
 */
export type Token = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Refresh Token
     */
    refresh_token: string;
    /**
     * Token Type
     */
    token_type: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type RegisterUserAuthRegisterPostData = {
    body: CreateUserRequest;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterUserAuthRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterUserAuthRegisterPostError = RegisterUserAuthRegisterPostErrors[keyof RegisterUserAuthRegisterPostErrors];

export type RegisterUserAuthRegisterPostResponses = {
    /**
     * Successful Response
     */
    201: unknown;
};

export type LoginForAccessTokenAuthTokenPostData = {
    body: BodyLoginForAccessTokenAuthTokenPost;
    path?: never;
    query?: never;
    url: '/auth/token';
};

export type LoginForAccessTokenAuthTokenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginForAccessTokenAuthTokenPostError = LoginForAccessTokenAuthTokenPostErrors[keyof LoginForAccessTokenAuthTokenPostErrors];

export type LoginForAccessTokenAuthTokenPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginForAccessTokenAuthTokenPostResponse = LoginForAccessTokenAuthTokenPostResponses[keyof LoginForAccessTokenAuthTokenPostResponses];

export type RefreshAccessTokenAuthRefreshPostData = {
    body: RefreshTokenRequest;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type RefreshAccessTokenAuthRefreshPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RefreshAccessTokenAuthRefreshPostError = RefreshAccessTokenAuthRefreshPostErrors[keyof RefreshAccessTokenAuthRefreshPostErrors];

export type RefreshAccessTokenAuthRefreshPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type RefreshAccessTokenAuthRefreshPostResponse = RefreshAccessTokenAuthRefreshPostResponses[keyof RefreshAccessTokenAuthRefreshPostResponses];

export type VerifyEmailAuthVerifyEmailGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Token
         *
         * The verification token
         */
        token: string;
    };
    url: '/auth/verify-email';
};

export type VerifyEmailAuthVerifyEmailGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VerifyEmailAuthVerifyEmailGetError = VerifyEmailAuthVerifyEmailGetErrors[keyof VerifyEmailAuthVerifyEmailGetErrors];

export type VerifyEmailAuthVerifyEmailGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ReadUsersMeAuthMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/me';
};

export type ReadUsersMeAuthMeGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TickSchedulingTickPostData = {
    body: BatchRequest;
    path?: never;
    query?: never;
    url: '/scheduling/tick';
};

export type TickSchedulingTickPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TickSchedulingTickPostError = TickSchedulingTickPostErrors[keyof TickSchedulingTickPostErrors];

export type TickSchedulingTickPostResponses = {
    /**
     * Successful Response
     */
    200: TickResult;
};

export type TickSchedulingTickPostResponse = TickSchedulingTickPostResponses[keyof TickSchedulingTickPostResponses];

export type ComputeNextSchedulingComputeNextPostData = {
    body: BatchRequest;
    path?: never;
    query?: never;
    url: '/scheduling/compute-next';
};

export type ComputeNextSchedulingComputeNextPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ComputeNextSchedulingComputeNextPostError = ComputeNextSchedulingComputeNextPostErrors[keyof ComputeNextSchedulingComputeNextPostErrors];

export type ComputeNextSchedulingComputeNextPostResponses = {
    /**
     * Successful Response
     */
    200: ComputeNextResult;
};

export type ComputeNextSchedulingComputeNextPostResponse = ComputeNextSchedulingComputeNextPostResponses[keyof ComputeNextSchedulingComputeNextPostResponses];

export type DispatchOutboxSchedulingOutboxDispatchPostData = {
    body: BatchRequest;
    path?: never;
    query?: never;
    url: '/scheduling/outbox/dispatch';
};

export type DispatchOutboxSchedulingOutboxDispatchPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DispatchOutboxSchedulingOutboxDispatchPostError = DispatchOutboxSchedulingOutboxDispatchPostErrors[keyof DispatchOutboxSchedulingOutboxDispatchPostErrors];

export type DispatchOutboxSchedulingOutboxDispatchPostResponses = {
    /**
     * Successful Response
     */
    200: DispatchResult;
};

export type DispatchOutboxSchedulingOutboxDispatchPostResponse = DispatchOutboxSchedulingOutboxDispatchPostResponses[keyof DispatchOutboxSchedulingOutboxDispatchPostResponses];

export type ListSubscriptionsSchedulingSubscriptionsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Status
         */
        status?: string | null;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
    };
    url: '/scheduling/subscriptions';
};

export type ListSubscriptionsSchedulingSubscriptionsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListSubscriptionsSchedulingSubscriptionsGetError = ListSubscriptionsSchedulingSubscriptionsGetErrors[keyof ListSubscriptionsSchedulingSubscriptionsGetErrors];

export type ListSubscriptionsSchedulingSubscriptionsGetResponses = {
    /**
     * Response List Subscriptions Scheduling Subscriptions Get
     *
     * Successful Response
     */
    200: Array<SubscriptionOut>;
};

export type ListSubscriptionsSchedulingSubscriptionsGetResponse = ListSubscriptionsSchedulingSubscriptionsGetResponses[keyof ListSubscriptionsSchedulingSubscriptionsGetResponses];

export type CreateSubscriptionSchedulingSubscriptionsPostData = {
    body: CreateSubscriptionRequest;
    path?: never;
    query?: never;
    url: '/scheduling/subscriptions';
};

export type CreateSubscriptionSchedulingSubscriptionsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSubscriptionSchedulingSubscriptionsPostError = CreateSubscriptionSchedulingSubscriptionsPostErrors[keyof CreateSubscriptionSchedulingSubscriptionsPostErrors];

export type CreateSubscriptionSchedulingSubscriptionsPostResponses = {
    /**
     * Successful Response
     */
    200: SubscriptionResponse;
};

export type CreateSubscriptionSchedulingSubscriptionsPostResponse = CreateSubscriptionSchedulingSubscriptionsPostResponses[keyof CreateSubscriptionSchedulingSubscriptionsPostResponses];

export type ListRunsSchedulingRunsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
    };
    url: '/scheduling/runs';
};

export type ListRunsSchedulingRunsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListRunsSchedulingRunsGetError = ListRunsSchedulingRunsGetErrors[keyof ListRunsSchedulingRunsGetErrors];

export type ListRunsSchedulingRunsGetResponses = {
    /**
     * Response List Runs Scheduling Runs Get
     *
     * Successful Response
     */
    200: Array<RunOut>;
};

export type ListRunsSchedulingRunsGetResponse = ListRunsSchedulingRunsGetResponses[keyof ListRunsSchedulingRunsGetResponses];

export type ListOutboxSchedulingOutboxGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Status
         */
        status?: string | null;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
    };
    url: '/scheduling/outbox';
};

export type ListOutboxSchedulingOutboxGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListOutboxSchedulingOutboxGetError = ListOutboxSchedulingOutboxGetErrors[keyof ListOutboxSchedulingOutboxGetErrors];

export type ListOutboxSchedulingOutboxGetResponses = {
    /**
     * Response List Outbox Scheduling Outbox Get
     *
     * Successful Response
     */
    200: Array<OutboxOut>;
};

export type ListOutboxSchedulingOutboxGetResponse = ListOutboxSchedulingOutboxGetResponses[keyof ListOutboxSchedulingOutboxGetResponses];

export type EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostData = {
    body?: never;
    path: {
        /**
         * Sub Id
         */
        sub_id: number;
    };
    query?: never;
    url: '/scheduling/subscriptions/{sub_id}/enable';
};

export type EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostError = EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostErrors[keyof EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostErrors];

export type EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostResponses = {
    /**
     * Successful Response
     */
    200: SubscriptionResponse;
};

export type EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostResponse = EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostResponses[keyof EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostResponses];

export type DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostData = {
    body?: never;
    path: {
        /**
         * Sub Id
         */
        sub_id: number;
    };
    query?: never;
    url: '/scheduling/subscriptions/{sub_id}/disable';
};

export type DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostError = DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostErrors[keyof DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostErrors];

export type DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostResponses = {
    /**
     * Successful Response
     */
    200: SubscriptionResponse;
};

export type DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostResponse = DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostResponses[keyof DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostResponses];

export type RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostData = {
    body?: never;
    path: {
        /**
         * Sub Id
         */
        sub_id: number;
    };
    query?: never;
    url: '/scheduling/subscriptions/{sub_id}/run';
};

export type RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostError = RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostErrors[keyof RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostErrors];

export type RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostResponses = {
    /**
     * Successful Response
     */
    200: SubscriptionResponse;
};

export type RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostResponse = RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostResponses[keyof RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostResponses];

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ProtectedEndpointProtectedGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/protected';
};

export type ProtectedEndpointProtectedGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type AdminEndpointAdminGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin';
};

export type AdminEndpointAdminGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
