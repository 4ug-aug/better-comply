// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { AdminEndpointAdminGetData, AdminEndpointAdminGetResponses, LoginForAccessTokenAuthTokenPostData, LoginForAccessTokenAuthTokenPostErrors, LoginForAccessTokenAuthTokenPostResponses, ProtectedEndpointProtectedGetData, ProtectedEndpointProtectedGetResponses, ReadUsersMeAuthMeGetData, ReadUsersMeAuthMeGetResponses, RefreshAccessTokenAuthRefreshPostData, RefreshAccessTokenAuthRefreshPostErrors, RefreshAccessTokenAuthRefreshPostResponses, RegisterUserAuthRegisterPostData, RegisterUserAuthRegisterPostErrors, RegisterUserAuthRegisterPostResponses, RootGetData, RootGetResponses, VerifyEmailAuthVerifyEmailGetData, VerifyEmailAuthVerifyEmailGetErrors, VerifyEmailAuthVerifyEmailGetResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Register User
 */
export const registerUserAuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserAuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterUserAuthRegisterPostResponses, RegisterUserAuthRegisterPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login For Access Token
 */
export const loginForAccessTokenAuthTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginForAccessTokenAuthTokenPostData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginForAccessTokenAuthTokenPostResponses, LoginForAccessTokenAuthTokenPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseType: 'json',
        url: '/auth/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Refresh Access Token
 */
export const refreshAccessTokenAuthRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshAccessTokenAuthRefreshPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RefreshAccessTokenAuthRefreshPostResponses, RefreshAccessTokenAuthRefreshPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify Email
 */
export const verifyEmailAuthVerifyEmailGet = <ThrowOnError extends boolean = false>(options: Options<VerifyEmailAuthVerifyEmailGetData, ThrowOnError>) => {
    return (options.client ?? client).get<VerifyEmailAuthVerifyEmailGetResponses, VerifyEmailAuthVerifyEmailGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/verify-email',
        ...options
    });
};

/**
 * Read Users Me
 */
export const readUsersMeAuthMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersMeAuthMeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUsersMeAuthMeGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/me',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};

/**
 * Protected Endpoint
 */
export const protectedEndpointProtectedGet = <ThrowOnError extends boolean = false>(options?: Options<ProtectedEndpointProtectedGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProtectedEndpointProtectedGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/protected',
        ...options
    });
};

/**
 * Admin Endpoint
 */
export const adminEndpointAdminGet = <ThrowOnError extends boolean = false>(options?: Options<AdminEndpointAdminGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<AdminEndpointAdminGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/admin',
        ...options
    });
};
