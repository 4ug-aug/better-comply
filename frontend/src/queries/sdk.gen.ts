// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { AdminEndpointAdminGetData, AdminEndpointAdminGetResponses, ComputeNextSchedulingComputeNextPostData, ComputeNextSchedulingComputeNextPostErrors, ComputeNextSchedulingComputeNextPostResponses, CreateSourceSourcesPostData, CreateSourceSourcesPostErrors, CreateSourceSourcesPostResponses, CreateSubscriptionSchedulingSubscriptionsPostData, CreateSubscriptionSchedulingSubscriptionsPostErrors, CreateSubscriptionSchedulingSubscriptionsPostResponses, DeleteSourceSourcesSourceIdDeleteData, DeleteSourceSourcesSourceIdDeleteErrors, DeleteSourceSourcesSourceIdDeleteResponses, DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostData, DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostErrors, DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostResponses, DispatchOutboxSchedulingOutboxDispatchPostData, DispatchOutboxSchedulingOutboxDispatchPostErrors, DispatchOutboxSchedulingOutboxDispatchPostResponses, EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostData, EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostErrors, EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostResponses, GetSourceSourcesSourceIdGetData, GetSourceSourcesSourceIdGetErrors, GetSourceSourcesSourceIdGetResponses, ListOutboxSchedulingOutboxGetData, ListOutboxSchedulingOutboxGetErrors, ListOutboxSchedulingOutboxGetResponses, ListRunsSchedulingRunsGetData, ListRunsSchedulingRunsGetErrors, ListRunsSchedulingRunsGetResponses, ListSourcesSourcesGetData, ListSourcesSourcesGetErrors, ListSourcesSourcesGetResponses, ListSubscriptionsSchedulingSubscriptionsGetData, ListSubscriptionsSchedulingSubscriptionsGetErrors, ListSubscriptionsSchedulingSubscriptionsGetResponses, LoginForAccessTokenAuthTokenPostData, LoginForAccessTokenAuthTokenPostErrors, LoginForAccessTokenAuthTokenPostResponses, ProtectedEndpointProtectedGetData, ProtectedEndpointProtectedGetResponses, ReadSubscriptionSchedulingSubscriptionsSubIdGetData, ReadSubscriptionSchedulingSubscriptionsSubIdGetErrors, ReadSubscriptionSchedulingSubscriptionsSubIdGetResponses, ReadUsersMeAuthMeGetData, ReadUsersMeAuthMeGetResponses, RefreshAccessTokenAuthRefreshPostData, RefreshAccessTokenAuthRefreshPostErrors, RefreshAccessTokenAuthRefreshPostResponses, RegisterUserAuthRegisterPostData, RegisterUserAuthRegisterPostErrors, RegisterUserAuthRegisterPostResponses, RootGetData, RootGetResponses, RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostData, RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostErrors, RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostResponses, TickSchedulingTickPostData, TickSchedulingTickPostErrors, TickSchedulingTickPostResponses, UpdateSourceSourcesSourceIdPutData, UpdateSourceSourcesSourceIdPutErrors, UpdateSourceSourcesSourceIdPutResponses, VerifyEmailAuthVerifyEmailGetData, VerifyEmailAuthVerifyEmailGetErrors, VerifyEmailAuthVerifyEmailGetResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Register User
 */
export const registerUserAuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserAuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterUserAuthRegisterPostResponses, RegisterUserAuthRegisterPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login For Access Token
 */
export const loginForAccessTokenAuthTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginForAccessTokenAuthTokenPostData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginForAccessTokenAuthTokenPostResponses, LoginForAccessTokenAuthTokenPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseType: 'json',
        url: '/auth/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Refresh Access Token
 */
export const refreshAccessTokenAuthRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshAccessTokenAuthRefreshPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RefreshAccessTokenAuthRefreshPostResponses, RefreshAccessTokenAuthRefreshPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify Email
 */
export const verifyEmailAuthVerifyEmailGet = <ThrowOnError extends boolean = false>(options: Options<VerifyEmailAuthVerifyEmailGetData, ThrowOnError>) => {
    return (options.client ?? client).get<VerifyEmailAuthVerifyEmailGetResponses, VerifyEmailAuthVerifyEmailGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/verify-email',
        ...options
    });
};

/**
 * Read Users Me
 */
export const readUsersMeAuthMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersMeAuthMeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUsersMeAuthMeGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/auth/me',
        ...options
    });
};

/**
 * Tick
 */
export const tickSchedulingTickPost = <ThrowOnError extends boolean = false>(options: Options<TickSchedulingTickPostData, ThrowOnError>) => {
    return (options.client ?? client).post<TickSchedulingTickPostResponses, TickSchedulingTickPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/tick',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Compute Next
 */
export const computeNextSchedulingComputeNextPost = <ThrowOnError extends boolean = false>(options: Options<ComputeNextSchedulingComputeNextPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ComputeNextSchedulingComputeNextPostResponses, ComputeNextSchedulingComputeNextPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/compute-next',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Dispatch Outbox
 */
export const dispatchOutboxSchedulingOutboxDispatchPost = <ThrowOnError extends boolean = false>(options: Options<DispatchOutboxSchedulingOutboxDispatchPostData, ThrowOnError>) => {
    return (options.client ?? client).post<DispatchOutboxSchedulingOutboxDispatchPostResponses, DispatchOutboxSchedulingOutboxDispatchPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/outbox/dispatch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Subscriptions
 */
export const listSubscriptionsSchedulingSubscriptionsGet = <ThrowOnError extends boolean = false>(options?: Options<ListSubscriptionsSchedulingSubscriptionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListSubscriptionsSchedulingSubscriptionsGetResponses, ListSubscriptionsSchedulingSubscriptionsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions',
        ...options
    });
};

/**
 * Create Subscription
 */
export const createSubscriptionSchedulingSubscriptionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateSubscriptionSchedulingSubscriptionsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateSubscriptionSchedulingSubscriptionsPostResponses, CreateSubscriptionSchedulingSubscriptionsPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Runs
 */
export const listRunsSchedulingRunsGet = <ThrowOnError extends boolean = false>(options?: Options<ListRunsSchedulingRunsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListRunsSchedulingRunsGetResponses, ListRunsSchedulingRunsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/runs',
        ...options
    });
};

/**
 * List Outbox
 */
export const listOutboxSchedulingOutboxGet = <ThrowOnError extends boolean = false>(options?: Options<ListOutboxSchedulingOutboxGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListOutboxSchedulingOutboxGetResponses, ListOutboxSchedulingOutboxGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/outbox',
        ...options
    });
};

/**
 * Read Subscription
 */
export const readSubscriptionSchedulingSubscriptionsSubIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadSubscriptionSchedulingSubscriptionsSubIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadSubscriptionSchedulingSubscriptionsSubIdGetResponses, ReadSubscriptionSchedulingSubscriptionsSubIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions/{sub_id}',
        ...options
    });
};

/**
 * Enable Subscription
 */
export const enableSubscriptionSchedulingSubscriptionsSubIdEnablePost = <ThrowOnError extends boolean = false>(options: Options<EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostData, ThrowOnError>) => {
    return (options.client ?? client).post<EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostResponses, EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions/{sub_id}/enable',
        ...options
    });
};

/**
 * Disable Subscription
 */
export const disableSubscriptionSchedulingSubscriptionsSubIdDisablePost = <ThrowOnError extends boolean = false>(options: Options<DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostData, ThrowOnError>) => {
    return (options.client ?? client).post<DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostResponses, DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions/{sub_id}/disable',
        ...options
    });
};

/**
 * Run Subscription Now
 */
export const runSubscriptionNowSchedulingSubscriptionsSubIdRunPost = <ThrowOnError extends boolean = false>(options: Options<RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostResponses, RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions/{sub_id}/run',
        ...options
    });
};

/**
 * List Sources
 *
 * List all sources with pagination.
 */
export const listSourcesSourcesGet = <ThrowOnError extends boolean = false>(options?: Options<ListSourcesSourcesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListSourcesSourcesGetResponses, ListSourcesSourcesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/sources/',
        ...options
    });
};

/**
 * Create Source
 *
 * Create a new source.
 */
export const createSourceSourcesPost = <ThrowOnError extends boolean = false>(options: Options<CreateSourceSourcesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateSourceSourcesPostResponses, CreateSourceSourcesPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/sources/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Source
 *
 * Delete a source.
 */
export const deleteSourceSourcesSourceIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSourceSourcesSourceIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteSourceSourcesSourceIdDeleteResponses, DeleteSourceSourcesSourceIdDeleteErrors, ThrowOnError>({
        url: '/sources/{source_id}',
        ...options
    });
};

/**
 * Get Source
 *
 * Get a specific source by ID.
 */
export const getSourceSourcesSourceIdGet = <ThrowOnError extends boolean = false>(options: Options<GetSourceSourcesSourceIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSourceSourcesSourceIdGetResponses, GetSourceSourcesSourceIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/sources/{source_id}',
        ...options
    });
};

/**
 * Update Source
 *
 * Update an existing source.
 */
export const updateSourceSourcesSourceIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateSourceSourcesSourceIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateSourceSourcesSourceIdPutResponses, UpdateSourceSourcesSourceIdPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/sources/{source_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};

/**
 * Protected Endpoint
 */
export const protectedEndpointProtectedGet = <ThrowOnError extends boolean = false>(options?: Options<ProtectedEndpointProtectedGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProtectedEndpointProtectedGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/protected',
        ...options
    });
};

/**
 * Admin Endpoint
 */
export const adminEndpointAdminGet = <ThrowOnError extends boolean = false>(options?: Options<AdminEndpointAdminGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<AdminEndpointAdminGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/admin',
        ...options
    });
};
