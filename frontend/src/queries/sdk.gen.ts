// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import { getDocumentByUrlDocumentsByUrlSourceUrlGetResponseTransformer, getDocumentDocumentsDocIdGetResponseTransformer, getDocumentWithVersionsDocumentsDocIdVersionsGetResponseTransformer, listDocumentsDocumentsGetResponseTransformer, listDocumentsWithVersionsDocumentsWithVersionsGetResponseTransformer } from './transformers.gen';
import type { AdminEndpointAdminGetData, AdminEndpointAdminGetResponses, ComputeNextSchedulingComputeNextPostData, ComputeNextSchedulingComputeNextPostErrors, ComputeNextSchedulingComputeNextPostResponses, CreateSourceSourcesPostData, CreateSourceSourcesPostErrors, CreateSourceSourcesPostResponses, CreateSubscriptionSchedulingSubscriptionsPostData, CreateSubscriptionSchedulingSubscriptionsPostErrors, CreateSubscriptionSchedulingSubscriptionsPostResponses, DeleteSourceSourcesSourceIdDeleteData, DeleteSourceSourcesSourceIdDeleteErrors, DeleteSourceSourcesSourceIdDeleteResponses, DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteData, DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteErrors, DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteResponses, DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostData, DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostErrors, DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostResponses, DispatchOutboxSchedulingOutboxDispatchPostData, DispatchOutboxSchedulingOutboxDispatchPostErrors, DispatchOutboxSchedulingOutboxDispatchPostResponses, EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostData, EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostErrors, EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostResponses, GetDocumentByUrlDocumentsByUrlSourceUrlGetData, GetDocumentByUrlDocumentsByUrlSourceUrlGetErrors, GetDocumentByUrlDocumentsByUrlSourceUrlGetResponses, GetDocumentDocumentsDocIdGetData, GetDocumentDocumentsDocIdGetErrors, GetDocumentDocumentsDocIdGetResponses, GetDocumentWithVersionsDocumentsDocIdVersionsGetData, GetDocumentWithVersionsDocumentsDocIdVersionsGetErrors, GetDocumentWithVersionsDocumentsDocIdVersionsGetResponses, GetParsedDocumentDocumentsDocIdVersionsVersionIdParsedGetData, GetParsedDocumentDocumentsDocIdVersionsVersionIdParsedGetErrors, GetParsedDocumentDocumentsDocIdVersionsVersionIdParsedGetResponses, GetSourceSourcesSourceIdGetData, GetSourceSourcesSourceIdGetErrors, GetSourceSourcesSourceIdGetResponses, ListDocumentsDocumentsGetData, ListDocumentsDocumentsGetErrors, ListDocumentsDocumentsGetResponses, ListDocumentsWithVersionsDocumentsWithVersionsGetData, ListDocumentsWithVersionsDocumentsWithVersionsGetErrors, ListDocumentsWithVersionsDocumentsWithVersionsGetResponses, ListOutboxSchedulingOutboxGetData, ListOutboxSchedulingOutboxGetErrors, ListOutboxSchedulingOutboxGetResponses, ListRunsSchedulingRunsGetData, ListRunsSchedulingRunsGetErrors, ListRunsSchedulingRunsGetResponses, ListSourcesSourcesGetData, ListSourcesSourcesGetErrors, ListSourcesSourcesGetResponses, ListSubscriptionsSchedulingSubscriptionsGetData, ListSubscriptionsSchedulingSubscriptionsGetErrors, ListSubscriptionsSchedulingSubscriptionsGetResponses, LoginForAccessTokenAuthTokenPostData, LoginForAccessTokenAuthTokenPostErrors, LoginForAccessTokenAuthTokenPostResponses, ProtectedEndpointProtectedGetData, ProtectedEndpointProtectedGetResponses, ReadSubscriptionSchedulingSubscriptionsSubIdGetData, ReadSubscriptionSchedulingSubscriptionsSubIdGetErrors, ReadSubscriptionSchedulingSubscriptionsSubIdGetResponses, ReadUsersMeAuthMeGetData, ReadUsersMeAuthMeGetResponses, RefreshAccessTokenAuthRefreshPostData, RefreshAccessTokenAuthRefreshPostErrors, RefreshAccessTokenAuthRefreshPostResponses, RegisterUserAuthRegisterPostData, RegisterUserAuthRegisterPostErrors, RegisterUserAuthRegisterPostResponses, RootGetData, RootGetResponses, RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostData, RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostErrors, RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostResponses, StreamObservabilityObservabilityStreamGetData, StreamObservabilityObservabilityStreamGetErrors, StreamObservabilityObservabilityStreamGetResponses, TickSchedulingTickPostData, TickSchedulingTickPostErrors, TickSchedulingTickPostResponses, UpdateSourceSourcesSourceIdPutData, UpdateSourceSourcesSourceIdPutErrors, UpdateSourceSourcesSourceIdPutResponses, UpdateSubscriptionSchedulingSubscriptionsSubIdPutData, UpdateSubscriptionSchedulingSubscriptionsSubIdPutErrors, UpdateSubscriptionSchedulingSubscriptionsSubIdPutResponses, VerifyEmailAuthVerifyEmailGetData, VerifyEmailAuthVerifyEmailGetErrors, VerifyEmailAuthVerifyEmailGetResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Register User
 */
export const registerUserAuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserAuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterUserAuthRegisterPostResponses, RegisterUserAuthRegisterPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login For Access Token
 */
export const loginForAccessTokenAuthTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginForAccessTokenAuthTokenPostData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginForAccessTokenAuthTokenPostResponses, LoginForAccessTokenAuthTokenPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseType: 'json',
        url: '/auth/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Refresh Access Token
 */
export const refreshAccessTokenAuthRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshAccessTokenAuthRefreshPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RefreshAccessTokenAuthRefreshPostResponses, RefreshAccessTokenAuthRefreshPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Verify Email
 */
export const verifyEmailAuthVerifyEmailGet = <ThrowOnError extends boolean = false>(options: Options<VerifyEmailAuthVerifyEmailGetData, ThrowOnError>) => {
    return (options.client ?? client).get<VerifyEmailAuthVerifyEmailGetResponses, VerifyEmailAuthVerifyEmailGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/auth/verify-email',
        ...options
    });
};

/**
 * Read Users Me
 */
export const readUsersMeAuthMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersMeAuthMeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadUsersMeAuthMeGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/auth/me',
        ...options
    });
};

/**
 * Tick
 */
export const tickSchedulingTickPost = <ThrowOnError extends boolean = false>(options: Options<TickSchedulingTickPostData, ThrowOnError>) => {
    return (options.client ?? client).post<TickSchedulingTickPostResponses, TickSchedulingTickPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/tick',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Compute Next
 */
export const computeNextSchedulingComputeNextPost = <ThrowOnError extends boolean = false>(options: Options<ComputeNextSchedulingComputeNextPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ComputeNextSchedulingComputeNextPostResponses, ComputeNextSchedulingComputeNextPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/compute-next',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Dispatch Outbox
 */
export const dispatchOutboxSchedulingOutboxDispatchPost = <ThrowOnError extends boolean = false>(options: Options<DispatchOutboxSchedulingOutboxDispatchPostData, ThrowOnError>) => {
    return (options.client ?? client).post<DispatchOutboxSchedulingOutboxDispatchPostResponses, DispatchOutboxSchedulingOutboxDispatchPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/outbox/dispatch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Subscriptions
 */
export const listSubscriptionsSchedulingSubscriptionsGet = <ThrowOnError extends boolean = false>(options?: Options<ListSubscriptionsSchedulingSubscriptionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListSubscriptionsSchedulingSubscriptionsGetResponses, ListSubscriptionsSchedulingSubscriptionsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions',
        ...options
    });
};

/**
 * Create Subscription
 */
export const createSubscriptionSchedulingSubscriptionsPost = <ThrowOnError extends boolean = false>(options: Options<CreateSubscriptionSchedulingSubscriptionsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateSubscriptionSchedulingSubscriptionsPostResponses, CreateSubscriptionSchedulingSubscriptionsPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Runs
 */
export const listRunsSchedulingRunsGet = <ThrowOnError extends boolean = false>(options?: Options<ListRunsSchedulingRunsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListRunsSchedulingRunsGetResponses, ListRunsSchedulingRunsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/runs',
        ...options
    });
};

/**
 * List Outbox
 */
export const listOutboxSchedulingOutboxGet = <ThrowOnError extends boolean = false>(options?: Options<ListOutboxSchedulingOutboxGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListOutboxSchedulingOutboxGetResponses, ListOutboxSchedulingOutboxGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/outbox',
        ...options
    });
};

/**
 * Delete Subscription
 */
export const deleteSubscriptionSchedulingSubscriptionsSubIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteResponses, DeleteSubscriptionSchedulingSubscriptionsSubIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions/{sub_id}',
        ...options
    });
};

/**
 * Read Subscription
 */
export const readSubscriptionSchedulingSubscriptionsSubIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadSubscriptionSchedulingSubscriptionsSubIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ReadSubscriptionSchedulingSubscriptionsSubIdGetResponses, ReadSubscriptionSchedulingSubscriptionsSubIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions/{sub_id}',
        ...options
    });
};

/**
 * Update Subscription
 */
export const updateSubscriptionSchedulingSubscriptionsSubIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateSubscriptionSchedulingSubscriptionsSubIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateSubscriptionSchedulingSubscriptionsSubIdPutResponses, UpdateSubscriptionSchedulingSubscriptionsSubIdPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions/{sub_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Enable Subscription
 */
export const enableSubscriptionSchedulingSubscriptionsSubIdEnablePost = <ThrowOnError extends boolean = false>(options: Options<EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostData, ThrowOnError>) => {
    return (options.client ?? client).post<EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostResponses, EnableSubscriptionSchedulingSubscriptionsSubIdEnablePostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions/{sub_id}/enable',
        ...options
    });
};

/**
 * Disable Subscription
 */
export const disableSubscriptionSchedulingSubscriptionsSubIdDisablePost = <ThrowOnError extends boolean = false>(options: Options<DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostData, ThrowOnError>) => {
    return (options.client ?? client).post<DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostResponses, DisableSubscriptionSchedulingSubscriptionsSubIdDisablePostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions/{sub_id}/disable',
        ...options
    });
};

/**
 * Run Subscription Now
 */
export const runSubscriptionNowSchedulingSubscriptionsSubIdRunPost = <ThrowOnError extends boolean = false>(options: Options<RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostResponses, RunSubscriptionNowSchedulingSubscriptionsSubIdRunPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scheduling/subscriptions/{sub_id}/run',
        ...options
    });
};

/**
 * List Sources
 *
 * List all sources with pagination.
 */
export const listSourcesSourcesGet = <ThrowOnError extends boolean = false>(options?: Options<ListSourcesSourcesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListSourcesSourcesGetResponses, ListSourcesSourcesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/sources/',
        ...options
    });
};

/**
 * Create Source
 *
 * Create a new source.
 */
export const createSourceSourcesPost = <ThrowOnError extends boolean = false>(options: Options<CreateSourceSourcesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateSourceSourcesPostResponses, CreateSourceSourcesPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/sources/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Source
 *
 * Delete a source.
 */
export const deleteSourceSourcesSourceIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSourceSourcesSourceIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteSourceSourcesSourceIdDeleteResponses, DeleteSourceSourcesSourceIdDeleteErrors, ThrowOnError>({
        url: '/sources/{source_id}',
        ...options
    });
};

/**
 * Get Source
 *
 * Get a specific source by ID.
 */
export const getSourceSourcesSourceIdGet = <ThrowOnError extends boolean = false>(options: Options<GetSourceSourcesSourceIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSourceSourcesSourceIdGetResponses, GetSourceSourcesSourceIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/sources/{source_id}',
        ...options
    });
};

/**
 * Update Source
 *
 * Update an existing source.
 */
export const updateSourceSourcesSourceIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateSourceSourcesSourceIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateSourceSourcesSourceIdPutResponses, UpdateSourceSourcesSourceIdPutErrors, ThrowOnError>({
        responseType: 'json',
        url: '/sources/{source_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Documents
 *
 * List all documents with optional filtering.
 *
 * Args:
 * skip: Number of documents to skip
 * limit: Maximum documents to return
 * source_id: Filter by source ID
 * language: Filter by language code
 *
 * Returns:
 * DocumentListResponse with paginated documents
 */
export const listDocumentsDocumentsGet = <ThrowOnError extends boolean = false>(options?: Options<ListDocumentsDocumentsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListDocumentsDocumentsGetResponses, ListDocumentsDocumentsGetErrors, ThrowOnError>({
        responseTransformer: listDocumentsDocumentsGetResponseTransformer,
        responseType: 'json',
        url: '/documents',
        ...options
    });
};

/**
 * List Documents With Versions
 *
 * List all documents with their versions.
 *
 * Args:
 * skip: Number of documents to skip
 * limit: Maximum documents to return
 *
 * Returns:
 * DocumentDetailListResponse with paginated documents and versions
 */
export const listDocumentsWithVersionsDocumentsWithVersionsGet = <ThrowOnError extends boolean = false>(options?: Options<ListDocumentsWithVersionsDocumentsWithVersionsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListDocumentsWithVersionsDocumentsWithVersionsGetResponses, ListDocumentsWithVersionsDocumentsWithVersionsGetErrors, ThrowOnError>({
        responseTransformer: listDocumentsWithVersionsDocumentsWithVersionsGetResponseTransformer,
        responseType: 'json',
        url: '/documents/with-versions',
        ...options
    });
};

/**
 * Get Document
 *
 * Get a single document by ID.
 *
 * Args:
 * doc_id: Document ID
 *
 * Returns:
 * DocumentOut response
 *
 * Raises:
 * HTTPException: 404 if document not found
 */
export const getDocumentDocumentsDocIdGet = <ThrowOnError extends boolean = false>(options: Options<GetDocumentDocumentsDocIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentDocumentsDocIdGetResponses, GetDocumentDocumentsDocIdGetErrors, ThrowOnError>({
        responseTransformer: getDocumentDocumentsDocIdGetResponseTransformer,
        responseType: 'json',
        url: '/documents/{doc_id}',
        ...options
    });
};

/**
 * Get Document With Versions
 *
 * Get a document with all its versions.
 *
 * Args:
 * doc_id: Document ID
 *
 * Returns:
 * DocumentDetailOut response with all versions
 *
 * Raises:
 * HTTPException: 404 if document not found
 */
export const getDocumentWithVersionsDocumentsDocIdVersionsGet = <ThrowOnError extends boolean = false>(options: Options<GetDocumentWithVersionsDocumentsDocIdVersionsGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentWithVersionsDocumentsDocIdVersionsGetResponses, GetDocumentWithVersionsDocumentsDocIdVersionsGetErrors, ThrowOnError>({
        responseTransformer: getDocumentWithVersionsDocumentsDocIdVersionsGetResponseTransformer,
        responseType: 'json',
        url: '/documents/{doc_id}/versions',
        ...options
    });
};

/**
 * Get Document By Url
 *
 * Get a document by source URL.
 *
 * Args:
 * source_url: Source URL to search
 *
 * Returns:
 * DocumentOut response
 *
 * Raises:
 * HTTPException: 404 if document not found
 */
export const getDocumentByUrlDocumentsByUrlSourceUrlGet = <ThrowOnError extends boolean = false>(options: Options<GetDocumentByUrlDocumentsByUrlSourceUrlGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetDocumentByUrlDocumentsByUrlSourceUrlGetResponses, GetDocumentByUrlDocumentsByUrlSourceUrlGetErrors, ThrowOnError>({
        responseTransformer: getDocumentByUrlDocumentsByUrlSourceUrlGetResponseTransformer,
        responseType: 'json',
        url: '/documents/by-url/{source_url}',
        ...options
    });
};

/**
 * Get Parsed Document
 *
 * Get parsed document content from MinIO by version ID.
 *
 * Args:
 * doc_id: Document ID (for route validation)
 * version_id: Document version ID
 *
 * Returns:
 * ParsedDocumentOut with full parsed content
 *
 * Raises:
 * HTTPException: 404 if document version not found
 * HTTPException: 500 if MinIO fetch fails
 */
export const getParsedDocumentDocumentsDocIdVersionsVersionIdParsedGet = <ThrowOnError extends boolean = false>(options: Options<GetParsedDocumentDocumentsDocIdVersionsVersionIdParsedGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetParsedDocumentDocumentsDocIdVersionsVersionIdParsedGetResponses, GetParsedDocumentDocumentsDocIdVersionsVersionIdParsedGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/documents/{doc_id}/versions/{version_id}/parsed',
        ...options
    });
};

/**
 * Stream Observability
 *
 * Stream observability data (outbox and runs) via Server-Sent Events.
 *
 * Sends initial snapshot, then periodic updates every 3 seconds.
 * Requires authentication token as query parameter since EventSource doesn't support custom headers.
 */
export const streamObservabilityObservabilityStreamGet = <ThrowOnError extends boolean = false>(options: Options<StreamObservabilityObservabilityStreamGetData, ThrowOnError>) => {
    return (options.client ?? client).get<StreamObservabilityObservabilityStreamGetResponses, StreamObservabilityObservabilityStreamGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/observability/stream',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};

/**
 * Protected Endpoint
 */
export const protectedEndpointProtectedGet = <ThrowOnError extends boolean = false>(options?: Options<ProtectedEndpointProtectedGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ProtectedEndpointProtectedGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/protected',
        ...options
    });
};

/**
 * Admin Endpoint
 */
export const adminEndpointAdminGet = <ThrowOnError extends boolean = false>(options?: Options<AdminEndpointAdminGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<AdminEndpointAdminGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/admin',
        ...options
    });
};
