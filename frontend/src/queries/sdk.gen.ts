// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import { createIdentifierIdentifiersPostResponseTransformer, createObservationObservationsPostResponseTransformer, createOrgUnitOrgUnitsPostResponseTransformer, createScenarioScenariosPostResponseTransformer, createSettingSettingsPostResponseTransformer, createTargetTargetsPostResponseTransformer, createTemplateSpearTemplatesPostResponseTransformer, getGroupMicrosoftGraphGroupsGroupIdGetResponseTransformer, getIdentifiersByTargetIdentifiersTargetsTargetIdGetResponseTransformer, getObservationsByTargetObservationsTargetsTargetIdGetResponseTransformer, getOrganizationMicrosoftGraphOrganizationGetResponseTransformer, getOrgUnitByIdOrgUnitsOrgUnitIdGetResponseTransformer, getOrgUnitsOrgUnitsGetResponseTransformer, getScenarioByIdScenariosScenarioIdGetResponseTransformer, getScenariosScenariosGetResponseTransformer, getSettingByKeySettingsKeyKeyGetResponseTransformer, getSettingsByCategorySettingsCategoryCategoryGetResponseTransformer, getSettingSettingsSettingIdGetResponseTransformer, getTargetByEmailTargetsEmailEmailGetResponseTransformer, getTargetsByCompanyTargetsCompanyCompanyGetResponseTransformer, getTargetsTargetsGetResponseTransformer, getTargetTargetsTargetIdGetResponseTransformer, getTemplateSpearTemplatesTemplateIdGetResponseTransformer, getUserMicrosoftGraphUsersUserIdGetResponseTransformer, listGroupsMicrosoftGraphGroupsGetResponseTransformer, listSettingsSettingsGetResponseTransformer, listTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetResponseTransformer, listTemplatesSpearTemplatesGetResponseTransformer, listUsersMicrosoftGraphUsersGetResponseTransformer, searchGroupsMicrosoftGraphGroupsSearchPostResponseTransformer, searchTargetsByNameTargetsSearchNameGetResponseTransformer, searchUsersMicrosoftGraphUsersSearchPostResponseTransformer, updateOrgUnitOrgUnitsOrgUnitIdPutResponseTransformer, updateScenarioScenariosScenarioIdPutResponseTransformer, updateSettingByKeySettingsKeyKeyPutResponseTransformer, updateSettingSettingsSettingIdPutResponseTransformer, updateTargetTargetsTargetIdPutResponseTransformer, updateTemplateSpearTemplatesTemplateIdPutResponseTransformer } from './transformers.gen';
import type { AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostData, AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostErrors, AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostResponses, BulkUpdateSettingsSettingsBulkUpdatePostData, BulkUpdateSettingsSettingsBulkUpdatePostErrors, BulkUpdateSettingsSettingsBulkUpdatePostResponses, CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetData, CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetErrors, CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetResponses, CreateIdentifierIdentifiersPostData, CreateIdentifierIdentifiersPostErrors, CreateIdentifierIdentifiersPostResponses, CreateObservationObservationsPostData, CreateObservationObservationsPostErrors, CreateObservationObservationsPostResponses, CreateOrgUnitOrgUnitsPostData, CreateOrgUnitOrgUnitsPostErrors, CreateOrgUnitOrgUnitsPostResponses, CreateScenarioScenariosPostData, CreateScenarioScenariosPostErrors, CreateScenarioScenariosPostResponses, CreateSettingSettingsPostData, CreateSettingSettingsPostErrors, CreateSettingSettingsPostResponses, CreateTargetTargetsPostData, CreateTargetTargetsPostErrors, CreateTargetTargetsPostResponses, CreateTemplateSpearTemplatesPostData, CreateTemplateSpearTemplatesPostErrors, CreateTemplateSpearTemplatesPostResponses, DeleteAccountIntegrationsAccountsAccountIdDeleteData, DeleteAccountIntegrationsAccountsAccountIdDeleteErrors, DeleteAccountIntegrationsAccountsAccountIdDeleteResponses, DeleteIdentifierIdentifiersIdentifierIdDeleteData, DeleteIdentifierIdentifiersIdentifierIdDeleteErrors, DeleteIdentifierIdentifiersIdentifierIdDeleteResponses, DeleteObservationObservationsObservationIdDeleteData, DeleteObservationObservationsObservationIdDeleteErrors, DeleteObservationObservationsObservationIdDeleteResponses, DeleteOrgUnitOrgUnitsOrgUnitIdDeleteData, DeleteOrgUnitOrgUnitsOrgUnitIdDeleteErrors, DeleteOrgUnitOrgUnitsOrgUnitIdDeleteResponses, DeleteScenarioScenariosScenarioIdDeleteData, DeleteScenarioScenariosScenarioIdDeleteErrors, DeleteScenarioScenariosScenarioIdDeleteResponses, DeleteSettingByKeySettingsKeyKeyDeleteData, DeleteSettingByKeySettingsKeyKeyDeleteErrors, DeleteSettingByKeySettingsKeyKeyDeleteResponses, DeleteSettingSettingsSettingIdDeleteData, DeleteSettingSettingsSettingIdDeleteErrors, DeleteSettingSettingsSettingIdDeleteResponses, DeleteTargetTargetsTargetIdDeleteData, DeleteTargetTargetsTargetIdDeleteErrors, DeleteTargetTargetsTargetIdDeleteResponses, DeleteTemplateSpearTemplatesTemplateIdDeleteData, DeleteTemplateSpearTemplatesTemplateIdDeleteErrors, DeleteTemplateSpearTemplatesTemplateIdDeleteResponses, EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostData, EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostErrors, EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostResponses, EnqueueHunterioEmailTestEnqueueHunterioEmailPostData, EnqueueHunterioEmailTestEnqueueHunterioEmailPostErrors, EnqueueHunterioEmailTestEnqueueHunterioEmailPostResponses, GenerateTextLlmGeneratePostData, GenerateTextLlmGeneratePostErrors, GenerateTextLlmGeneratePostResponses, GetAccountIntegrationsAccountsAccountIdGetData, GetAccountIntegrationsAccountsAccountIdGetErrors, GetAccountIntegrationsAccountsAccountIdGetResponses, GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetData, GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetErrors, GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetResponses, GetAuditIntegrationsAccountsAccountIdAuditGetData, GetAuditIntegrationsAccountsAccountIdAuditGetErrors, GetAuditIntegrationsAccountsAccountIdAuditGetResponses, GetGroupMicrosoftGraphGroupsGroupIdGetData, GetGroupMicrosoftGraphGroupsGroupIdGetErrors, GetGroupMicrosoftGraphGroupsGroupIdGetResponses, GetIdentifiersByTargetIdentifiersTargetsTargetIdGetData, GetIdentifiersByTargetIdentifiersTargetsTargetIdGetErrors, GetIdentifiersByTargetIdentifiersTargetsTargetIdGetResponses, GetMetricsMicrosoftGraphMetricsGetData, GetMetricsMicrosoftGraphMetricsGetResponses, GetMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetData, GetMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetResponses, GetMicrosoftGraphStatisticsMicrosoftGraphStatisticsGetData, GetMicrosoftGraphStatisticsMicrosoftGraphStatisticsGetResponses, GetObservationsByTargetObservationsTargetsTargetIdGetData, GetObservationsByTargetObservationsTargetsTargetIdGetErrors, GetObservationsByTargetObservationsTargetsTargetIdGetResponses, GetOrganizationMicrosoftGraphOrganizationGetData, GetOrganizationMicrosoftGraphOrganizationGetResponses, GetOrgUnitByIdOrgUnitsOrgUnitIdGetData, GetOrgUnitByIdOrgUnitsOrgUnitIdGetErrors, GetOrgUnitByIdOrgUnitsOrgUnitIdGetResponses, GetOrgUnitsOrgUnitsGetData, GetOrgUnitsOrgUnitsGetErrors, GetOrgUnitsOrgUnitsGetResponses, GetProviderIntegrationsProvidersProviderKeyGetData, GetProviderIntegrationsProvidersProviderKeyGetErrors, GetProviderIntegrationsProvidersProviderKeyGetResponses, GetScenarioByIdScenariosScenarioIdGetData, GetScenarioByIdScenariosScenarioIdGetErrors, GetScenarioByIdScenariosScenarioIdGetResponses, GetScenariosScenariosGetData, GetScenariosScenariosGetErrors, GetScenariosScenariosGetResponses, GetSecretIntegrationsAccountsAccountIdSecretGetData, GetSecretIntegrationsAccountsAccountIdSecretGetErrors, GetSecretIntegrationsAccountsAccountIdSecretGetResponses, GetSettingByKeySettingsKeyKeyGetData, GetSettingByKeySettingsKeyKeyGetErrors, GetSettingByKeySettingsKeyKeyGetResponses, GetSettingsByCategorySettingsCategoryCategoryGetData, GetSettingsByCategorySettingsCategoryCategoryGetErrors, GetSettingsByCategorySettingsCategoryCategoryGetResponses, GetSettingSettingsSettingIdGetData, GetSettingSettingsSettingIdGetErrors, GetSettingSettingsSettingIdGetResponses, GetSettingValueSettingsValueKeyGetData, GetSettingValueSettingsValueKeyGetErrors, GetSettingValueSettingsValueKeyGetResponses, GetTargetByEmailTargetsEmailEmailGetData, GetTargetByEmailTargetsEmailEmailGetErrors, GetTargetByEmailTargetsEmailEmailGetResponses, GetTargetsByCompanyTargetsCompanyCompanyGetData, GetTargetsByCompanyTargetsCompanyCompanyGetErrors, GetTargetsByCompanyTargetsCompanyCompanyGetResponses, GetTargetsTargetsGetData, GetTargetsTargetsGetErrors, GetTargetsTargetsGetResponses, GetTargetTargetsTargetIdGetData, GetTargetTargetsTargetIdGetErrors, GetTargetTargetsTargetIdGetResponses, GetTaskByIdJobsTasksTaskIdGetData, GetTaskByIdJobsTasksTaskIdGetErrors, GetTaskByIdJobsTasksTaskIdGetResponses, GetTemplateSpearTemplatesTemplateIdGetData, GetTemplateSpearTemplatesTemplateIdGetErrors, GetTemplateSpearTemplatesTemplateIdGetResponses, GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetData, GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetErrors, GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetResponses, GetUserMicrosoftGraphUsersUserIdGetData, GetUserMicrosoftGraphUsersUserIdGetErrors, GetUserMicrosoftGraphUsersUserIdGetResponses, HasSecretIntegrationsAccountsAccountIdHasSecretGetData, HasSecretIntegrationsAccountsAccountIdHasSecretGetErrors, HasSecretIntegrationsAccountsAccountIdHasSecretGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses, HealthCheckMicrosoftGraphHealthGetData, HealthCheckMicrosoftGraphHealthGetResponses, ListAccountsIntegrationsAccountsGetData, ListAccountsIntegrationsAccountsGetErrors, ListAccountsIntegrationsAccountsGetResponses, ListAuditAuditGetData, ListAuditAuditGetErrors, ListAuditAuditGetResponses, ListEntityAuditAuditEntityTypeEntityIdGetData, ListEntityAuditAuditEntityTypeEntityIdGetErrors, ListEntityAuditAuditEntityTypeEntityIdGetResponses, ListGroupsMicrosoftGraphGroupsGetData, ListGroupsMicrosoftGraphGroupsGetErrors, ListGroupsMicrosoftGraphGroupsGetResponses, ListProvidersIntegrationsProvidersGetData, ListProvidersIntegrationsProvidersGetResponses, ListSettingsSettingsGetData, ListSettingsSettingsGetErrors, ListSettingsSettingsGetResponses, ListTasksJobsTasksGetData, ListTasksJobsTasksGetErrors, ListTasksJobsTasksGetResponses, ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetData, ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetErrors, ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetResponses, ListTemplatesSpearTemplatesGetData, ListTemplatesSpearTemplatesGetErrors, ListTemplatesSpearTemplatesGetResponses, ListUsersMicrosoftGraphUsersGetData, ListUsersMicrosoftGraphUsersGetErrors, ListUsersMicrosoftGraphUsersGetResponses, PutSecretIntegrationsAccountsAccountIdSecretPostData, PutSecretIntegrationsAccountsAccountIdSecretPostErrors, PutSecretIntegrationsAccountsAccountIdSecretPostResponses, RequestJobJobRequestPostData, RequestJobJobRequestPostErrors, RequestJobJobRequestPostResponses, ResetMetricsMicrosoftGraphMetricsResetPostData, ResetMetricsMicrosoftGraphMetricsResetPostResponses, RootGetData, RootGetResponses, SearchGroupsMicrosoftGraphGroupsSearchPostData, SearchGroupsMicrosoftGraphGroupsSearchPostErrors, SearchGroupsMicrosoftGraphGroupsSearchPostResponses, SearchTargetsByNameTargetsSearchNameGetData, SearchTargetsByNameTargetsSearchNameGetErrors, SearchTargetsByNameTargetsSearchNameGetResponses, SearchUsersMicrosoftGraphUsersSearchPostData, SearchUsersMicrosoftGraphUsersSearchPostErrors, SearchUsersMicrosoftGraphUsersSearchPostResponses, SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostData, SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostErrors, SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostResponses, TestMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetData, TestMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetResponses, UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostData, UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostErrors, UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostResponses, UpdateOrgUnitOrgUnitsOrgUnitIdPutData, UpdateOrgUnitOrgUnitsOrgUnitIdPutErrors, UpdateOrgUnitOrgUnitsOrgUnitIdPutResponses, UpdateScenarioScenariosScenarioIdPutData, UpdateScenarioScenariosScenarioIdPutErrors, UpdateScenarioScenariosScenarioIdPutResponses, UpdateSettingByKeySettingsKeyKeyPutData, UpdateSettingByKeySettingsKeyKeyPutErrors, UpdateSettingByKeySettingsKeyKeyPutResponses, UpdateSettingSettingsSettingIdPutData, UpdateSettingSettingsSettingIdPutErrors, UpdateSettingSettingsSettingIdPutResponses, UpdateTargetTargetsTargetIdPutData, UpdateTargetTargetsTargetIdPutErrors, UpdateTargetTargetsTargetIdPutResponses, UpdateTemplateSpearTemplatesTemplateIdPutData, UpdateTemplateSpearTemplatesTemplateIdPutErrors, UpdateTemplateSpearTemplatesTemplateIdPutResponses, UpsertAccountIntegrationsProviderKeyAccountsPostData, UpsertAccountIntegrationsProviderKeyAccountsPostErrors, UpsertAccountIntegrationsProviderKeyAccountsPostResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Targets
 *
 * Get all targets with pagination.
 */
export const getTargetsTargetsGet = <ThrowOnError extends boolean = false>(options?: Options<GetTargetsTargetsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTargetsTargetsGetResponses, GetTargetsTargetsGetErrors, ThrowOnError>({
        responseTransformer: getTargetsTargetsGetResponseTransformer,
        responseType: 'json',
        url: '/targets',
        ...options
    });
};

/**
 * Create Target
 *
 * Create a new target.
 */
export const createTargetTargetsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTargetTargetsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTargetTargetsPostResponses, CreateTargetTargetsPostErrors, ThrowOnError>({
        responseTransformer: createTargetTargetsPostResponseTransformer,
        responseType: 'json',
        url: '/targets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Target
 *
 * Delete a target by ID.
 */
export const deleteTargetTargetsTargetIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTargetTargetsTargetIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTargetTargetsTargetIdDeleteResponses, DeleteTargetTargetsTargetIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/targets/{target_id}',
        ...options
    });
};

/**
 * Get Target
 *
 * Get a specific target by ID.
 */
export const getTargetTargetsTargetIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTargetTargetsTargetIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTargetTargetsTargetIdGetResponses, GetTargetTargetsTargetIdGetErrors, ThrowOnError>({
        responseTransformer: getTargetTargetsTargetIdGetResponseTransformer,
        responseType: 'json',
        url: '/targets/{target_id}',
        ...options
    });
};

/**
 * Update Target
 *
 * Update a target by ID.
 */
export const updateTargetTargetsTargetIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTargetTargetsTargetIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTargetTargetsTargetIdPutResponses, UpdateTargetTargetsTargetIdPutErrors, ThrowOnError>({
        responseTransformer: updateTargetTargetsTargetIdPutResponseTransformer,
        responseType: 'json',
        url: '/targets/{target_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Target By Email
 *
 * Get a target by email address.
 */
export const getTargetByEmailTargetsEmailEmailGet = <ThrowOnError extends boolean = false>(options: Options<GetTargetByEmailTargetsEmailEmailGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTargetByEmailTargetsEmailEmailGetResponses, GetTargetByEmailTargetsEmailEmailGetErrors, ThrowOnError>({
        responseTransformer: getTargetByEmailTargetsEmailEmailGetResponseTransformer,
        responseType: 'json',
        url: '/targets/email/{email}',
        ...options
    });
};

/**
 * Get Targets By Company
 *
 * Get targets by company.
 */
export const getTargetsByCompanyTargetsCompanyCompanyGet = <ThrowOnError extends boolean = false>(options: Options<GetTargetsByCompanyTargetsCompanyCompanyGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTargetsByCompanyTargetsCompanyCompanyGetResponses, GetTargetsByCompanyTargetsCompanyCompanyGetErrors, ThrowOnError>({
        responseTransformer: getTargetsByCompanyTargetsCompanyCompanyGetResponseTransformer,
        responseType: 'json',
        url: '/targets/company/{company}',
        ...options
    });
};

/**
 * Search Targets By Name
 *
 * Search targets by name (partial match).
 */
export const searchTargetsByNameTargetsSearchNameGet = <ThrowOnError extends boolean = false>(options: Options<SearchTargetsByNameTargetsSearchNameGetData, ThrowOnError>) => {
    return (options.client ?? client).get<SearchTargetsByNameTargetsSearchNameGetResponses, SearchTargetsByNameTargetsSearchNameGetErrors, ThrowOnError>({
        responseTransformer: searchTargetsByNameTargetsSearchNameGetResponseTransformer,
        responseType: 'json',
        url: '/targets/search/name',
        ...options
    });
};

/**
 * Get Scenarios
 */
export const getScenariosScenariosGet = <ThrowOnError extends boolean = false>(options?: Options<GetScenariosScenariosGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetScenariosScenariosGetResponses, GetScenariosScenariosGetErrors, ThrowOnError>({
        responseTransformer: getScenariosScenariosGetResponseTransformer,
        responseType: 'json',
        url: '/scenarios',
        ...options
    });
};

/**
 * Create Scenario
 */
export const createScenarioScenariosPost = <ThrowOnError extends boolean = false>(options: Options<CreateScenarioScenariosPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateScenarioScenariosPostResponses, CreateScenarioScenariosPostErrors, ThrowOnError>({
        responseTransformer: createScenarioScenariosPostResponseTransformer,
        responseType: 'json',
        url: '/scenarios',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Scenario
 */
export const deleteScenarioScenariosScenarioIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteScenarioScenariosScenarioIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteScenarioScenariosScenarioIdDeleteResponses, DeleteScenarioScenariosScenarioIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/scenarios/{scenario_id}',
        ...options
    });
};

/**
 * Get Scenario By Id
 */
export const getScenarioByIdScenariosScenarioIdGet = <ThrowOnError extends boolean = false>(options: Options<GetScenarioByIdScenariosScenarioIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetScenarioByIdScenariosScenarioIdGetResponses, GetScenarioByIdScenariosScenarioIdGetErrors, ThrowOnError>({
        responseTransformer: getScenarioByIdScenariosScenarioIdGetResponseTransformer,
        responseType: 'json',
        url: '/scenarios/{scenario_id}',
        ...options
    });
};

/**
 * Update Scenario
 */
export const updateScenarioScenariosScenarioIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateScenarioScenariosScenarioIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateScenarioScenariosScenarioIdPutResponses, UpdateScenarioScenariosScenarioIdPutErrors, ThrowOnError>({
        responseTransformer: updateScenarioScenariosScenarioIdPutResponseTransformer,
        responseType: 'json',
        url: '/scenarios/{scenario_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Templates
 */
export const listTemplatesSpearTemplatesGet = <ThrowOnError extends boolean = false>(options?: Options<ListTemplatesSpearTemplatesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTemplatesSpearTemplatesGetResponses, ListTemplatesSpearTemplatesGetErrors, ThrowOnError>({
        responseTransformer: listTemplatesSpearTemplatesGetResponseTransformer,
        responseType: 'json',
        url: '/spear-templates',
        ...options
    });
};

/**
 * Create Template
 */
export const createTemplateSpearTemplatesPost = <ThrowOnError extends boolean = false>(options: Options<CreateTemplateSpearTemplatesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTemplateSpearTemplatesPostResponses, CreateTemplateSpearTemplatesPostErrors, ThrowOnError>({
        responseTransformer: createTemplateSpearTemplatesPostResponseTransformer,
        responseType: 'json',
        url: '/spear-templates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Templates For Scenario
 */
export const listTemplatesForScenarioSpearTemplatesScenarioScenarioIdGet = <ThrowOnError extends boolean = false>(options: Options<ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetResponses, ListTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetErrors, ThrowOnError>({
        responseTransformer: listTemplatesForScenarioSpearTemplatesScenarioScenarioIdGetResponseTransformer,
        responseType: 'json',
        url: '/spear-templates/scenario/{scenario_id}',
        ...options
    });
};

/**
 * Delete Template
 */
export const deleteTemplateSpearTemplatesTemplateIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTemplateSpearTemplatesTemplateIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteTemplateSpearTemplatesTemplateIdDeleteResponses, DeleteTemplateSpearTemplatesTemplateIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/spear-templates/{template_id}',
        ...options
    });
};

/**
 * Get Template
 */
export const getTemplateSpearTemplatesTemplateIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTemplateSpearTemplatesTemplateIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTemplateSpearTemplatesTemplateIdGetResponses, GetTemplateSpearTemplatesTemplateIdGetErrors, ThrowOnError>({
        responseTransformer: getTemplateSpearTemplatesTemplateIdGetResponseTransformer,
        responseType: 'json',
        url: '/spear-templates/{template_id}',
        ...options
    });
};

/**
 * Update Template
 */
export const updateTemplateSpearTemplatesTemplateIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTemplateSpearTemplatesTemplateIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateTemplateSpearTemplatesTemplateIdPutResponses, UpdateTemplateSpearTemplatesTemplateIdPutErrors, ThrowOnError>({
        responseTransformer: updateTemplateSpearTemplatesTemplateIdPutResponseTransformer,
        responseType: 'json',
        url: '/spear-templates/{template_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Request a job
 *
 * Create a job request and emit an event to the 'job' Kafka topic.
 *
 * Returns a server-generated `job_id` immediately and publishes a
 * `job.requested` event with the job metadata.
 */
export const requestJobJobRequestPost = <ThrowOnError extends boolean = false>(options: Options<RequestJobJobRequestPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RequestJobJobRequestPostResponses, RequestJobJobRequestPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/job/request',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Enqueue Hunterio Email
 *
 * Trigger a HunterIO email enrichment task.
 */
export const enqueueHunterioEmailTestEnqueueHunterioEmailPost = <ThrowOnError extends boolean = false>(options: Options<EnqueueHunterioEmailTestEnqueueHunterioEmailPostData, ThrowOnError>) => {
    return (options.client ?? client).post<EnqueueHunterioEmailTestEnqueueHunterioEmailPostResponses, EnqueueHunterioEmailTestEnqueueHunterioEmailPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/test/enqueue/hunterio/email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Enqueue Hunterio Email Finder
 *
 * Trigger a HunterIO email finder task.
 */
export const enqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPost = <ThrowOnError extends boolean = false>(options: Options<EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostData, ThrowOnError>) => {
    return (options.client ?? client).post<EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostResponses, EnqueueHunterioEmailFinderTestEnqueueHunterioEmailFinderPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/test/enqueue/hunterio/email-finder',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Tasks
 *
 * List Celery tasks with optional filtering.
 *
 * Returns tasks with decoded args, kwargs, and results for job visibility.
 */
export const listTasksJobsTasksGet = <ThrowOnError extends boolean = false>(options?: Options<ListTasksJobsTasksGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListTasksJobsTasksGetResponses, ListTasksJobsTasksGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/jobs/tasks',
        ...options
    });
};

/**
 * Get Task By Id
 *
 * Get a specific Celery task by its task_id.
 *
 * Returns task details with decoded args, kwargs, and result.
 */
export const getTaskByIdJobsTasksTaskIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTaskByIdJobsTasksTaskIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetTaskByIdJobsTasksTaskIdGetResponses, GetTaskByIdJobsTasksTaskIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/jobs/tasks/{task_id}',
        ...options
    });
};

/**
 * Get Identifiers By Target
 */
export const getIdentifiersByTargetIdentifiersTargetsTargetIdGet = <ThrowOnError extends boolean = false>(options: Options<GetIdentifiersByTargetIdentifiersTargetsTargetIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetIdentifiersByTargetIdentifiersTargetsTargetIdGetResponses, GetIdentifiersByTargetIdentifiersTargetsTargetIdGetErrors, ThrowOnError>({
        responseTransformer: getIdentifiersByTargetIdentifiersTargetsTargetIdGetResponseTransformer,
        responseType: 'json',
        url: '/identifiers/targets/{target_id}',
        ...options
    });
};

/**
 * Create Identifier
 */
export const createIdentifierIdentifiersPost = <ThrowOnError extends boolean = false>(options: Options<CreateIdentifierIdentifiersPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateIdentifierIdentifiersPostResponses, CreateIdentifierIdentifiersPostErrors, ThrowOnError>({
        responseTransformer: createIdentifierIdentifiersPostResponseTransformer,
        responseType: 'json',
        url: '/identifiers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Identifier
 */
export const deleteIdentifierIdentifiersIdentifierIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteIdentifierIdentifiersIdentifierIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteIdentifierIdentifiersIdentifierIdDeleteResponses, DeleteIdentifierIdentifiersIdentifierIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/identifiers/{identifier_id}',
        ...options
    });
};

/**
 * Get Observations By Target
 */
export const getObservationsByTargetObservationsTargetsTargetIdGet = <ThrowOnError extends boolean = false>(options: Options<GetObservationsByTargetObservationsTargetsTargetIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetObservationsByTargetObservationsTargetsTargetIdGetResponses, GetObservationsByTargetObservationsTargetsTargetIdGetErrors, ThrowOnError>({
        responseTransformer: getObservationsByTargetObservationsTargetsTargetIdGetResponseTransformer,
        responseType: 'json',
        url: '/observations/targets/{target_id}',
        ...options
    });
};

/**
 * Create Observation
 */
export const createObservationObservationsPost = <ThrowOnError extends boolean = false>(options: Options<CreateObservationObservationsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateObservationObservationsPostResponses, CreateObservationObservationsPostErrors, ThrowOnError>({
        responseTransformer: createObservationObservationsPostResponseTransformer,
        responseType: 'json',
        url: '/observations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Observation
 */
export const deleteObservationObservationsObservationIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteObservationObservationsObservationIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteObservationObservationsObservationIdDeleteResponses, DeleteObservationObservationsObservationIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/observations/{observation_id}',
        ...options
    });
};

/**
 * Generate Text
 */
export const generateTextLlmGeneratePost = <ThrowOnError extends boolean = false>(options: Options<GenerateTextLlmGeneratePostData, ThrowOnError>) => {
    return (options.client ?? client).post<GenerateTextLlmGeneratePostResponses, GenerateTextLlmGeneratePostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/llm/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Org Units
 */
export const getOrgUnitsOrgUnitsGet = <ThrowOnError extends boolean = false>(options?: Options<GetOrgUnitsOrgUnitsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrgUnitsOrgUnitsGetResponses, GetOrgUnitsOrgUnitsGetErrors, ThrowOnError>({
        responseTransformer: getOrgUnitsOrgUnitsGetResponseTransformer,
        responseType: 'json',
        url: '/org-units',
        ...options
    });
};

/**
 * Create Org Unit
 */
export const createOrgUnitOrgUnitsPost = <ThrowOnError extends boolean = false>(options: Options<CreateOrgUnitOrgUnitsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateOrgUnitOrgUnitsPostResponses, CreateOrgUnitOrgUnitsPostErrors, ThrowOnError>({
        responseTransformer: createOrgUnitOrgUnitsPostResponseTransformer,
        responseType: 'json',
        url: '/org-units',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Org Unit
 */
export const deleteOrgUnitOrgUnitsOrgUnitIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteOrgUnitOrgUnitsOrgUnitIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteOrgUnitOrgUnitsOrgUnitIdDeleteResponses, DeleteOrgUnitOrgUnitsOrgUnitIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/org-units/{org_unit_id}',
        ...options
    });
};

/**
 * Get Org Unit By Id
 */
export const getOrgUnitByIdOrgUnitsOrgUnitIdGet = <ThrowOnError extends boolean = false>(options: Options<GetOrgUnitByIdOrgUnitsOrgUnitIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetOrgUnitByIdOrgUnitsOrgUnitIdGetResponses, GetOrgUnitByIdOrgUnitsOrgUnitIdGetErrors, ThrowOnError>({
        responseTransformer: getOrgUnitByIdOrgUnitsOrgUnitIdGetResponseTransformer,
        responseType: 'json',
        url: '/org-units/{org_unit_id}',
        ...options
    });
};

/**
 * Update Org Unit
 */
export const updateOrgUnitOrgUnitsOrgUnitIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateOrgUnitOrgUnitsOrgUnitIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateOrgUnitOrgUnitsOrgUnitIdPutResponses, UpdateOrgUnitOrgUnitsOrgUnitIdPutErrors, ThrowOnError>({
        responseTransformer: updateOrgUnitOrgUnitsOrgUnitIdPutResponseTransformer,
        responseType: 'json',
        url: '/org-units/{org_unit_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Assign Target To Org Unit
 */
export const assignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPost = <ThrowOnError extends boolean = false>(options: Options<AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostData, ThrowOnError>) => {
    return (options.client ?? client).post<AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostResponses, AssignTargetToOrgUnitOrgUnitsOrgUnitIdAssignTargetIdPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/org-units/{org_unit_id}/assign/{target_id}',
        ...options
    });
};

/**
 * Unassign Target From Org Unit
 */
export const unassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPost = <ThrowOnError extends boolean = false>(options: Options<UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostData, ThrowOnError>) => {
    return (options.client ?? client).post<UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostResponses, UnassignTargetFromOrgUnitOrgUnitsUnassignTargetIdPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/org-units/unassign/{target_id}',
        ...options
    });
};

/**
 * List Settings
 *
 * Get all settings with pagination and optional filtering.
 */
export const listSettingsSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<ListSettingsSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListSettingsSettingsGetResponses, ListSettingsSettingsGetErrors, ThrowOnError>({
        responseTransformer: listSettingsSettingsGetResponseTransformer,
        responseType: 'json',
        url: '/settings',
        ...options
    });
};

/**
 * Create Setting
 *
 * Create a new setting.
 */
export const createSettingSettingsPost = <ThrowOnError extends boolean = false>(options: Options<CreateSettingSettingsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateSettingSettingsPostResponses, CreateSettingSettingsPostErrors, ThrowOnError>({
        responseTransformer: createSettingSettingsPostResponseTransformer,
        responseType: 'json',
        url: '/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Setting
 *
 * Delete a setting by ID.
 */
export const deleteSettingSettingsSettingIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSettingSettingsSettingIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteSettingSettingsSettingIdDeleteResponses, DeleteSettingSettingsSettingIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/settings/{setting_id}',
        ...options
    });
};

/**
 * Get Setting
 *
 * Get a specific setting by ID.
 */
export const getSettingSettingsSettingIdGet = <ThrowOnError extends boolean = false>(options: Options<GetSettingSettingsSettingIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSettingSettingsSettingIdGetResponses, GetSettingSettingsSettingIdGetErrors, ThrowOnError>({
        responseTransformer: getSettingSettingsSettingIdGetResponseTransformer,
        responseType: 'json',
        url: '/settings/{setting_id}',
        ...options
    });
};

/**
 * Update Setting
 *
 * Update a setting by ID.
 */
export const updateSettingSettingsSettingIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateSettingSettingsSettingIdPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateSettingSettingsSettingIdPutResponses, UpdateSettingSettingsSettingIdPutErrors, ThrowOnError>({
        responseTransformer: updateSettingSettingsSettingIdPutResponseTransformer,
        responseType: 'json',
        url: '/settings/{setting_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Setting By Key
 *
 * Delete a setting by key.
 */
export const deleteSettingByKeySettingsKeyKeyDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteSettingByKeySettingsKeyKeyDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteSettingByKeySettingsKeyKeyDeleteResponses, DeleteSettingByKeySettingsKeyKeyDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/settings/key/{key}',
        ...options
    });
};

/**
 * Get Setting By Key
 *
 * Get a specific setting by key identifier.
 */
export const getSettingByKeySettingsKeyKeyGet = <ThrowOnError extends boolean = false>(options: Options<GetSettingByKeySettingsKeyKeyGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSettingByKeySettingsKeyKeyGetResponses, GetSettingByKeySettingsKeyKeyGetErrors, ThrowOnError>({
        responseTransformer: getSettingByKeySettingsKeyKeyGetResponseTransformer,
        responseType: 'json',
        url: '/settings/key/{key}',
        ...options
    });
};

/**
 * Update Setting By Key
 *
 * Update a setting by key.
 */
export const updateSettingByKeySettingsKeyKeyPut = <ThrowOnError extends boolean = false>(options: Options<UpdateSettingByKeySettingsKeyKeyPutData, ThrowOnError>) => {
    return (options.client ?? client).put<UpdateSettingByKeySettingsKeyKeyPutResponses, UpdateSettingByKeySettingsKeyKeyPutErrors, ThrowOnError>({
        responseTransformer: updateSettingByKeySettingsKeyKeyPutResponseTransformer,
        responseType: 'json',
        url: '/settings/key/{key}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Settings By Category
 *
 * Get settings by category.
 */
export const getSettingsByCategorySettingsCategoryCategoryGet = <ThrowOnError extends boolean = false>(options: Options<GetSettingsByCategorySettingsCategoryCategoryGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSettingsByCategorySettingsCategoryCategoryGetResponses, GetSettingsByCategorySettingsCategoryCategoryGetErrors, ThrowOnError>({
        responseTransformer: getSettingsByCategorySettingsCategoryCategoryGetResponseTransformer,
        responseType: 'json',
        url: '/settings/category/{category}',
        ...options
    });
};

/**
 * Bulk Update Settings
 *
 * Bulk update multiple settings.
 */
export const bulkUpdateSettingsSettingsBulkUpdatePost = <ThrowOnError extends boolean = false>(options: Options<BulkUpdateSettingsSettingsBulkUpdatePostData, ThrowOnError>) => {
    return (options.client ?? client).post<BulkUpdateSettingsSettingsBulkUpdatePostResponses, BulkUpdateSettingsSettingsBulkUpdatePostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/settings/bulk-update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Microsoft Graph Credentials
 *
 * Get Microsoft Graph credentials.
 */
export const getMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGet = <ThrowOnError extends boolean = false>(options?: Options<GetMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMicrosoftGraphCredentialsSettingsIntegrationsMicrosoftGraphGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/settings/integrations/microsoft-graph',
        ...options
    });
};

/**
 * Setup Microsoft Graph
 *
 * Setup Microsoft Graph integration.
 */
export const setupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPost = <ThrowOnError extends boolean = false>(options: Options<SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostData, ThrowOnError>) => {
    return (options.client ?? client).post<SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostResponses, SetupMicrosoftGraphSettingsIntegrationsMicrosoftGraphPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/settings/integrations/microsoft-graph',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Setting Value
 *
 * Get a setting value by key (for internal use).
 */
export const getSettingValueSettingsValueKeyGet = <ThrowOnError extends boolean = false>(options: Options<GetSettingValueSettingsValueKeyGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSettingValueSettingsValueKeyGetResponses, GetSettingValueSettingsValueKeyGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/settings/value/{key}',
        ...options
    });
};

/**
 * Test Microsoft Graph Connection
 *
 * Test Microsoft Graph connection and permissions.
 */
export const testMicrosoftGraphConnectionMicrosoftGraphTestConnectionGet = <ThrowOnError extends boolean = false>(options?: Options<TestMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<TestMicrosoftGraphConnectionMicrosoftGraphTestConnectionGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/microsoft-graph/test-connection',
        ...options
    });
};

/**
 * Get Microsoft Graph Statistics
 *
 * Get Microsoft Graph statistics and overview.
 */
export const getMicrosoftGraphStatisticsMicrosoftGraphStatisticsGet = <ThrowOnError extends boolean = false>(options?: Options<GetMicrosoftGraphStatisticsMicrosoftGraphStatisticsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMicrosoftGraphStatisticsMicrosoftGraphStatisticsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/microsoft-graph/statistics',
        ...options
    });
};

/**
 * List Users
 *
 * List users from Microsoft Graph with pagination and search.
 */
export const listUsersMicrosoftGraphUsersGet = <ThrowOnError extends boolean = false>(options?: Options<ListUsersMicrosoftGraphUsersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListUsersMicrosoftGraphUsersGetResponses, ListUsersMicrosoftGraphUsersGetErrors, ThrowOnError>({
        responseTransformer: listUsersMicrosoftGraphUsersGetResponseTransformer,
        responseType: 'json',
        url: '/microsoft-graph/users',
        ...options
    });
};

/**
 * Get User
 *
 * Get detailed user information by ID or userPrincipalName.
 */
export const getUserMicrosoftGraphUsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<GetUserMicrosoftGraphUsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserMicrosoftGraphUsersUserIdGetResponses, GetUserMicrosoftGraphUsersUserIdGetErrors, ThrowOnError>({
        responseTransformer: getUserMicrosoftGraphUsersUserIdGetResponseTransformer,
        responseType: 'json',
        url: '/microsoft-graph/users/{user_id}',
        ...options
    });
};

/**
 * Get User Hierarchy
 *
 * Get user's organizational hierarchy.
 */
export const getUserHierarchyMicrosoftGraphUsersUserIdHierarchyGet = <ThrowOnError extends boolean = false>(options: Options<GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetResponses, GetUserHierarchyMicrosoftGraphUsersUserIdHierarchyGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/microsoft-graph/users/{user_id}/hierarchy',
        ...options
    });
};

/**
 * Search Users
 *
 * Advanced user search with filters.
 */
export const searchUsersMicrosoftGraphUsersSearchPost = <ThrowOnError extends boolean = false>(options: Options<SearchUsersMicrosoftGraphUsersSearchPostData, ThrowOnError>) => {
    return (options.client ?? client).post<SearchUsersMicrosoftGraphUsersSearchPostResponses, SearchUsersMicrosoftGraphUsersSearchPostErrors, ThrowOnError>({
        responseTransformer: searchUsersMicrosoftGraphUsersSearchPostResponseTransformer,
        responseType: 'json',
        url: '/microsoft-graph/users/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Groups
 *
 * List groups from Microsoft Graph with pagination and search.
 */
export const listGroupsMicrosoftGraphGroupsGet = <ThrowOnError extends boolean = false>(options?: Options<ListGroupsMicrosoftGraphGroupsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListGroupsMicrosoftGraphGroupsGetResponses, ListGroupsMicrosoftGraphGroupsGetErrors, ThrowOnError>({
        responseTransformer: listGroupsMicrosoftGraphGroupsGetResponseTransformer,
        responseType: 'json',
        url: '/microsoft-graph/groups',
        ...options
    });
};

/**
 * Get Group
 *
 * Get detailed group information by ID.
 */
export const getGroupMicrosoftGraphGroupsGroupIdGet = <ThrowOnError extends boolean = false>(options: Options<GetGroupMicrosoftGraphGroupsGroupIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetGroupMicrosoftGraphGroupsGroupIdGetResponses, GetGroupMicrosoftGraphGroupsGroupIdGetErrors, ThrowOnError>({
        responseTransformer: getGroupMicrosoftGraphGroupsGroupIdGetResponseTransformer,
        responseType: 'json',
        url: '/microsoft-graph/groups/{group_id}',
        ...options
    });
};

/**
 * Search Groups
 *
 * Advanced group search with filters.
 */
export const searchGroupsMicrosoftGraphGroupsSearchPost = <ThrowOnError extends boolean = false>(options: Options<SearchGroupsMicrosoftGraphGroupsSearchPostData, ThrowOnError>) => {
    return (options.client ?? client).post<SearchGroupsMicrosoftGraphGroupsSearchPostResponses, SearchGroupsMicrosoftGraphGroupsSearchPostErrors, ThrowOnError>({
        responseTransformer: searchGroupsMicrosoftGraphGroupsSearchPostResponseTransformer,
        responseType: 'json',
        url: '/microsoft-graph/groups/search',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Organization
 *
 * Get organization information and domains.
 */
export const getOrganizationMicrosoftGraphOrganizationGet = <ThrowOnError extends boolean = false>(options?: Options<GetOrganizationMicrosoftGraphOrganizationGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganizationMicrosoftGraphOrganizationGetResponses, unknown, ThrowOnError>({
        responseTransformer: getOrganizationMicrosoftGraphOrganizationGetResponseTransformer,
        responseType: 'json',
        url: '/microsoft-graph/organization',
        ...options
    });
};

/**
 * Get Metrics
 *
 * Get Microsoft Graph API usage metrics.
 */
export const getMetricsMicrosoftGraphMetricsGet = <ThrowOnError extends boolean = false>(options?: Options<GetMetricsMicrosoftGraphMetricsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMetricsMicrosoftGraphMetricsGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/microsoft-graph/metrics',
        ...options
    });
};

/**
 * Reset Metrics
 *
 * Reset Microsoft Graph API usage metrics.
 */
export const resetMetricsMicrosoftGraphMetricsResetPost = <ThrowOnError extends boolean = false>(options?: Options<ResetMetricsMicrosoftGraphMetricsResetPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ResetMetricsMicrosoftGraphMetricsResetPostResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/microsoft-graph/metrics/reset',
        ...options
    });
};

/**
 * Health Check
 *
 * Health check endpoint for Microsoft Graph router.
 */
export const healthCheckMicrosoftGraphHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckMicrosoftGraphHealthGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckMicrosoftGraphHealthGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/microsoft-graph/health',
        ...options
    });
};

/**
 * List Providers
 *
 * List all available integration providers.
 */
export const listProvidersIntegrationsProvidersGet = <ThrowOnError extends boolean = false>(options?: Options<ListProvidersIntegrationsProvidersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListProvidersIntegrationsProvidersGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/integrations/providers',
        ...options
    });
};

/**
 * Get Provider
 *
 * Get a specific integration provider.
 */
export const getProviderIntegrationsProvidersProviderKeyGet = <ThrowOnError extends boolean = false>(options: Options<GetProviderIntegrationsProvidersProviderKeyGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetProviderIntegrationsProvidersProviderKeyGetResponses, GetProviderIntegrationsProvidersProviderKeyGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/integrations/providers/{provider_key}',
        ...options
    });
};

/**
 * List Accounts
 *
 * List all integration accounts.
 */
export const listAccountsIntegrationsAccountsGet = <ThrowOnError extends boolean = false>(options?: Options<ListAccountsIntegrationsAccountsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListAccountsIntegrationsAccountsGetResponses, ListAccountsIntegrationsAccountsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/integrations/accounts',
        ...options
    });
};

/**
 * Get Accounts By Provider Key
 *
 * Get all integration accounts by provider key.
 */
export const getAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGet = <ThrowOnError extends boolean = false>(options: Options<GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetResponses, GetAccountsByProviderKeyIntegrationsAccountsByProviderProviderKeyGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/integrations/accounts/by-provider/{provider_key}',
        ...options
    });
};

/**
 * Delete Account
 *
 * Delete an integration account and all its secrets.
 */
export const deleteAccountIntegrationsAccountsAccountIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountIntegrationsAccountsAccountIdDeleteData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteAccountIntegrationsAccountsAccountIdDeleteResponses, DeleteAccountIntegrationsAccountsAccountIdDeleteErrors, ThrowOnError>({
        responseType: 'json',
        url: '/integrations/accounts/{account_id}',
        ...options
    });
};

/**
 * Get Account
 *
 * Get a specific integration account.
 */
export const getAccountIntegrationsAccountsAccountIdGet = <ThrowOnError extends boolean = false>(options: Options<GetAccountIntegrationsAccountsAccountIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAccountIntegrationsAccountsAccountIdGetResponses, GetAccountIntegrationsAccountsAccountIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/integrations/accounts/{account_id}',
        ...options
    });
};

/**
 * Upsert Account
 *
 * Create or update an integration account.
 */
export const upsertAccountIntegrationsProviderKeyAccountsPost = <ThrowOnError extends boolean = false>(options: Options<UpsertAccountIntegrationsProviderKeyAccountsPostData, ThrowOnError>) => {
    return (options.client ?? client).post<UpsertAccountIntegrationsProviderKeyAccountsPostResponses, UpsertAccountIntegrationsProviderKeyAccountsPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/integrations/{provider_key}/accounts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Secret
 *
 * Get the active secret for an integration account (should be restricted in production).
 */
export const getSecretIntegrationsAccountsAccountIdSecretGet = <ThrowOnError extends boolean = false>(options: Options<GetSecretIntegrationsAccountsAccountIdSecretGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetSecretIntegrationsAccountsAccountIdSecretGetResponses, GetSecretIntegrationsAccountsAccountIdSecretGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/integrations/accounts/{account_id}/secret',
        ...options
    });
};

/**
 * Put Secret
 *
 * Store or update a secret for an integration account.
 */
export const putSecretIntegrationsAccountsAccountIdSecretPost = <ThrowOnError extends boolean = false>(options: Options<PutSecretIntegrationsAccountsAccountIdSecretPostData, ThrowOnError>) => {
    return (options.client ?? client).post<PutSecretIntegrationsAccountsAccountIdSecretPostResponses, PutSecretIntegrationsAccountsAccountIdSecretPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/integrations/accounts/{account_id}/secret',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Has Secret
 *
 * Check if an account has an active secret (without exposing the secret).
 */
export const hasSecretIntegrationsAccountsAccountIdHasSecretGet = <ThrowOnError extends boolean = false>(options: Options<HasSecretIntegrationsAccountsAccountIdHasSecretGetData, ThrowOnError>) => {
    return (options.client ?? client).get<HasSecretIntegrationsAccountsAccountIdHasSecretGetResponses, HasSecretIntegrationsAccountsAccountIdHasSecretGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/integrations/accounts/{account_id}/has-secret',
        ...options
    });
};

/**
 * Get Audit
 *
 * Get the audit history for an integration account.
 */
export const getAuditIntegrationsAccountsAccountIdAuditGet = <ThrowOnError extends boolean = false>(options: Options<GetAuditIntegrationsAccountsAccountIdAuditGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetAuditIntegrationsAccountsAccountIdAuditGetResponses, GetAuditIntegrationsAccountsAccountIdAuditGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/integrations/accounts/{account_id}/audit',
        ...options
    });
};

/**
 * Check Integrity
 *
 * Check the integrity of all secret versions for an account (debugging endpoint).
 */
export const checkIntegrityIntegrationsAccountsAccountIdIntegrityGet = <ThrowOnError extends boolean = false>(options: Options<CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetData, ThrowOnError>) => {
    return (options.client ?? client).get<CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetResponses, CheckIntegrityIntegrationsAccountsAccountIdIntegrityGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/integrations/accounts/{account_id}/integrity',
        ...options
    });
};

/**
 * List Audit
 */
export const listAuditAuditGet = <ThrowOnError extends boolean = false>(options?: Options<ListAuditAuditGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListAuditAuditGetResponses, ListAuditAuditGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/audit',
        ...options
    });
};

/**
 * List Entity Audit
 */
export const listEntityAuditAuditEntityTypeEntityIdGet = <ThrowOnError extends boolean = false>(options: Options<ListEntityAuditAuditEntityTypeEntityIdGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ListEntityAuditAuditEntityTypeEntityIdGetResponses, ListEntityAuditAuditEntityTypeEntityIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/audit/{entity_type}/{entity_id}',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};

/**
 * Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/health',
        ...options
    });
};
